# Types
{.experimental: "codeReordering".}


type
# types required for: xcb
  xcb_connection_t* = pointer
  xcb_window_t* = uint32
  xcb_visualid_t* = uint32
# types required for: xlib(_xrandr)
  Display* = pointer
  RROutput* = uint
  Window* = uint
  VisualID* = uint
# types required for: win32
  BOOL* = cint
  DWORD* = uint
  LPVOID* = pointer
  HANDLE* = pointer
  HMONITOR* = pointer
  WCHAR* = uint16
  LPCWSTR* = ptr uint16
  HINSTANCE* = pointer
  HWND* = pointer
  SECURITY_ATTRIBUTES* = object
    nLength: DWORD
    lpSecurityDescriptor: LPVOID
    bInheritHandle: BOOL
# types required for: wayland
  wl_display* = pointer
  wl_surface* = pointer
# types required for: mir
  MirConnection* = pointer
  MirSurface* = pointer
# types required for: ggp
  GgpFrameToken* = pointer
  GgpStreamDescriptor* = pointer
# types required for: directfb
  IDirectFB* = pointer
  IDirectFBSurface* = pointer
# types required for: fuchsia
  zx_handle_t* = pointer

  Reserved* = enum
    RESERVED_FLAG

template MAKE_VERSION*(major, minor, patch: int): int = (major shl 22) or (minor shl 12) or patch
template VERSION_MAJOR*(version: int): int = ((version shr 22))
template VERSION_MINOR*(version: int): int = ((version shr 12) and 0x3ff)
template VERSION_PATCH*(version: int): int = (version and 0xfff)

type
  ANativeWindow* = distinct pointer
  AHardwareBuffer* = distinct pointer
  CAMetalLayer* = distinct pointer
  Instance* = distinct pointer
  PhysicalDevice* = distinct pointer
  Device* = distinct pointer
  Queue* = distinct pointer
  CommandBuffer* = distinct pointer
  DeviceMemory* = distinct pointer
  CommandPool* = distinct pointer
  Buffer* = distinct pointer
  BufferView* = distinct pointer
  Image* = distinct pointer
  ImageView* = distinct pointer
  ShaderModule* = distinct pointer
  Pipeline* = distinct pointer
  PipelineLayout* = distinct pointer
  Sampler* = distinct pointer
  DescriptorSet* = distinct pointer
  DescriptorSetLayout* = distinct pointer
  DescriptorPool* = distinct pointer
  Fence* = distinct pointer
  Semaphore* = distinct pointer
  Event* = distinct pointer
  QueryPool* = distinct pointer
  Framebuffer* = distinct pointer
  RenderPass* = distinct pointer
  PipelineCache* = distinct pointer
  IndirectCommandsLayoutNV* = distinct pointer
  DescriptorUpdateTemplate* = distinct pointer
  DescriptorUpdateTemplateKHR* = distinct pointer
  SamplerYcbcrConversion* = distinct pointer
  SamplerYcbcrConversionKHR* = distinct pointer
  ValidationCacheEXT* = distinct pointer
  AccelerationStructureKHR* = distinct pointer
  AccelerationStructureNV* = distinct pointer
  PerformanceConfigurationINTEL* = distinct pointer
  DeferredOperationKHR* = distinct pointer
  PrivateDataSlotEXT* = distinct pointer
  DisplayKHR* = distinct pointer
  DisplayModeKHR* = distinct pointer
  SurfaceKHR* = distinct pointer
  SwapchainKHR* = distinct pointer
  DebugReportCallbackEXT* = distinct pointer
  DebugUtilsMessengerEXT* = distinct pointer
  AttachmentLoadOp* {.size: 4.} = enum
    ATTACHMENT_LOAD_OP_LOAD = 0
    ATTACHMENT_LOAD_OP_CLEAR = 1
    ATTACHMENT_LOAD_OP_DONT_CARE = 2
  AttachmentStoreOp* {.size: 4.} = enum
    ATTACHMENT_STORE_OP_STORE = 0
    ATTACHMENT_STORE_OP_DONT_CARE = 1
    ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
  BlendFactor* {.size: 4.} = enum
    BLEND_FACTOR_ZERO = 0
    BLEND_FACTOR_ONE = 1
    BLEND_FACTOR_SRC_COLOR = 2
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    BLEND_FACTOR_DST_COLOR = 4
    BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    BLEND_FACTOR_SRC_ALPHA = 6
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    BLEND_FACTOR_DST_ALPHA = 8
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    BLEND_FACTOR_CONSTANT_COLOR = 10
    BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    BLEND_FACTOR_CONSTANT_ALPHA = 12
    BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    BLEND_FACTOR_SRC1_COLOR = 15
    BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    BLEND_FACTOR_SRC1_ALPHA = 17
    BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
  BlendOp* {.size: 4.} = enum
    BLEND_OP_ADD = 0
    BLEND_OP_SUBTRACT = 1
    BLEND_OP_REVERSE_SUBTRACT = 2
    BLEND_OP_MIN = 3
    BLEND_OP_MAX = 4
    BLEND_OP_ZERO_EXT = 1000148000
    BLEND_OP_SRC_EXT = 1000148001
    BLEND_OP_DST_EXT = 1000148002
    BLEND_OP_SRC_OVER_EXT = 1000148003
    BLEND_OP_DST_OVER_EXT = 1000148004
    BLEND_OP_SRC_IN_EXT = 1000148005
    BLEND_OP_DST_IN_EXT = 1000148006
    BLEND_OP_SRC_OUT_EXT = 1000148007
    BLEND_OP_DST_OUT_EXT = 1000148008
    BLEND_OP_SRC_ATOP_EXT = 1000148009
    BLEND_OP_DST_ATOP_EXT = 1000148010
    BLEND_OP_XOR_EXT = 1000148011
    BLEND_OP_MULTIPLY_EXT = 1000148012
    BLEND_OP_SCREEN_EXT = 1000148013
    BLEND_OP_OVERLAY_EXT = 1000148014
    BLEND_OP_DARKEN_EXT = 1000148015
    BLEND_OP_LIGHTEN_EXT = 1000148016
    BLEND_OP_COLORDODGE_EXT = 1000148017
    BLEND_OP_COLORBURN_EXT = 1000148018
    BLEND_OP_HARDLIGHT_EXT = 1000148019
    BLEND_OP_SOFTLIGHT_EXT = 1000148020
    BLEND_OP_DIFFERENCE_EXT = 1000148021
    BLEND_OP_EXCLUSION_EXT = 1000148022
    BLEND_OP_INVERT_EXT = 1000148023
    BLEND_OP_INVERT_RGB_EXT = 1000148024
    BLEND_OP_LINEARDODGE_EXT = 1000148025
    BLEND_OP_LINEARBURN_EXT = 1000148026
    BLEND_OP_VIVIDLIGHT_EXT = 1000148027
    BLEND_OP_LINEARLIGHT_EXT = 1000148028
    BLEND_OP_PINLIGHT_EXT = 1000148029
    BLEND_OP_HARDMIX_EXT = 1000148030
    BLEND_OP_HSL_HUE_EXT = 1000148031
    BLEND_OP_HSL_SATURATION_EXT = 1000148032
    BLEND_OP_HSL_COLOR_EXT = 1000148033
    BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
    BLEND_OP_PLUS_EXT = 1000148035
    BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
    BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
    BLEND_OP_PLUS_DARKER_EXT = 1000148038
    BLEND_OP_MINUS_EXT = 1000148039
    BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
    BLEND_OP_CONTRAST_EXT = 1000148041
    BLEND_OP_INVERT_OVG_EXT = 1000148042
    BLEND_OP_RED_EXT = 1000148043
    BLEND_OP_GREEN_EXT = 1000148044
    BLEND_OP_BLUE_EXT = 1000148045
  BorderColor* {.size: 4.} = enum
    BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    BORDER_COLOR_INT_OPAQUE_BLACK = 3
    BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    BORDER_COLOR_INT_OPAQUE_WHITE = 5
    BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
    BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
  FramebufferCreateFlagBits* {.size: 4.} = enum
    FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
  FramebufferCreateFlag* {.size: 4.} = enum
    FRAMEBUFFER_CREATE_IMAGELESS = 0
  RenderPassCreateFlagBits* {.size: 4.} = enum
    RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
  RenderPassCreateFlag* {.size: 4.} = enum
    RENDER_PASS_CREATE_TRANSFORM_QCOM = 1
  SamplerCreateFlagBits* {.size: 4.} = enum
    SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
    SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
  SamplerCreateFlag* {.size: 4.} = enum
    SAMPLER_CREATE_SUBSAMPLED_EXT = 0
    SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_EXT = 1
  PipelineCacheHeaderVersion* {.size: 4.} = enum
    PIPELINE_CACHE_HEADER_VERSION_ONE = 1
  PipelineCacheCreateFlagBits* {.size: 4.} = enum
    PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
  PipelineCacheCreateFlag* {.size: 4.} = enum
    PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_EXT = 0
  PipelineShaderStageCreateFlagBits* {.size: 4.} = enum
    PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
    PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
  PipelineShaderStageCreateFlag* {.size: 4.} = enum
    PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_EXT = 0
    PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_EXT = 1
  DescriptorSetLayoutCreateFlagBits* {.size: 4.} = enum
    DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
  DescriptorSetLayoutCreateFlag* {.size: 4.} = enum
    DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_KHR = 0
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL = 1
  DeviceQueueCreateFlagBits* {.size: 4.} = enum
    DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
  DeviceQueueCreateFlag* {.size: 4.} = enum
    DEVICE_QUEUE_CREATE_PROTECTED = 0
  BufferCreateFlagBits* {.size: 4.} = enum
    BUFFER_CREATE_SPARSE_BINDING_BIT = 1
    BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
    BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
    BUFFER_CREATE_PROTECTED_BIT = 8
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
  BufferCreateFlag* {.size: 4.} = enum
    BUFFER_CREATE_SPARSE_BINDING = 0
    BUFFER_CREATE_SPARSE_RESIDENCY = 1
    BUFFER_CREATE_SPARSE_ALIASED = 2
    BUFFER_CREATE_PROTECTED = 3
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY = 4
  BufferUsageFlagBits* {.size: 4.} = enum
    BUFFER_USAGE_TRANSFER_SRC_BIT = 1
    BUFFER_USAGE_TRANSFER_DST_BIT = 2
    BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    BUFFER_USAGE_RAY_TRACING_BIT_KHR = 1024
    BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
  BufferUsageFlag* {.size: 4.} = enum
    BUFFER_USAGE_TRANSFER_SRC = 0
    BUFFER_USAGE_TRANSFER_DST = 1
    BUFFER_USAGE_UNIFORM_TEXEL_BUFFER = 2
    BUFFER_USAGE_STORAGE_TEXEL_BUFFER = 3
    BUFFER_USAGE_UNIFORM_BUFFER = 4
    BUFFER_USAGE_STORAGE_BUFFER = 5
    BUFFER_USAGE_INDEX_BUFFER = 6
    BUFFER_USAGE_VERTEX_BUFFER = 7
    BUFFER_USAGE_INDIRECT_BUFFER = 8
    BUFFER_USAGE_CONDITIONAL_RENDERING_EXT = 9
    BUFFER_USAGE_RAY_TRACING_KHR = 10
    BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_EXT = 11
    BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_EXT = 12
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS = 17
  ColorComponentFlagBits* {.size: 4.} = enum
    COLOR_COMPONENT_R_BIT = 1
    COLOR_COMPONENT_G_BIT = 2
    COLOR_COMPONENT_B_BIT = 4
    COLOR_COMPONENT_A_BIT = 8
  ColorComponentFlag* {.size: 4.} = enum
    COLOR_COMPONENT_R = 0
    COLOR_COMPONENT_G = 1
    COLOR_COMPONENT_B = 2
    COLOR_COMPONENT_A = 3
  ComponentSwizzle* {.size: 4.} = enum
    COMPONENT_SWIZZLE_IDENTITY = 0
    COMPONENT_SWIZZLE_ZERO = 1
    COMPONENT_SWIZZLE_ONE = 2
    COMPONENT_SWIZZLE_R = 3
    COMPONENT_SWIZZLE_G = 4
    COMPONENT_SWIZZLE_B = 5
    COMPONENT_SWIZZLE_A = 6
  CommandPoolCreateFlagBits* {.size: 4.} = enum
    COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
    COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
    COMMAND_POOL_CREATE_PROTECTED_BIT = 4
  CommandPoolCreateFlag* {.size: 4.} = enum
    COMMAND_POOL_CREATE_TRANSIENT = 0
    COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER = 1
    COMMAND_POOL_CREATE_PROTECTED = 2
  CommandPoolResetFlagBits* {.size: 4.} = enum
    COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
  CommandPoolResetFlag* {.size: 4.} = enum
    COMMAND_POOL_RESET_RELEASE_RESOURCES = 0
  CommandBufferResetFlagBits* {.size: 4.} = enum
    COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
  CommandBufferResetFlag* {.size: 4.} = enum
    COMMAND_BUFFER_RESET_RELEASE_RESOURCES = 0
  CommandBufferLevel* {.size: 4.} = enum
    COMMAND_BUFFER_LEVEL_PRIMARY = 0
    COMMAND_BUFFER_LEVEL_SECONDARY = 1
  CommandBufferUsageFlagBits* {.size: 4.} = enum
    COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
  CommandBufferUsageFlag* {.size: 4.} = enum
    COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT = 0
    COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE = 1
    COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE = 2
  CompareOp* {.size: 4.} = enum
    COMPARE_OP_NEVER = 0
    COMPARE_OP_LESS = 1
    COMPARE_OP_EQUAL = 2
    COMPARE_OP_LESS_OR_EQUAL = 3
    COMPARE_OP_GREATER = 4
    COMPARE_OP_NOT_EQUAL = 5
    COMPARE_OP_GREATER_OR_EQUAL = 6
    COMPARE_OP_ALWAYS = 7
  CullModeFlagBits* {.size: 4.} = enum
    CULL_MODE_FRONT_BIT = 1
    CULL_MODE_BACK_BIT = 2
  CullModeFlag* {.size: 4.} = enum
    CULL_MODE_FRONT = 0
    CULL_MODE_BACK = 1
  DescriptorType* {.size: 4.} = enum
    DESCRIPTOR_TYPE_SAMPLER = 0
    DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
    DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000
  DynamicState* {.size: 4.} = enum
    DYNAMIC_STATE_VIEWPORT = 0
    DYNAMIC_STATE_SCISSOR = 1
    DYNAMIC_STATE_LINE_WIDTH = 2
    DYNAMIC_STATE_DEPTH_BIAS = 3
    DYNAMIC_STATE_BLEND_CONSTANTS = 4
    DYNAMIC_STATE_DEPTH_BOUNDS = 5
    DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
    DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
    DYNAMIC_STATE_STENCIL_REFERENCE = 8
    DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
    DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
    DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
    DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
    DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
    DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
    DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
    DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
    DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
    DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
    DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
    DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
    DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
    DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
    DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
    DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
    DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
    DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
    DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
  FenceCreateFlagBits* {.size: 4.} = enum
    FENCE_CREATE_SIGNALED_BIT = 1
  FenceCreateFlag* {.size: 4.} = enum
    FENCE_CREATE_SIGNALED = 0
  PolygonMode* {.size: 4.} = enum
    POLYGON_MODE_FILL = 0
    POLYGON_MODE_LINE = 1
    POLYGON_MODE_POINT = 2
    POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
  Format* {.size: 4.} = enum
    FORMAT_UNDEFINED = 0
    FORMAT_R4G4_UNORM_PACK8 = 1
    FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    FORMAT_R5G6B5_UNORM_PACK16 = 4
    FORMAT_B5G6R5_UNORM_PACK16 = 5
    FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    FORMAT_R8_UNORM = 9
    FORMAT_R8_SNORM = 10
    FORMAT_R8_USCALED = 11
    FORMAT_R8_SSCALED = 12
    FORMAT_R8_UINT = 13
    FORMAT_R8_SINT = 14
    FORMAT_R8_SRGB = 15
    FORMAT_R8G8_UNORM = 16
    FORMAT_R8G8_SNORM = 17
    FORMAT_R8G8_USCALED = 18
    FORMAT_R8G8_SSCALED = 19
    FORMAT_R8G8_UINT = 20
    FORMAT_R8G8_SINT = 21
    FORMAT_R8G8_SRGB = 22
    FORMAT_R8G8B8_UNORM = 23
    FORMAT_R8G8B8_SNORM = 24
    FORMAT_R8G8B8_USCALED = 25
    FORMAT_R8G8B8_SSCALED = 26
    FORMAT_R8G8B8_UINT = 27
    FORMAT_R8G8B8_SINT = 28
    FORMAT_R8G8B8_SRGB = 29
    FORMAT_B8G8R8_UNORM = 30
    FORMAT_B8G8R8_SNORM = 31
    FORMAT_B8G8R8_USCALED = 32
    FORMAT_B8G8R8_SSCALED = 33
    FORMAT_B8G8R8_UINT = 34
    FORMAT_B8G8R8_SINT = 35
    FORMAT_B8G8R8_SRGB = 36
    FORMAT_R8G8B8A8_UNORM = 37
    FORMAT_R8G8B8A8_SNORM = 38
    FORMAT_R8G8B8A8_USCALED = 39
    FORMAT_R8G8B8A8_SSCALED = 40
    FORMAT_R8G8B8A8_UINT = 41
    FORMAT_R8G8B8A8_SINT = 42
    FORMAT_R8G8B8A8_SRGB = 43
    FORMAT_B8G8R8A8_UNORM = 44
    FORMAT_B8G8R8A8_SNORM = 45
    FORMAT_B8G8R8A8_USCALED = 46
    FORMAT_B8G8R8A8_SSCALED = 47
    FORMAT_B8G8R8A8_UINT = 48
    FORMAT_B8G8R8A8_SINT = 49
    FORMAT_B8G8R8A8_SRGB = 50
    FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    FORMAT_A8B8G8R8_UINT_PACK32 = 55
    FORMAT_A8B8G8R8_SINT_PACK32 = 56
    FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    FORMAT_A2R10G10B10_UINT_PACK32 = 62
    FORMAT_A2R10G10B10_SINT_PACK32 = 63
    FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    FORMAT_A2B10G10R10_UINT_PACK32 = 68
    FORMAT_A2B10G10R10_SINT_PACK32 = 69
    FORMAT_R16_UNORM = 70
    FORMAT_R16_SNORM = 71
    FORMAT_R16_USCALED = 72
    FORMAT_R16_SSCALED = 73
    FORMAT_R16_UINT = 74
    FORMAT_R16_SINT = 75
    FORMAT_R16_SFLOAT = 76
    FORMAT_R16G16_UNORM = 77
    FORMAT_R16G16_SNORM = 78
    FORMAT_R16G16_USCALED = 79
    FORMAT_R16G16_SSCALED = 80
    FORMAT_R16G16_UINT = 81
    FORMAT_R16G16_SINT = 82
    FORMAT_R16G16_SFLOAT = 83
    FORMAT_R16G16B16_UNORM = 84
    FORMAT_R16G16B16_SNORM = 85
    FORMAT_R16G16B16_USCALED = 86
    FORMAT_R16G16B16_SSCALED = 87
    FORMAT_R16G16B16_UINT = 88
    FORMAT_R16G16B16_SINT = 89
    FORMAT_R16G16B16_SFLOAT = 90
    FORMAT_R16G16B16A16_UNORM = 91
    FORMAT_R16G16B16A16_SNORM = 92
    FORMAT_R16G16B16A16_USCALED = 93
    FORMAT_R16G16B16A16_SSCALED = 94
    FORMAT_R16G16B16A16_UINT = 95
    FORMAT_R16G16B16A16_SINT = 96
    FORMAT_R16G16B16A16_SFLOAT = 97
    FORMAT_R32_UINT = 98
    FORMAT_R32_SINT = 99
    FORMAT_R32_SFLOAT = 100
    FORMAT_R32G32_UINT = 101
    FORMAT_R32G32_SINT = 102
    FORMAT_R32G32_SFLOAT = 103
    FORMAT_R32G32B32_UINT = 104
    FORMAT_R32G32B32_SINT = 105
    FORMAT_R32G32B32_SFLOAT = 106
    FORMAT_R32G32B32A32_UINT = 107
    FORMAT_R32G32B32A32_SINT = 108
    FORMAT_R32G32B32A32_SFLOAT = 109
    FORMAT_R64_UINT = 110
    FORMAT_R64_SINT = 111
    FORMAT_R64_SFLOAT = 112
    FORMAT_R64G64_UINT = 113
    FORMAT_R64G64_SINT = 114
    FORMAT_R64G64_SFLOAT = 115
    FORMAT_R64G64B64_UINT = 116
    FORMAT_R64G64B64_SINT = 117
    FORMAT_R64G64B64_SFLOAT = 118
    FORMAT_R64G64B64A64_UINT = 119
    FORMAT_R64G64B64A64_SINT = 120
    FORMAT_R64G64B64A64_SFLOAT = 121
    FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    FORMAT_D16_UNORM = 124
    FORMAT_X8_D24_UNORM_PACK32 = 125
    FORMAT_D32_SFLOAT = 126
    FORMAT_S8_UINT = 127
    FORMAT_D16_UNORM_S8_UINT = 128
    FORMAT_D24_UNORM_S8_UINT = 129
    FORMAT_D32_SFLOAT_S8_UINT = 130
    FORMAT_BC1_RGB_UNORM_BLOCK = 131
    FORMAT_BC1_RGB_SRGB_BLOCK = 132
    FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    FORMAT_BC2_UNORM_BLOCK = 135
    FORMAT_BC2_SRGB_BLOCK = 136
    FORMAT_BC3_UNORM_BLOCK = 137
    FORMAT_BC3_SRGB_BLOCK = 138
    FORMAT_BC4_UNORM_BLOCK = 139
    FORMAT_BC4_SNORM_BLOCK = 140
    FORMAT_BC5_UNORM_BLOCK = 141
    FORMAT_BC5_SNORM_BLOCK = 142
    FORMAT_BC6H_UFLOAT_BLOCK = 143
    FORMAT_BC6H_SFLOAT_BLOCK = 144
    FORMAT_BC7_UNORM_BLOCK = 145
    FORMAT_BC7_SRGB_BLOCK = 146
    FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    FORMAT_EAC_R11_UNORM_BLOCK = 153
    FORMAT_EAC_R11_SNORM_BLOCK = 154
    FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    FORMAT_ASTC_12x12_SRGB_BLOCK = 184
    FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
    FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
    FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
    FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
    FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
    FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
    FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
    FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
    FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
    FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
    FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
    FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
    FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
    FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
    FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
    FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
    FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
    FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
    FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
    FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
    FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
    FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
    FORMAT_G8B8G8R8_422_UNORM = 1000156000
    FORMAT_B8G8R8G8_422_UNORM = 1000156001
    FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
    FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
    FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
    FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
    FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
    FORMAT_R10X6_UNORM_PACK16 = 1000156007
    FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
    FORMAT_R12X4_UNORM_PACK16 = 1000156017
    FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
    FORMAT_G16B16G16R16_422_UNORM = 1000156027
    FORMAT_B16G16R16G16_422_UNORM = 1000156028
    FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
    FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
    FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
    FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
    FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
    FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
    FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
  FormatFeatureFlagBits* {.size: 4.} = enum
    FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
    FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
    FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
    FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
    FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
    FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
    FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
    FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
    FORMAT_FEATURE_BLIT_SRC_BIT = 1024
    FORMAT_FEATURE_BLIT_DST_BIT = 2048
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
    FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
    FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
    FORMAT_FEATURE_DISJOINT_BIT = 4194304
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
    FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
    FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
  FormatFeatureFlag* {.size: 4.} = enum
    FORMAT_FEATURE_SAMPLED_IMAGE = 0
    FORMAT_FEATURE_STORAGE_IMAGE = 1
    FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC = 2
    FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER = 3
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER = 4
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC = 5
    FORMAT_FEATURE_VERTEX_BUFFER = 6
    FORMAT_FEATURE_COLOR_ATTACHMENT = 7
    FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND = 8
    FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT = 9
    FORMAT_FEATURE_BLIT_SRC = 10
    FORMAT_FEATURE_BLIT_DST = 11
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR = 12
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_IMG = 13
    FORMAT_FEATURE_TRANSFER_SRC = 14
    FORMAT_FEATURE_TRANSFER_DST = 15
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX = 16
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES = 17
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER = 18
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER = 19
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT = 20
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE = 21
    FORMAT_FEATURE_DISJOINT = 22
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES = 23
    FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_EXT = 24
    FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR = 29
  FrontFace* {.size: 4.} = enum
    FRONT_FACE_COUNTER_CLOCKWISE = 0
    FRONT_FACE_CLOCKWISE = 1
  ImageAspectFlagBits* {.size: 4.} = enum
    IMAGE_ASPECT_COLOR_BIT = 1
    IMAGE_ASPECT_DEPTH_BIT = 2
    IMAGE_ASPECT_STENCIL_BIT = 4
    IMAGE_ASPECT_METADATA_BIT = 8
    IMAGE_ASPECT_PLANE_0_BIT = 16
    IMAGE_ASPECT_PLANE_1_BIT = 32
    IMAGE_ASPECT_PLANE_2_BIT = 64
    IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
    IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
    IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
    IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
  ImageAspectFlag* {.size: 4.} = enum
    IMAGE_ASPECT_COLOR = 0
    IMAGE_ASPECT_DEPTH = 1
    IMAGE_ASPECT_STENCIL = 2
    IMAGE_ASPECT_METADATA = 3
    IMAGE_ASPECT_PLANE_0 = 4
    IMAGE_ASPECT_PLANE_1 = 5
    IMAGE_ASPECT_PLANE_2 = 6
    IMAGE_ASPECT_MEMORY_PLANE_0_EXT = 7
    IMAGE_ASPECT_MEMORY_PLANE_1_EXT = 8
    IMAGE_ASPECT_MEMORY_PLANE_2_EXT = 9
    IMAGE_ASPECT_MEMORY_PLANE_3_EXT = 10
  ImageCreateFlagBits* {.size: 4.} = enum
    IMAGE_CREATE_SPARSE_BINDING_BIT = 1
    IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
    IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
    IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
    IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
    IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
    IMAGE_CREATE_DISJOINT_BIT = 512
    IMAGE_CREATE_ALIAS_BIT = 1024
    IMAGE_CREATE_PROTECTED_BIT = 2048
    IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
    IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
    IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
  ImageCreateFlag* {.size: 4.} = enum
    IMAGE_CREATE_SPARSE_BINDING = 0
    IMAGE_CREATE_SPARSE_RESIDENCY = 1
    IMAGE_CREATE_SPARSE_ALIASED = 2
    IMAGE_CREATE_MUTABLE_FORMAT = 3
    IMAGE_CREATE_CUBE_COMPATIBLE = 4
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE = 5
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS = 6
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE = 7
    IMAGE_CREATE_EXTENDED_USAGE = 8
    IMAGE_CREATE_DISJOINT = 9
    IMAGE_CREATE_ALIAS = 10
    IMAGE_CREATE_PROTECTED = 11
    IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT = 12
    IMAGE_CREATE_CORNER_SAMPLED_NV = 13
    IMAGE_CREATE_SUBSAMPLED_EXT = 14
  ImageLayout* {.size: 4.} = enum
    IMAGE_LAYOUT_UNDEFINED = 0
    IMAGE_LAYOUT_GENERAL = 1
    IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
    IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
    IMAGE_LAYOUT_PREINITIALIZED = 8
    IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
    IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
    IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
    IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
  ImageTiling* {.size: 4.} = enum
    IMAGE_TILING_OPTIMAL = 0
    IMAGE_TILING_LINEAR = 1
    IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
  ImageType* {.size: 4.} = enum
    IMAGE_TYPE_1D = 0
    IMAGE_TYPE_2D = 1
    IMAGE_TYPE_3D = 2
  ImageUsageFlagBits* {.size: 4.} = enum
    IMAGE_USAGE_TRANSFER_SRC_BIT = 1
    IMAGE_USAGE_TRANSFER_DST_BIT = 2
    IMAGE_USAGE_SAMPLED_BIT = 4
    IMAGE_USAGE_STORAGE_BIT = 8
    IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
    IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
  ImageUsageFlag* {.size: 4.} = enum
    IMAGE_USAGE_TRANSFER_SRC = 0
    IMAGE_USAGE_TRANSFER_DST = 1
    IMAGE_USAGE_SAMPLED = 2
    IMAGE_USAGE_STORAGE = 3
    IMAGE_USAGE_COLOR_ATTACHMENT = 4
    IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT = 5
    IMAGE_USAGE_TRANSIENT_ATTACHMENT = 6
    IMAGE_USAGE_INPUT_ATTACHMENT = 7
    IMAGE_USAGE_SHADING_RATE_IMAGE_NV = 8
    IMAGE_USAGE_FRAGMENT_DENSITY_MAP_EXT = 9
  ImageViewCreateFlagBits* {.size: 4.} = enum
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
  ImageViewCreateFlag* {.size: 4.} = enum
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_EXT = 0
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_EXT = 1
  ImageViewType* {.size: 4.} = enum
    IMAGE_VIEW_TYPE_1D = 0
    IMAGE_VIEW_TYPE_2D = 1
    IMAGE_VIEW_TYPE_3D = 2
    IMAGE_VIEW_TYPE_CUBE = 3
    IMAGE_VIEW_TYPE_1D_ARRAY = 4
    IMAGE_VIEW_TYPE_2D_ARRAY = 5
    IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
  SharingMode* {.size: 4.} = enum
    SHARING_MODE_EXCLUSIVE = 0
    SHARING_MODE_CONCURRENT = 1
  IndexType* {.size: 4.} = enum
    INDEX_TYPE_UINT16 = 0
    INDEX_TYPE_UINT32 = 1
    INDEX_TYPE_NONE_KHR = 1000165000
    INDEX_TYPE_UINT8_EXT = 1000265000
  LogicOp* {.size: 4.} = enum
    LOGIC_OP_CLEAR = 0
    LOGIC_OP_AND = 1
    LOGIC_OP_AND_REVERSE = 2
    LOGIC_OP_COPY = 3
    LOGIC_OP_AND_INVERTED = 4
    LOGIC_OP_NO_OP = 5
    LOGIC_OP_XOR = 6
    LOGIC_OP_OR = 7
    LOGIC_OP_NOR = 8
    LOGIC_OP_EQUIVALENT = 9
    LOGIC_OP_INVERT = 10
    LOGIC_OP_OR_REVERSE = 11
    LOGIC_OP_COPY_INVERTED = 12
    LOGIC_OP_OR_INVERTED = 13
    LOGIC_OP_NAND = 14
    LOGIC_OP_SET = 15
  MemoryHeapFlagBits* {.size: 4.} = enum
    MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
    MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
  MemoryHeapFlag* {.size: 4.} = enum
    MEMORY_HEAP_DEVICE_LOCAL = 0
    MEMORY_HEAP_MULTI_INSTANCE = 1
  AccessFlagBits* {.size: 4.} = enum
    ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    ACCESS_INDEX_READ_BIT = 2
    ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    ACCESS_UNIFORM_READ_BIT = 8
    ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
    ACCESS_SHADER_READ_BIT = 32
    ACCESS_SHADER_WRITE_BIT = 64
    ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    ACCESS_TRANSFER_READ_BIT = 2048
    ACCESS_TRANSFER_WRITE_BIT = 4096
    ACCESS_HOST_READ_BIT = 8192
    ACCESS_HOST_WRITE_BIT = 16384
    ACCESS_MEMORY_READ_BIT = 32768
    ACCESS_MEMORY_WRITE_BIT = 65536
    ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
    ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
    ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
    ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
    ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
  AccessFlag* {.size: 4.} = enum
    ACCESS_INDIRECT_COMMAND_READ = 0
    ACCESS_INDEX_READ = 1
    ACCESS_VERTEX_ATTRIBUTE_READ = 2
    ACCESS_UNIFORM_READ = 3
    ACCESS_INPUT_ATTACHMENT_READ = 4
    ACCESS_SHADER_READ = 5
    ACCESS_SHADER_WRITE = 6
    ACCESS_COLOR_ATTACHMENT_READ = 7
    ACCESS_COLOR_ATTACHMENT_WRITE = 8
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ = 9
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE = 10
    ACCESS_TRANSFER_READ = 11
    ACCESS_TRANSFER_WRITE = 12
    ACCESS_HOST_READ = 13
    ACCESS_HOST_WRITE = 14
    ACCESS_MEMORY_READ = 15
    ACCESS_MEMORY_WRITE = 16
    ACCESS_COMMAND_PREPROCESS_READ_NV = 17
    ACCESS_COMMAND_PREPROCESS_WRITE_NV = 18
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_EXT = 19
    ACCESS_CONDITIONAL_RENDERING_READ_EXT = 20
    ACCESS_ACCELERATION_STRUCTURE_READ_KHR = 21
    ACCESS_ACCELERATION_STRUCTURE_WRITE_KHR = 22
    ACCESS_SHADING_RATE_IMAGE_READ_NV = 23
    ACCESS_FRAGMENT_DENSITY_MAP_READ_EXT = 24
    ACCESS_TRANSFORM_FEEDBACK_WRITE_EXT = 25
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_EXT = 26
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT = 27
  MemoryPropertyFlagBits* {.size: 4.} = enum
    MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    MEMORY_PROPERTY_PROTECTED_BIT = 32
    MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
  MemoryPropertyFlag* {.size: 4.} = enum
    MEMORY_PROPERTY_DEVICE_LOCAL = 0
    MEMORY_PROPERTY_HOST_VISIBLE = 1
    MEMORY_PROPERTY_HOST_COHERENT = 2
    MEMORY_PROPERTY_HOST_CACHED = 3
    MEMORY_PROPERTY_LAZILY_ALLOCATED = 4
    MEMORY_PROPERTY_PROTECTED = 5
    MEMORY_PROPERTY_DEVICE_COHERENT_AMD = 6
    MEMORY_PROPERTY_DEVICE_UNCACHED_AMD = 7
  PhysicalDeviceType* {.size: 4.} = enum
    PHYSICAL_DEVICE_TYPE_OTHER = 0
    PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    PHYSICAL_DEVICE_TYPE_CPU = 4
  PipelineBindPoint* {.size: 4.} = enum
    PIPELINE_BIND_POINT_GRAPHICS = 0
    PIPELINE_BIND_POINT_COMPUTE = 1
    PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
  PipelineCreateFlagBits* {.size: 4.} = enum
    PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
    PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
    PIPELINE_CREATE_DERIVATIVE_BIT = 4
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
    PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
    PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
    PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
    PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
    PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
    PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
    PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
    PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
    PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
    PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
  PipelineCreateFlag* {.size: 4.} = enum
    PIPELINE_CREATE_DISABLE_OPTIMIZATION = 0
    PIPELINE_CREATE_ALLOW_DERIVATIVES = 1
    PIPELINE_CREATE_DERIVATIVE = 2
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX = 3
    PIPELINE_CREATE_DISPATCH_BASE = 4
    PIPELINE_CREATE_DEFER_COMPILE_NV = 5
    PIPELINE_CREATE_CAPTURE_STATISTICS_KHR = 6
    PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_KHR = 7
    PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_EXT = 8
    PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_EXT = 9
    PIPELINE_CREATE_LIBRARY_KHR = 11
    PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_KHR = 12
    PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_KHR = 13
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_KHR = 14
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_KHR = 15
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_KHR = 16
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_KHR = 17
    PIPELINE_CREATE_INDIRECT_BINDABLE_NV = 18
  PrimitiveTopology* {.size: 4.} = enum
    PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
  QueryControlFlagBits* {.size: 4.} = enum
    QUERY_CONTROL_PRECISE_BIT = 1
  QueryControlFlag* {.size: 4.} = enum
    QUERY_CONTROL_PRECISE = 0
  QueryPipelineStatisticFlagBits* {.size: 4.} = enum
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
    QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
    QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
    QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
    QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
    QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
    QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
    QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
  QueryPipelineStatisticFlag* {.size: 4.} = enum
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES = 0
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES = 1
    QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS = 2
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS = 3
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES = 4
    QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS = 5
    QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES = 6
    QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS = 7
    QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES = 8
    QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS = 9
    QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS = 10
  QueryResultFlagBits* {.size: 4.} = enum
    QUERY_RESULT_64_BIT = 1
    QUERY_RESULT_WAIT_BIT = 2
    QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
    QUERY_RESULT_PARTIAL_BIT = 8
  QueryResultFlag* {.size: 4.} = enum
    QUERY_RESULT_64 = 0
    QUERY_RESULT_WAIT = 1
    QUERY_RESULT_WITH_AVAILABILITY = 2
    QUERY_RESULT_PARTIAL = 3
  QueryType* {.size: 4.} = enum
    QUERY_TYPE_OCCLUSION = 0
    QUERY_TYPE_PIPELINE_STATISTICS = 1
    QUERY_TYPE_TIMESTAMP = 2
    QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
    QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
    QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000
    QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
  QueueFlagBits* {.size: 4.} = enum
    QUEUE_GRAPHICS_BIT = 1
    QUEUE_COMPUTE_BIT = 2
    QUEUE_TRANSFER_BIT = 4
    QUEUE_SPARSE_BINDING_BIT = 8
    QUEUE_PROTECTED_BIT = 16
  QueueFlag* {.size: 4.} = enum
    QUEUE_GRAPHICS = 0
    QUEUE_COMPUTE = 1
    QUEUE_TRANSFER = 2
    QUEUE_SPARSE_BINDING = 3
    QUEUE_PROTECTED = 4
  SubpassContents* {.size: 4.} = enum
    SUBPASS_CONTENTS_INLINE = 0
    SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
  Result* {.size: 4.} = enum
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
    ERROR_NOT_PERMITTED_EXT = -1000174001
    ERROR_FRAGMENTATION = -1000161000
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
    ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000
    ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
    ERROR_OUT_OF_POOL_MEMORY = -1000069000
    ERROR_INVALID_SHADER_NV = -1000012000
    ERROR_VALIDATION_FAILED_EXT = -1000011001
    ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
    ERROR_OUT_OF_DATE_KHR = -1000001004
    ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
    ERROR_SURFACE_LOST_KHR = -1000000000
    ERROR_UNKNOWN = -13
    ERROR_FRAGMENTED_POOL = -12
    ERROR_FORMAT_NOT_SUPPORTED = -11
    ERROR_TOO_MANY_OBJECTS = -10
    ERROR_INCOMPATIBLE_DRIVER = -9
    ERROR_FEATURE_NOT_PRESENT = -8
    ERROR_EXTENSION_NOT_PRESENT = -7
    ERROR_LAYER_NOT_PRESENT = -6
    ERROR_MEMORY_MAP_FAILED = -5
    ERROR_DEVICE_LOST = -4
    ERROR_INITIALIZATION_FAILED = -3
    ERROR_OUT_OF_DEVICE_MEMORY = -2
    ERROR_OUT_OF_HOST_MEMORY = -1
    SUCCESS = 0
    NOT_READY = 1
    TIMEOUT = 2
    EVENT_SET = 3
    EVENT_RESET = 4
    INCOMPLETE = 5
    SUBOPTIMAL_KHR = 1000001003
    THREAD_IDLE_KHR = 1000268000
    THREAD_DONE_KHR = 1000268001
    OPERATION_DEFERRED_KHR = 1000268002
    OPERATION_NOT_DEFERRED_KHR = 1000268003
    PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
  ShaderStageFlagBits* {.size: 4.} = enum
    SHADER_STAGE_VERTEX_BIT = 1
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    SHADER_STAGE_GEOMETRY_BIT = 8
    SHADER_STAGE_FRAGMENT_BIT = 16
    SHADER_STAGE_COMPUTE_BIT = 32
    SHADER_STAGE_TASK_BIT_NV = 64
    SHADER_STAGE_MESH_BIT_NV = 128
    SHADER_STAGE_RAYGEN_BIT_KHR = 256
    SHADER_STAGE_ANY_HIT_BIT_KHR = 512
    SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
    SHADER_STAGE_MISS_BIT_KHR = 2048
    SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
    SHADER_STAGE_CALLABLE_BIT_KHR = 8192
  ShaderStageFlag* {.size: 4.} = enum
    SHADER_STAGE_VERTEX = 0
    SHADER_STAGE_TESSELLATION_CONTROL = 1
    SHADER_STAGE_TESSELLATION_EVALUATION = 2
    SHADER_STAGE_GEOMETRY = 3
    SHADER_STAGE_FRAGMENT = 4
    SHADER_STAGE_COMPUTE = 5
    SHADER_STAGE_TASK_NV = 6
    SHADER_STAGE_MESH_NV = 7
    SHADER_STAGE_RAYGEN_KHR = 8
    SHADER_STAGE_ANY_HIT_KHR = 9
    SHADER_STAGE_CLOSEST_HIT_KHR = 10
    SHADER_STAGE_MISS_KHR = 11
    SHADER_STAGE_INTERSECTION_KHR = 12
    SHADER_STAGE_CALLABLE_KHR = 13
  SparseMemoryBindFlagBits* {.size: 4.} = enum
    SPARSE_MEMORY_BIND_METADATA_BIT = 1
  SparseMemoryBindFlag* {.size: 4.} = enum
    SPARSE_MEMORY_BIND_METADATA = 0
  StencilFaceFlagBits* {.size: 4.} = enum
    STENCIL_FACE_FRONT_BIT = 1
    STENCIL_FACE_BACK_BIT = 2
  StencilFaceFlag* {.size: 4.} = enum
    STENCIL_FACE_FRONT = 0
    STENCIL_FACE_BACK = 1
  StencilOp* {.size: 4.} = enum
    STENCIL_OP_KEEP = 0
    STENCIL_OP_ZERO = 1
    STENCIL_OP_REPLACE = 2
    STENCIL_OP_INCREMENT_AND_CLAMP = 3
    STENCIL_OP_DECREMENT_AND_CLAMP = 4
    STENCIL_OP_INVERT = 5
    STENCIL_OP_INCREMENT_AND_WRAP = 6
    STENCIL_OP_DECREMENT_AND_WRAP = 7
  StructureType* {.size: 4.} = enum
    STRUCTURE_TYPE_APPLICATION_INFO = 0
    STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
    STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
    STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
    STRUCTURE_TYPE_SUBMIT_INFO = 4
    STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
    STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
    STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
    STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
    STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
    STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
    STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
    STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
    STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
    STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
    STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
    STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
    STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
    STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
    STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
    STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
    STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
    STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
    STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
    STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
    STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
    STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
    STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
    STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
    STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
    STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
    STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
    STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
    STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
    STRUCTURE_TYPE_MEMORY_BARRIER = 46
    STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
    STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
    STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
    STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
    STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
    STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
    STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
    STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
    STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
    STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
    STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
    STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
    STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
    STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
    STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
    STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
    STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
    STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
    STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
    STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
    STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
    STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
    STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
    STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
    STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
    STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
    STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
    STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
    STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
    STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
    STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
    STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
    STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
    STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
    STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
    STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
    STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
    STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
    STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
    STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
    STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
    STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
    STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
    STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
    STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
    STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
    STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
    STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
    STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
    STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
    STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
    STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
    STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
    STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
    STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
    STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
    STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
    STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
    STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
    STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
    STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
    STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
    STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
    STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
    STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
    STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
    STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
    STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
    STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
    STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
    STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
    STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
    STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
    STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
    STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
    STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
    STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
    STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
    STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
    STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
    STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
    STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
    STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
    STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
    STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
    STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
    STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
    STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
    STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
    STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
    STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
    STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
    STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
    STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
    STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
    STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
    STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
    STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
    STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
    STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
    STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
    STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
    STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
    STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
    STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
    STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
    STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
    STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
    STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
    STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
    STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
    STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
    STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
    STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
    STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
    STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
    STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
    STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
    STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
    STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
    STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
    STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
    STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
    STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
    STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
    STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
    STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
    STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
    STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
    STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
    STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
  SystemAllocationScope* {.size: 4.} = enum
    SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
    SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
    SYSTEM_ALLOCATION_SCOPE_CACHE = 2
    SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
    SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
  InternalAllocationType* {.size: 4.} = enum
    INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
  SamplerAddressMode* {.size: 4.} = enum
    SAMPLER_ADDRESS_MODE_REPEAT = 0
    SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
  Filter* {.size: 4.} = enum
    FILTER_NEAREST = 0
    FILTER_LINEAR = 1
    FILTER_CUBIC_IMG = 1000015000
  SamplerMipmapMode* {.size: 4.} = enum
    SAMPLER_MIPMAP_MODE_NEAREST = 0
    SAMPLER_MIPMAP_MODE_LINEAR = 1
  VertexInputRate* {.size: 4.} = enum
    VERTEX_INPUT_RATE_VERTEX = 0
    VERTEX_INPUT_RATE_INSTANCE = 1
  PipelineStageFlagBits* {.size: 4.} = enum
    PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    PIPELINE_STAGE_TRANSFER_BIT = 4096
    PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    PIPELINE_STAGE_HOST_BIT = 16384
    PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
    PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
    PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
    PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
    PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
    PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
  PipelineStageFlag* {.size: 4.} = enum
    PIPELINE_STAGE_TOP_OF_PIPE = 0
    PIPELINE_STAGE_DRAW_INDIRECT = 1
    PIPELINE_STAGE_VERTEX_INPUT = 2
    PIPELINE_STAGE_VERTEX_SHADER = 3
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER = 4
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER = 5
    PIPELINE_STAGE_GEOMETRY_SHADER = 6
    PIPELINE_STAGE_FRAGMENT_SHADER = 7
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS = 8
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS = 9
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT = 10
    PIPELINE_STAGE_COMPUTE_SHADER = 11
    PIPELINE_STAGE_TRANSFER = 12
    PIPELINE_STAGE_BOTTOM_OF_PIPE = 13
    PIPELINE_STAGE_HOST = 14
    PIPELINE_STAGE_ALL_GRAPHICS = 15
    PIPELINE_STAGE_ALL_COMMANDS = 16
    PIPELINE_STAGE_COMMAND_PREPROCESS_NV = 17
    PIPELINE_STAGE_CONDITIONAL_RENDERING_EXT = 18
    PIPELINE_STAGE_TASK_SHADER_NV = 19
    PIPELINE_STAGE_MESH_SHADER_NV = 20
    PIPELINE_STAGE_RAY_TRACING_SHADER_KHR = 21
    PIPELINE_STAGE_SHADING_RATE_IMAGE_NV = 22
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_EXT = 23
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_EXT = 24
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_KHR = 25
  SparseImageFormatFlagBits* {.size: 4.} = enum
    SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
    SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
    SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
  SparseImageFormatFlag* {.size: 4.} = enum
    SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL = 0
    SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE = 1
    SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE = 2
  SampleCountFlagBits* {.size: 4.} = enum
    SAMPLE_COUNT_1_BIT = 1
    SAMPLE_COUNT_2_BIT = 2
    SAMPLE_COUNT_4_BIT = 4
    SAMPLE_COUNT_8_BIT = 8
    SAMPLE_COUNT_16_BIT = 16
    SAMPLE_COUNT_32_BIT = 32
    SAMPLE_COUNT_64_BIT = 64
  SampleCountFlag* {.size: 4.} = enum
    SAMPLE_COUNT_1 = 0
    SAMPLE_COUNT_2 = 1
    SAMPLE_COUNT_4 = 2
    SAMPLE_COUNT_8 = 3
    SAMPLE_COUNT_16 = 4
    SAMPLE_COUNT_32 = 5
    SAMPLE_COUNT_64 = 6
  AttachmentDescriptionFlagBits* {.size: 4.} = enum
    ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
  AttachmentDescriptionFlag* {.size: 4.} = enum
    ATTACHMENT_DESCRIPTION_MAY_ALIAS = 0
  DescriptorPoolCreateFlagBits* {.size: 4.} = enum
    DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
  DescriptorPoolCreateFlag* {.size: 4.} = enum
    DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET = 0
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND = 1
  DependencyFlagBits* {.size: 4.} = enum
    DEPENDENCY_BY_REGION_BIT = 1
    DEPENDENCY_VIEW_LOCAL_BIT = 2
    DEPENDENCY_DEVICE_GROUP_BIT = 4
  DependencyFlag* {.size: 4.} = enum
    DEPENDENCY_BY_REGION = 0
    DEPENDENCY_VIEW_LOCAL = 1
    DEPENDENCY_DEVICE_GROUP = 2
  ObjectType* {.size: 4.} = enum
    OBJECT_TYPE_UNKNOWN = 0
    OBJECT_TYPE_INSTANCE = 1
    OBJECT_TYPE_PHYSICAL_DEVICE = 2
    OBJECT_TYPE_DEVICE = 3
    OBJECT_TYPE_QUEUE = 4
    OBJECT_TYPE_SEMAPHORE = 5
    OBJECT_TYPE_COMMAND_BUFFER = 6
    OBJECT_TYPE_FENCE = 7
    OBJECT_TYPE_DEVICE_MEMORY = 8
    OBJECT_TYPE_BUFFER = 9
    OBJECT_TYPE_IMAGE = 10
    OBJECT_TYPE_EVENT = 11
    OBJECT_TYPE_QUERY_POOL = 12
    OBJECT_TYPE_BUFFER_VIEW = 13
    OBJECT_TYPE_IMAGE_VIEW = 14
    OBJECT_TYPE_SHADER_MODULE = 15
    OBJECT_TYPE_PIPELINE_CACHE = 16
    OBJECT_TYPE_PIPELINE_LAYOUT = 17
    OBJECT_TYPE_RENDER_PASS = 18
    OBJECT_TYPE_PIPELINE = 19
    OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
    OBJECT_TYPE_SAMPLER = 21
    OBJECT_TYPE_DESCRIPTOR_POOL = 22
    OBJECT_TYPE_DESCRIPTOR_SET = 23
    OBJECT_TYPE_FRAMEBUFFER = 24
    OBJECT_TYPE_COMMAND_POOL = 25
    OBJECT_TYPE_SURFACE_KHR = 1000000000
    OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
    OBJECT_TYPE_DISPLAY_KHR = 1000002000
    OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
    OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
    OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
    OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
    OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000
    OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
    OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
    OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
    OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
  IndirectCommandsLayoutUsageFlagBitsNV* {.size: 4.} = enum
    INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
    INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
    INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
  IndirectCommandsLayoutUsageFlagNV* {.size: 4.} = enum
    INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_NV = 0
    INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_NV = 1
    INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_NV = 2
  IndirectCommandsTokenTypeNV* {.size: 4.} = enum
    INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
    INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
    INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
    INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
    INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
  IndirectStateFlagBitsNV* {.size: 4.} = enum
    INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
  IndirectStateFlagNV* {.size: 4.} = enum
    INDIRECT_STATE_FLAG_FRONTFACE_NV = 0
  PrivateDataSlotCreateFlagBitsEXT* = enum
    PrivateDataSlotCreateFlagBitsEXTReserved
  DescriptorUpdateTemplateType* {.size: 4.} = enum
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
  DescriptorUpdateTemplateTypeKHR* = enum
    DescriptorUpdateTemplateTypeKHRReserved
  ViewportCoordinateSwizzleNV* {.size: 4.} = enum
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
  DiscardRectangleModeEXT* {.size: 4.} = enum
    DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
    DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
  SubpassDescriptionFlagBits* {.size: 4.} = enum
    SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
    SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
    SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
    SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
  SubpassDescriptionFlag* {.size: 4.} = enum
    SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_NVX = 0
    SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_NVX = 1
    SUBPASS_DESCRIPTION_FRAGMENT_REGION_QCOM = 2
    SUBPASS_DESCRIPTION_SHADER_RESOLVE_QCOM = 3
  PointClippingBehavior* {.size: 4.} = enum
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
  PointClippingBehaviorKHR* = enum
    PointClippingBehaviorKHRReserved
  CoverageModulationModeNV* {.size: 4.} = enum
    COVERAGE_MODULATION_MODE_NONE_NV = 0
    COVERAGE_MODULATION_MODE_RGB_NV = 1
    COVERAGE_MODULATION_MODE_ALPHA_NV = 2
    COVERAGE_MODULATION_MODE_RGBA_NV = 3
  CoverageReductionModeNV* {.size: 4.} = enum
    COVERAGE_REDUCTION_MODE_MERGE_NV = 0
    COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
  ValidationCacheHeaderVersionEXT* {.size: 4.} = enum
    VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
  ShaderInfoTypeAMD* {.size: 4.} = enum
    SHADER_INFO_TYPE_STATISTICS_AMD = 0
    SHADER_INFO_TYPE_BINARY_AMD = 1
    SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
  QueueGlobalPriorityEXT* {.size: 4.} = enum
    QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
    QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
    QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
    QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
  TimeDomainEXT* {.size: 4.} = enum
    TIME_DOMAIN_DEVICE_EXT = 0
    TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
    TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
    TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
  ConservativeRasterizationModeEXT* {.size: 4.} = enum
    CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
    CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
    CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
  ResolveModeFlagBits* {.size: 4.} = enum
    RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
    RESOLVE_MODE_AVERAGE_BIT = 2
    RESOLVE_MODE_MIN_BIT = 4
    RESOLVE_MODE_MAX_BIT = 8
  ResolveModeFlag* {.size: 4.} = enum
    RESOLVE_MODE_SAMPLE_ZERO = 0
    RESOLVE_MODE_AVERAGE = 1
    RESOLVE_MODE_MIN = 2
    RESOLVE_MODE_MAX = 3
  ResolveModeFlagBitsKHR* = enum
    ResolveModeFlagBitsKHRReserved
  DescriptorBindingFlagBits* {.size: 4.} = enum
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
  DescriptorBindingFlag* {.size: 4.} = enum
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND = 0
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING = 1
    DESCRIPTOR_BINDING_PARTIALLY_BOUND = 2
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT = 3
  DescriptorBindingFlagBitsEXT* = enum
    DescriptorBindingFlagBitsEXTReserved
  ConditionalRenderingFlagBitsEXT* {.size: 4.} = enum
    CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
  ConditionalRenderingFlagEXT* {.size: 4.} = enum
    CONDITIONAL_RENDERING_INVERTED_EXT = 0
  SemaphoreType* {.size: 4.} = enum
    SEMAPHORE_TYPE_BINARY = 0
    SEMAPHORE_TYPE_TIMELINE = 1
  SemaphoreTypeKHR* = enum
    SemaphoreTypeKHRReserved
  GeometryFlagBitsKHR* {.size: 4.} = enum
    GEOMETRY_OPAQUE_BIT_KHR = 1
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
  GeometryFlagKHR* {.size: 4.} = enum
    GEOMETRY_OPAQUE_KHR = 0
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_KHR = 1
  GeometryFlagBitsNV* = enum
    GeometryFlagBitsNVReserved
  GeometryInstanceFlagBitsKHR* {.size: 4.} = enum
    GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
  GeometryInstanceFlagKHR* {.size: 4.} = enum
    GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_KHR = 0
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_KHR = 1
    GEOMETRY_INSTANCE_FORCE_OPAQUE_KHR = 2
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_KHR = 3
  GeometryInstanceFlagBitsNV* = enum
    GeometryInstanceFlagBitsNVReserved
  BuildAccelerationStructureFlagBitsKHR* {.size: 4.} = enum
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
  BuildAccelerationStructureFlagKHR* {.size: 4.} = enum
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_KHR = 0
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_KHR = 1
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_KHR = 2
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_KHR = 3
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_KHR = 4
  BuildAccelerationStructureFlagBitsNV* = enum
    BuildAccelerationStructureFlagBitsNVReserved
  CopyAccelerationStructureModeKHR* {.size: 4.} = enum
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
    COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
    COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
  CopyAccelerationStructureModeNV* = enum
    CopyAccelerationStructureModeNVReserved
  AccelerationStructureTypeKHR* {.size: 4.} = enum
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
  AccelerationStructureTypeNV* = enum
    AccelerationStructureTypeNVReserved
  GeometryTypeKHR* {.size: 4.} = enum
    GEOMETRY_TYPE_TRIANGLES_KHR = 0
    GEOMETRY_TYPE_AABBS_KHR = 1
    GEOMETRY_TYPE_INSTANCES_KHR = 1000150000
  GeometryTypeNV* = enum
    GeometryTypeNVReserved
  RayTracingShaderGroupTypeKHR* {.size: 4.} = enum
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
  RayTracingShaderGroupTypeNV* = enum
    RayTracingShaderGroupTypeNVReserved
  AccelerationStructureMemoryRequirementsTypeKHR* {.size: 4.} = enum
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2
  AccelerationStructureMemoryRequirementsTypeNV* = enum
    AccelerationStructureMemoryRequirementsTypeNVReserved
  AccelerationStructureBuildTypeKHR* {.size: 4.} = enum
    ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
    ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
    ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
  MemoryOverallocationBehaviorAMD* {.size: 4.} = enum
    MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
    MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
    MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
  ScopeNV* {.size: 4.} = enum
    SCOPE_DEVICE_NV = 1
    SCOPE_WORKGROUP_NV = 2
    SCOPE_SUBGROUP_NV = 3
    SCOPE_QUEUE_FAMILY_NV = 5
  ComponentTypeNV* {.size: 4.} = enum
    COMPONENT_TYPE_FLOAT16_NV = 0
    COMPONENT_TYPE_FLOAT32_NV = 1
    COMPONENT_TYPE_FLOAT64_NV = 2
    COMPONENT_TYPE_SINT8_NV = 3
    COMPONENT_TYPE_SINT16_NV = 4
    COMPONENT_TYPE_SINT32_NV = 5
    COMPONENT_TYPE_SINT64_NV = 6
    COMPONENT_TYPE_UINT8_NV = 7
    COMPONENT_TYPE_UINT16_NV = 8
    COMPONENT_TYPE_UINT32_NV = 9
    COMPONENT_TYPE_UINT64_NV = 10
  DeviceDiagnosticsConfigFlagBitsNV* {.size: 4.} = enum
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
  DeviceDiagnosticsConfigFlagNV* {.size: 4.} = enum
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_NV = 0
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_NV = 1
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_NV = 2
  PipelineCreationFeedbackFlagBitsEXT* {.size: 4.} = enum
    PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
    PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
    PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
  PipelineCreationFeedbackFlagEXT* {.size: 4.} = enum
    PIPELINE_CREATION_FEEDBACK_VALID_EXT = 0
    PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_EXT = 1
    PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_EXT = 2
  PerformanceCounterScopeKHR* {.size: 4.} = enum
    PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
    PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
    PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
  PerformanceCounterUnitKHR* {.size: 4.} = enum
    PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
    PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
    PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
    PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
    PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
    PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
    PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
    PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
    PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
    PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
    PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
  PerformanceCounterStorageKHR* {.size: 4.} = enum
    PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
    PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
    PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
    PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
    PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
    PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
  PerformanceCounterDescriptionFlagBitsKHR* {.size: 4.} = enum
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
  PerformanceCounterDescriptionFlagKHR* {.size: 4.} = enum
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 0
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 1
  AcquireProfilingLockFlagBitsKHR* = enum
    AcquireProfilingLockFlagBitsKHRReserved
  SemaphoreWaitFlagBits* {.size: 4.} = enum
    SEMAPHORE_WAIT_ANY_BIT = 1
  SemaphoreWaitFlag* {.size: 4.} = enum
    SEMAPHORE_WAIT_ANY = 0
  SemaphoreWaitFlagBitsKHR* = enum
    SemaphoreWaitFlagBitsKHRReserved
  PerformanceConfigurationTypeINTEL* {.size: 4.} = enum
    PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
  QueryPoolSamplingModeINTEL* {.size: 4.} = enum
    QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
  PerformanceOverrideTypeINTEL* {.size: 4.} = enum
    PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
    PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
  PerformanceParameterTypeINTEL* {.size: 4.} = enum
    PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
    PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
  PerformanceValueTypeINTEL* {.size: 4.} = enum
    PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
    PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
    PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
    PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
    PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
  LineRasterizationModeEXT* {.size: 4.} = enum
    LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
    LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
    LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
    LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
  ShaderModuleCreateFlagBits* = enum
    ShaderModuleCreateFlagBitsReserved
  PipelineCompilerControlFlagBitsAMD* = enum
    PipelineCompilerControlFlagBitsAMDReserved
  ShaderCorePropertiesFlagBitsAMD* = enum
    ShaderCorePropertiesFlagBitsAMDReserved
  ToolPurposeFlagBitsEXT* {.size: 4.} = enum
    TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
    TOOL_PURPOSE_PROFILING_BIT_EXT = 2
    TOOL_PURPOSE_TRACING_BIT_EXT = 4
    TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
    TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
    TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
    TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
  ToolPurposeFlagEXT* {.size: 4.} = enum
    TOOL_PURPOSE_VALIDATION_EXT = 0
    TOOL_PURPOSE_PROFILING_EXT = 1
    TOOL_PURPOSE_TRACING_EXT = 2
    TOOL_PURPOSE_ADDITIONAL_FEATURES_EXT = 3
    TOOL_PURPOSE_MODIFYING_FEATURES_EXT = 4
    TOOL_PURPOSE_DEBUG_REPORTING_EXT = 5
    TOOL_PURPOSE_DEBUG_MARKERS_EXT = 6
  ColorSpaceKHR* {.size: 4.} = enum
    COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
    COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
    COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
    COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
    COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
    COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
    COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
    COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
    COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
    COLOR_SPACE_DOLBYVISION_EXT = 1000104009
    COLOR_SPACE_HDR10_HLG_EXT = 1000104010
    COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
    COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
    COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
    COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
    COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
  CompositeAlphaFlagBitsKHR* {.size: 4.} = enum
    COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
    COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
    COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
    COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
  CompositeAlphaFlagKHR* {.size: 4.} = enum
    COMPOSITE_ALPHA_OPAQUE_KHR = 0
    COMPOSITE_ALPHA_PRE_MULTIPLIED_KHR = 1
    COMPOSITE_ALPHA_POST_MULTIPLIED_KHR = 2
    COMPOSITE_ALPHA_INHERIT_KHR = 3
  DisplayPlaneAlphaFlagBitsKHR* {.size: 4.} = enum
    DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
    DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
    DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
    DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
  DisplayPlaneAlphaFlagKHR* {.size: 4.} = enum
    DISPLAY_PLANE_ALPHA_OPAQUE_KHR = 0
    DISPLAY_PLANE_ALPHA_GLOBAL_KHR = 1
    DISPLAY_PLANE_ALPHA_PER_PIXEL_KHR = 2
    DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_KHR = 3
  PresentModeKHR* {.size: 4.} = enum
    PRESENT_MODE_IMMEDIATE_KHR = 0
    PRESENT_MODE_MAILBOX_KHR = 1
    PRESENT_MODE_FIFO_KHR = 2
    PRESENT_MODE_FIFO_RELAXED_KHR = 3
    PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
    PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
  SurfaceTransformFlagBitsKHR* {.size: 4.} = enum
    SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
    SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
    SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
    SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
    SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
  SurfaceTransformFlagKHR* {.size: 4.} = enum
    SURFACE_TRANSFORM_IDENTITY_KHR = 0
    SURFACE_TRANSFORM_ROTATE_90_KHR = 1
    SURFACE_TRANSFORM_ROTATE_180_KHR = 2
    SURFACE_TRANSFORM_ROTATE_270_KHR = 3
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_KHR = 4
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_KHR = 5
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_KHR = 6
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_KHR = 7
    SURFACE_TRANSFORM_INHERIT_KHR = 8
  DebugReportFlagBitsEXT* {.size: 4.} = enum
    DEBUG_REPORT_INFORMATION_BIT_EXT = 1
    DEBUG_REPORT_WARNING_BIT_EXT = 2
    DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
    DEBUG_REPORT_ERROR_BIT_EXT = 8
    DEBUG_REPORT_DEBUG_BIT_EXT = 16
  DebugReportFlagEXT* {.size: 4.} = enum
    DEBUG_REPORT_INFORMATION_EXT = 0
    DEBUG_REPORT_WARNING_EXT = 1
    DEBUG_REPORT_PERFORMANCE_WARNING_EXT = 2
    DEBUG_REPORT_ERROR_EXT = 3
    DEBUG_REPORT_DEBUG_EXT = 4
  DebugReportObjectTypeEXT* {.size: 4.} = enum
    DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
    DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
    DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
    DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
    DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
    DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
    DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
    DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
    DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
    DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
    DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
    DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
    DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000
  RasterizationOrderAMD* {.size: 4.} = enum
    RASTERIZATION_ORDER_STRICT_AMD = 0
    RASTERIZATION_ORDER_RELAXED_AMD = 1
  ExternalMemoryHandleTypeFlagBitsNV* {.size: 4.} = enum
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
  ExternalMemoryHandleTypeFlagNV* {.size: 4.} = enum
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_NV = 0
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_NV = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_NV = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_NV = 3
  ExternalMemoryFeatureFlagBitsNV* {.size: 4.} = enum
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
  ExternalMemoryFeatureFlagNV* {.size: 4.} = enum
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_NV = 0
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_NV = 1
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_NV = 2
  ValidationCheckEXT* {.size: 4.} = enum
    VALIDATION_CHECK_ALL_EXT = 0
    VALIDATION_CHECK_SHADERS_EXT = 1
  ValidationFeatureEnableEXT* {.size: 4.} = enum
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
    VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
    VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
    VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
  ValidationFeatureDisableEXT* {.size: 4.} = enum
    VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
    VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
    VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
    VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
    VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
    VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
    VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
  ExternalMemoryHandleTypeFlagBits* {.size: 4.} = enum
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
    EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
    EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
  ExternalMemoryHandleTypeFlag* {.size: 4.} = enum
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 0
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32 = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE = 3
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP = 5
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE = 6
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_EXT = 7
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_EXT = 8
    EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_EXT = 9
    EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_ANDROID = 10
  ExternalMemoryHandleTypeFlagBitsKHR* = enum
    ExternalMemoryHandleTypeFlagBitsKHRReserved
  ExternalMemoryFeatureFlagBits* {.size: 4.} = enum
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
  ExternalMemoryFeatureFlag* {.size: 4.} = enum
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY = 0
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE = 1
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE = 2
  ExternalMemoryFeatureFlagBitsKHR* = enum
    ExternalMemoryFeatureFlagBitsKHRReserved
  ExternalSemaphoreHandleTypeFlagBits* {.size: 4.} = enum
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
  ExternalSemaphoreHandleTypeFlag* {.size: 4.} = enum
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 0
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32 = 1
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT = 2
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE = 3
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD = 4
  ExternalSemaphoreHandleTypeFlagBitsKHR* = enum
    ExternalSemaphoreHandleTypeFlagBitsKHRReserved
  ExternalSemaphoreFeatureFlagBits* {.size: 4.} = enum
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
  ExternalSemaphoreFeatureFlag* {.size: 4.} = enum
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE = 0
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE = 1
  ExternalSemaphoreFeatureFlagBitsKHR* = enum
    ExternalSemaphoreFeatureFlagBitsKHRReserved
  SemaphoreImportFlagBits* {.size: 4.} = enum
    SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
  SemaphoreImportFlag* {.size: 4.} = enum
    SEMAPHORE_IMPORT_TEMPORARY = 0
  SemaphoreImportFlagBitsKHR* = enum
    SemaphoreImportFlagBitsKHRReserved
  ExternalFenceHandleTypeFlagBits* {.size: 4.} = enum
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
  ExternalFenceHandleTypeFlag* {.size: 4.} = enum
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD = 0
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32 = 1
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT = 2
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD = 3
  ExternalFenceHandleTypeFlagBitsKHR* = enum
    ExternalFenceHandleTypeFlagBitsKHRReserved
  ExternalFenceFeatureFlagBits* {.size: 4.} = enum
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
  ExternalFenceFeatureFlag* {.size: 4.} = enum
    EXTERNAL_FENCE_FEATURE_EXPORTABLE = 0
    EXTERNAL_FENCE_FEATURE_IMPORTABLE = 1
  ExternalFenceFeatureFlagBitsKHR* = enum
    ExternalFenceFeatureFlagBitsKHRReserved
  FenceImportFlagBits* {.size: 4.} = enum
    FENCE_IMPORT_TEMPORARY_BIT = 1
  FenceImportFlag* {.size: 4.} = enum
    FENCE_IMPORT_TEMPORARY = 0
  FenceImportFlagBitsKHR* = enum
    FenceImportFlagBitsKHRReserved
  SurfaceCounterFlagBitsEXT* {.size: 4.} = enum
    SURFACE_COUNTER_VBLANK_BIT_EXT = 1
  SurfaceCounterFlagEXT* {.size: 4.} = enum
    SURFACE_COUNTER_VBLANK_EXT = 0
  DisplayPowerStateEXT* {.size: 4.} = enum
    DISPLAY_POWER_STATE_OFF_EXT = 0
    DISPLAY_POWER_STATE_SUSPEND_EXT = 1
    DISPLAY_POWER_STATE_ON_EXT = 2
  DeviceEventTypeEXT* {.size: 4.} = enum
    DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
  DisplayEventTypeEXT* {.size: 4.} = enum
    DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
  PeerMemoryFeatureFlagBits* {.size: 4.} = enum
    PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
    PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
  PeerMemoryFeatureFlag* {.size: 4.} = enum
    PEER_MEMORY_FEATURE_COPY_SRC = 0
    PEER_MEMORY_FEATURE_COPY_DST = 1
    PEER_MEMORY_FEATURE_GENERIC_SRC = 2
    PEER_MEMORY_FEATURE_GENERIC_DST = 3
  PeerMemoryFeatureFlagBitsKHR* = enum
    PeerMemoryFeatureFlagBitsKHRReserved
  MemoryAllocateFlagBits* {.size: 4.} = enum
    MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
  MemoryAllocateFlag* {.size: 4.} = enum
    MEMORY_ALLOCATE_DEVICE_MASK = 0
    MEMORY_ALLOCATE_DEVICE_ADDRESS = 1
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY = 2
  MemoryAllocateFlagBitsKHR* = enum
    MemoryAllocateFlagBitsKHRReserved
  DeviceGroupPresentModeFlagBitsKHR* {.size: 4.} = enum
    DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
    DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
    DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
    DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
  DeviceGroupPresentModeFlagKHR* {.size: 4.} = enum
    DEVICE_GROUP_PRESENT_MODE_LOCAL_KHR = 0
    DEVICE_GROUP_PRESENT_MODE_REMOTE_KHR = 1
    DEVICE_GROUP_PRESENT_MODE_SUM_KHR = 2
    DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_KHR = 3
  SwapchainCreateFlagBitsKHR* {.size: 4.} = enum
    SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
    SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
    SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
  SwapchainCreateFlagKHR* {.size: 4.} = enum
    SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_KHR = 0
    SWAPCHAIN_CREATE_PROTECTED_KHR = 1
    SWAPCHAIN_CREATE_MUTABLE_FORMAT_KHR = 2
  SubgroupFeatureFlagBits* {.size: 4.} = enum
    SUBGROUP_FEATURE_BASIC_BIT = 1
    SUBGROUP_FEATURE_VOTE_BIT = 2
    SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
    SUBGROUP_FEATURE_BALLOT_BIT = 8
    SUBGROUP_FEATURE_SHUFFLE_BIT = 16
    SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
    SUBGROUP_FEATURE_CLUSTERED_BIT = 64
    SUBGROUP_FEATURE_QUAD_BIT = 128
    SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
  SubgroupFeatureFlag* {.size: 4.} = enum
    SUBGROUP_FEATURE_BASIC = 0
    SUBGROUP_FEATURE_VOTE = 1
    SUBGROUP_FEATURE_ARITHMETIC = 2
    SUBGROUP_FEATURE_BALLOT = 3
    SUBGROUP_FEATURE_SHUFFLE = 4
    SUBGROUP_FEATURE_SHUFFLE_RELATIVE = 5
    SUBGROUP_FEATURE_CLUSTERED = 6
    SUBGROUP_FEATURE_QUAD = 7
    SUBGROUP_FEATURE_PARTITIONED_NV = 8
  TessellationDomainOrigin* {.size: 4.} = enum
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
  TessellationDomainOriginKHR* = enum
    TessellationDomainOriginKHRReserved
  SamplerYcbcrModelConversion* {.size: 4.} = enum
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
  SamplerYcbcrModelConversionKHR* = enum
    SamplerYcbcrModelConversionKHRReserved
  SamplerYcbcrRange* {.size: 4.} = enum
    SAMPLER_YCBCR_RANGE_ITU_FULL = 0
    SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
  SamplerYcbcrRangeKHR* = enum
    SamplerYcbcrRangeKHRReserved
  ChromaLocation* {.size: 4.} = enum
    CHROMA_LOCATION_COSITED_EVEN = 0
    CHROMA_LOCATION_MIDPOINT = 1
  ChromaLocationKHR* = enum
    ChromaLocationKHRReserved
  SamplerReductionMode* {.size: 4.} = enum
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
    SAMPLER_REDUCTION_MODE_MIN = 1
    SAMPLER_REDUCTION_MODE_MAX = 2
  SamplerReductionModeEXT* = enum
    SamplerReductionModeEXTReserved
  BlendOverlapEXT* {.size: 4.} = enum
    BLEND_OVERLAP_UNCORRELATED_EXT = 0
    BLEND_OVERLAP_DISJOINT_EXT = 1
    BLEND_OVERLAP_CONJOINT_EXT = 2
  DebugUtilsMessageSeverityFlagBitsEXT* {.size: 4.} = enum
    DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
    DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
    DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
    DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
  DebugUtilsMessageSeverityFlagEXT* {.size: 4.} = enum
    DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_EXT = 0
    DEBUG_UTILS_MESSAGE_SEVERITY_INFO_EXT = 4
    DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_EXT = 8
    DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_EXT = 12
  DebugUtilsMessageTypeFlagBitsEXT* {.size: 4.} = enum
    DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
    DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
    DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
  DebugUtilsMessageTypeFlagEXT* {.size: 4.} = enum
    DEBUG_UTILS_MESSAGE_TYPE_GENERAL_EXT = 0
    DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_EXT = 1
    DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_EXT = 2
  FullScreenExclusiveEXT* {.size: 4.} = enum
    FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0
    FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1
    FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2
    FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3
  ShaderFloatControlsIndependence* {.size: 4.} = enum
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
  ShaderFloatControlsIndependenceKHR* = enum
    ShaderFloatControlsIndependenceKHRReserved
  VendorId* {.size: 4.} = enum
    VENDOR_ID_VIV = 0x10001
    VENDOR_ID_VSI = 0x10002
    VENDOR_ID_KAZAN = 0x10003
    VENDOR_ID_CODEPLAY = 0x10004
    VENDOR_ID_MESA = 0x10005
  DriverId* {.size: 4.} = enum
    DRIVER_ID_AMD_PROPRIETARY = 1
    DRIVER_ID_AMD_OPEN_SOURCE = 2
    DRIVER_ID_MESA_RADV = 3
    DRIVER_ID_NVIDIA_PROPRIETARY = 4
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
    DRIVER_ID_IMAGINATION_PROPRIETARY = 7
    DRIVER_ID_QUALCOMM_PROPRIETARY = 8
    DRIVER_ID_ARM_PROPRIETARY = 9
    DRIVER_ID_GOOGLE_SWIFTSHADER = 10
    DRIVER_ID_GGP_PROPRIETARY = 11
    DRIVER_ID_BROADCOM_PROPRIETARY = 12
    DRIVER_ID_MESA_LLVMPIPE = 13
    DRIVER_ID_MOLTENVK = 14
  DriverIdKHR* = enum
    DriverIdKHRReserved
  ShadingRatePaletteEntryNV* {.size: 4.} = enum
    SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
    SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
    SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
    SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
    SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
  CoarseSampleOrderTypeNV* {.size: 4.} = enum
    COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
    COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
    COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
    COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
  PipelineExecutableStatisticFormatKHR* {.size: 4.} = enum
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
  PFN_vkInternalAllocationNotification* = proc(
    pUserData: pointer,
    size: uint,
    allocationType: InternalAllocationType,
    allocationScope: SystemAllocationScope,
   ): void {.cdecl.}
  PFN_vkInternalFreeNotification* = proc(
    pUserData: pointer,
    size: uint,
    allocationType: InternalAllocationType,
    allocationScope: SystemAllocationScope,
   ): void {.cdecl.}
  PFN_vkReallocationFunction* = proc(
    pUserData: pointer,
    pOriginal: pointer,
    size: uint,
    alignment: uint,
    allocationScope: SystemAllocationScope,
   ): pointer {.cdecl.}
  PFN_vkAllocationFunction* = proc(
    pUserData: pointer,
    size: uint,
    alignment: uint,
    allocationScope: SystemAllocationScope,
   ): pointer {.cdecl.}
  PFN_vkFreeFunction* = proc(
    pUserData: pointer,
    pMemory: pointer,
   ): void {.cdecl.}
  PFN_vkVoidFunction* = proc(
   ): void {.cdecl.}
  BaseOutStructure*  = object
    sType*: StructureType
    pNext*: ptr BaseOutStructure
  BaseInStructure*  = object
    sType*: StructureType
    pNext*: ptr BaseInStructure
  Offset2D*  = object
    x*: int32
    y*: int32
  Offset3D*  = object
    x*: int32
    y*: int32
    z*: int32
  Extent2D*  = object
    width*: uint32
    height*: uint32
  Extent3D*  = object
    width*: uint32
    height*: uint32
    depth*: uint32
  Viewport*  = object
    x*: float32
    y*: float32
    width*: float32
    height*: float32
    minDepth*: float32
    maxDepth*: float32
  Rect2D*  = object
    offset*: Offset2D
    extent*: Extent2D
  ClearRect*  = object
    rect*: Rect2D
    baseArrayLayer*: uint32
    layerCount*: uint32
  ComponentMapping*  = object
    r*: ComponentSwizzle
    g*: ComponentSwizzle
    b*: ComponentSwizzle
    a*: ComponentSwizzle
  ExtensionProperties*  = object
    extensionName*: array[MAX_EXTENSION_NAME_SIZE,char]
    specVersion*: uint32
  LayerProperties*  = object
    layerName*: array[MAX_EXTENSION_NAME_SIZE,char]
    specVersion*: uint32
    implementationVersion*: uint32
    description*: array[MAX_DESCRIPTION_SIZE,char]
  ApplicationInfo*  = object
    sType*: StructureType
    pNext*: pointer
    pApplicationName*: cstring
    applicationVersion*: uint32
    pEngineName*: cstring
    engineVersion*: uint32
    apiVersion*: uint32
  AllocationCallbacks*  = object
    pUserData*: pointer
    pfnAllocation*: PFN_vkAllocationFunction
    pfnReallocation*: PFN_vkReallocationFunction
    pfnFree*: PFN_vkFreeFunction
    pfnInternalAllocation*: PFN_vkInternalAllocationNotification
    pfnInternalFree*: PFN_vkInternalFreeNotification
  DescriptorImageInfo*  = object
    sampler*: Sampler
    imageView*: ImageView
    imageLayout*: ImageLayout
  CopyDescriptorSet*  = object
    sType*: StructureType
    pNext*: pointer
    srcSet*: DescriptorSet
    srcBinding*: uint32
    srcArrayElement*: uint32
    dstSet*: DescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
  DescriptorPoolSize*  = object
    `type`*: DescriptorType
    descriptorCount*: uint32
  DescriptorSetAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    descriptorPool*: DescriptorPool
    descriptorSetCount*: uint32
    pSetLayouts*: ptr DescriptorSetLayout
  SpecializationMapEntry*  = object
    constantID*: uint32
    offset*: uint32
    size*: uint
  SpecializationInfo*  = object
    mapEntryCount*: uint32
    pMapEntries*: ptr SpecializationMapEntry
    dataSize*: uint
    pData*: pointer
  VertexInputBindingDescription*  = object
    binding*: uint32
    stride*: uint32
    inputRate*: VertexInputRate
  VertexInputAttributeDescription*  = object
    location*: uint32
    binding*: uint32
    format*: Format
    offset*: uint32
  StencilOpState*  = object
    failOp*: StencilOp
    passOp*: StencilOp
    depthFailOp*: StencilOp
    compareOp*: CompareOp
    compareMask*: uint32
    writeMask*: uint32
    reference*: uint32
  CommandBufferAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    commandPool*: CommandPool
    level*: CommandBufferLevel
    commandBufferCount*: uint32
  ClearColorValue* {.union.} = object
    float32*: array[4,float32]
    int32*: array[4,int32]
    uint32*: array[4,uint32]
  ClearDepthStencilValue*  = object
    depth*: float32
    stencil*: uint32
  ClearValue* {.union.} = object
    color*: ClearColorValue
    depthStencil*: ClearDepthStencilValue
  AttachmentReference*  = object
    attachment*: uint32
    layout*: ImageLayout
  DrawIndirectCommand*  = object
    vertexCount*: uint32
    instanceCount*: uint32
    firstVertex*: uint32
    firstInstance*: uint32
  DrawIndexedIndirectCommand*  = object
    indexCount*: uint32
    instanceCount*: uint32
    firstIndex*: uint32
    vertexOffset*: int32
    firstInstance*: uint32
  DispatchIndirectCommand*  = object
    x*: uint32
    y*: uint32
    z*: uint32
  DisplayPlanePropertiesKHR*  = object
    currentDisplay*: DisplayKHR
    currentStackIndex*: uint32
  DisplayModeParametersKHR*  = object
    visibleRegion*: Extent2D
    refreshRate*: uint32
  DisplayModePropertiesKHR*  = object
    displayMode*: DisplayModeKHR
    parameters*: DisplayModeParametersKHR
  SurfaceFormatKHR*  = object
    format*: Format
    colorSpace*: ColorSpaceKHR
  PresentInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr Semaphore
    swapchainCount*: uint32
    pSwapchains*: ptr SwapchainKHR
    pImageIndices*: ptr uint32
    pResults*: ptr Result
  ValidationFlagsEXT*  = object
    sType*: StructureType
    pNext*: pointer
    disabledValidationCheckCount*: uint32
    pDisabledValidationChecks*: ptr ValidationCheckEXT
  ValidationFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    enabledValidationFeatureCount*: uint32
    pEnabledValidationFeatures*: ptr ValidationFeatureEnableEXT
    disabledValidationFeatureCount*: uint32
    pDisabledValidationFeatures*: ptr ValidationFeatureDisableEXT
  PipelineRasterizationStateRasterizationOrderAMD*  = object
    sType*: StructureType
    pNext*: pointer
    rasterizationOrder*: RasterizationOrderAMD
  DebugMarkerObjectNameInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    objectType*: DebugReportObjectTypeEXT
    `object`*: uint64
    pObjectName*: cstring
  DebugMarkerObjectTagInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    objectType*: DebugReportObjectTypeEXT
    `object`*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer
  DebugMarkerMarkerInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    pMarkerName*: cstring
    color*: array[4,float32]
  DedicatedAllocationMemoryAllocateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    image*: Image
    buffer*: Buffer
  ExportMemoryWin32HandleInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
  Win32KeyedMutexAcquireReleaseInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr DeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeoutMilliseconds*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr DeviceMemory
    pReleaseKeys*: ptr uint64
  DevicePrivateDataCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    privateDataSlotRequestCount*: uint32
  PhysicalDeviceDeviceGeneratedCommandsPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    maxGraphicsShaderGroupCount*: uint32
    maxIndirectSequenceCount*: uint32
    maxIndirectCommandsTokenCount*: uint32
    maxIndirectCommandsStreamCount*: uint32
    maxIndirectCommandsTokenOffset*: uint32
    maxIndirectCommandsStreamStride*: uint32
    minSequencesCountBufferOffsetAlignment*: uint32
    minSequencesIndexBufferOffsetAlignment*: uint32
    minIndirectCommandsBufferOffsetAlignment*: uint32
  BindShaderGroupIndirectCommandNV*  = object
    groupIndex*: uint32
  SetStateFlagsIndirectCommandNV*  = object
    data*: uint32
  GeneratedCommandsMemoryRequirementsInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    pipelineBindPoint*: PipelineBindPoint
    pipeline*: Pipeline
    indirectCommandsLayout*: IndirectCommandsLayoutNV
    maxSequencesCount*: uint32
  PhysicalDevicePushDescriptorPropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    maxPushDescriptors*: uint32
  ConformanceVersion*  = object
    major*: uint8
    minor*: uint8
    subminor*: uint8
    patch*: uint8
  ConformanceVersionKHR* = ConformanceVersion
  PhysicalDeviceDriverProperties*  = object
    sType*: StructureType
    pNext*: pointer
    driverID*: DriverId
    driverName*: array[MAX_DRIVER_NAME_SIZE,char]
    driverInfo*: array[MAX_DRIVER_INFO_SIZE,char]
    conformanceVersion*: ConformanceVersion
  PhysicalDeviceDriverPropertiesKHR* = PhysicalDeviceDriverProperties
  RectLayerKHR*  = object
    offset*: Offset2D
    extent*: Extent2D
    layer*: uint32
  PhysicalDeviceExternalImageFormatInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalMemoryHandleTypeFlagBits
  PhysicalDeviceExternalImageFormatInfoKHR* = PhysicalDeviceExternalImageFormatInfo
  ImportMemoryWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalMemoryHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR
  ExportMemoryWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR
  MemoryWin32HandlePropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    memoryTypeBits*: uint32
  MemoryGetWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    memory*: DeviceMemory
    handleType*: ExternalMemoryHandleTypeFlagBits
  ImportMemoryFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalMemoryHandleTypeFlagBits
    fd*: cint
  MemoryFdPropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    memoryTypeBits*: uint32
  MemoryGetFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    memory*: DeviceMemory
    handleType*: ExternalMemoryHandleTypeFlagBits
  Win32KeyedMutexAcquireReleaseInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr DeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeouts*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr DeviceMemory
    pReleaseKeys*: ptr uint64
  PhysicalDeviceExternalSemaphoreInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalSemaphoreHandleTypeFlagBits
  PhysicalDeviceExternalSemaphoreInfoKHR* = PhysicalDeviceExternalSemaphoreInfo
  ExportSemaphoreWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR
  D3D12FenceSubmitInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreValuesCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValuesCount*: uint32
    pSignalSemaphoreValues*: ptr uint64
  SemaphoreGetWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    semaphore*: Semaphore
    handleType*: ExternalSemaphoreHandleTypeFlagBits
  SemaphoreGetFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    semaphore*: Semaphore
    handleType*: ExternalSemaphoreHandleTypeFlagBits
  PhysicalDeviceExternalFenceInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalFenceHandleTypeFlagBits
  PhysicalDeviceExternalFenceInfoKHR* = PhysicalDeviceExternalFenceInfo
  ExportFenceWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR
  FenceGetWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    fence*: Fence
    handleType*: ExternalFenceHandleTypeFlagBits
  FenceGetFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    fence*: Fence
    handleType*: ExternalFenceHandleTypeFlagBits
  PhysicalDeviceMultiviewProperties*  = object
    sType*: StructureType
    pNext*: pointer
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32
  PhysicalDeviceMultiviewPropertiesKHR* = PhysicalDeviceMultiviewProperties
  RenderPassMultiviewCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    subpassCount*: uint32
    pViewMasks*: ptr uint32
    dependencyCount*: uint32
    pViewOffsets*: ptr int32
    correlationMaskCount*: uint32
    pCorrelationMasks*: ptr uint32
  RenderPassMultiviewCreateInfoKHR* = RenderPassMultiviewCreateInfo
  DisplayPowerInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    powerState*: DisplayPowerStateEXT
  DeviceEventInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    deviceEvent*: DeviceEventTypeEXT
  DisplayEventInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    displayEvent*: DisplayEventTypeEXT
  BindBufferMemoryDeviceGroupInfo*  = object
    sType*: StructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32
  BindBufferMemoryDeviceGroupInfoKHR* = BindBufferMemoryDeviceGroupInfo
  BindImageMemoryDeviceGroupInfo*  = object
    sType*: StructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32
    splitInstanceBindRegionCount*: uint32
    pSplitInstanceBindRegions*: ptr Rect2D
  BindImageMemoryDeviceGroupInfoKHR* = BindImageMemoryDeviceGroupInfo
  DeviceGroupRenderPassBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    deviceMask*: uint32
    deviceRenderAreaCount*: uint32
    pDeviceRenderAreas*: ptr Rect2D
  DeviceGroupRenderPassBeginInfoKHR* = DeviceGroupRenderPassBeginInfo
  DeviceGroupCommandBufferBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    deviceMask*: uint32
  DeviceGroupCommandBufferBeginInfoKHR* = DeviceGroupCommandBufferBeginInfo
  DeviceGroupSubmitInfo*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphoreDeviceIndices*: ptr uint32
    commandBufferCount*: uint32
    pCommandBufferDeviceMasks*: ptr uint32
    signalSemaphoreCount*: uint32
    pSignalSemaphoreDeviceIndices*: ptr uint32
  DeviceGroupSubmitInfoKHR* = DeviceGroupSubmitInfo
  DeviceGroupBindSparseInfo*  = object
    sType*: StructureType
    pNext*: pointer
    resourceDeviceIndex*: uint32
    memoryDeviceIndex*: uint32
  DeviceGroupBindSparseInfoKHR* = DeviceGroupBindSparseInfo
  ImageSwapchainCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    swapchain*: SwapchainKHR
  BindImageMemorySwapchainInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    swapchain*: SwapchainKHR
    imageIndex*: uint32
  AcquireNextImageInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    swapchain*: SwapchainKHR
    timeout*: uint64
    semaphore*: Semaphore
    fence*: Fence
    deviceMask*: uint32
  DeviceGroupPresentInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    swapchainCount*: uint32
    pDeviceMasks*: ptr uint32
    mode*: DeviceGroupPresentModeFlagBitsKHR
  DeviceGroupDeviceCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    pPhysicalDevices*: ptr PhysicalDevice
  DeviceGroupDeviceCreateInfoKHR* = DeviceGroupDeviceCreateInfo
  DescriptorUpdateTemplateEntry*  = object
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: DescriptorType
    offset*: uint
    stride*: uint
  DescriptorUpdateTemplateEntryKHR* = DescriptorUpdateTemplateEntry
  XYColorEXT*  = object
    x*: float32
    y*: float32
  HdrMetadataEXT*  = object
    sType*: StructureType
    pNext*: pointer
    displayPrimaryRed*: XYColorEXT
    displayPrimaryGreen*: XYColorEXT
    displayPrimaryBlue*: XYColorEXT
    whitePoint*: XYColorEXT
    maxLuminance*: float32
    minLuminance*: float32
    maxContentLightLevel*: float32
    maxFrameAverageLightLevel*: float32
  RefreshCycleDurationGOOGLE*  = object
    refreshDuration*: uint64
  PastPresentationTimingGOOGLE*  = object
    presentID*: uint32
    desiredPresentTime*: uint64
    actualPresentTime*: uint64
    earliestPresentTime*: uint64
    presentMargin*: uint64
  PresentTimeGOOGLE*  = object
    presentID*: uint32
    desiredPresentTime*: uint64
  ViewportWScalingNV*  = object
    xcoeff*: float32
    ycoeff*: float32
  ViewportSwizzleNV*  = object
    x*: ViewportCoordinateSwizzleNV
    y*: ViewportCoordinateSwizzleNV
    z*: ViewportCoordinateSwizzleNV
    w*: ViewportCoordinateSwizzleNV
  PhysicalDeviceDiscardRectanglePropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxDiscardRectangles*: uint32
  PhysicalDeviceSurfaceInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    surface*: SurfaceKHR
  SurfaceFormat2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    surfaceFormat*: SurfaceFormatKHR
  DisplayPlaneProperties2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    displayPlaneProperties*: DisplayPlanePropertiesKHR
  DisplayModeProperties2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    displayModeProperties*: DisplayModePropertiesKHR
  DisplayPlaneInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    mode*: DisplayModeKHR
    planeIndex*: uint32
  BufferMemoryRequirementsInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    buffer*: Buffer
  BufferMemoryRequirementsInfo2KHR* = BufferMemoryRequirementsInfo2
  ImageMemoryRequirementsInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    image*: Image
  ImageMemoryRequirementsInfo2KHR* = ImageMemoryRequirementsInfo2
  ImageSparseMemoryRequirementsInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    image*: Image
  ImageSparseMemoryRequirementsInfo2KHR* = ImageSparseMemoryRequirementsInfo2
  PhysicalDevicePointClippingProperties*  = object
    sType*: StructureType
    pNext*: pointer
    pointClippingBehavior*: PointClippingBehavior
  PhysicalDevicePointClippingPropertiesKHR* = PhysicalDevicePointClippingProperties
  MemoryDedicatedAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    image*: Image
    buffer*: Buffer
  MemoryDedicatedAllocateInfoKHR* = MemoryDedicatedAllocateInfo
  PipelineTessellationDomainOriginStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    domainOrigin*: TessellationDomainOrigin
  PipelineTessellationDomainOriginStateCreateInfoKHR* = PipelineTessellationDomainOriginStateCreateInfo
  SamplerYcbcrConversionInfo*  = object
    sType*: StructureType
    pNext*: pointer
    conversion*: SamplerYcbcrConversion
  SamplerYcbcrConversionInfoKHR* = SamplerYcbcrConversionInfo
  BindImagePlaneMemoryInfo*  = object
    sType*: StructureType
    pNext*: pointer
    planeAspect*: ImageAspectFlagBits
  BindImagePlaneMemoryInfoKHR* = BindImagePlaneMemoryInfo
  ImagePlaneMemoryRequirementsInfo*  = object
    sType*: StructureType
    pNext*: pointer
    planeAspect*: ImageAspectFlagBits
  ImagePlaneMemoryRequirementsInfoKHR* = ImagePlaneMemoryRequirementsInfo
  SamplerYcbcrConversionImageFormatProperties*  = object
    sType*: StructureType
    pNext*: pointer
    combinedImageSamplerDescriptorCount*: uint32
  SamplerYcbcrConversionImageFormatPropertiesKHR* = SamplerYcbcrConversionImageFormatProperties
  SampleLocationEXT*  = object
    x*: float32
    y*: float32
  SampleLocationsInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    sampleLocationsPerPixel*: SampleCountFlagBits
    sampleLocationGridSize*: Extent2D
    sampleLocationsCount*: uint32
    pSampleLocations*: ptr SampleLocationEXT
  AttachmentSampleLocationsEXT*  = object
    attachmentIndex*: uint32
    sampleLocationsInfo*: SampleLocationsInfoEXT
  SubpassSampleLocationsEXT*  = object
    subpassIndex*: uint32
    sampleLocationsInfo*: SampleLocationsInfoEXT
  RenderPassSampleLocationsBeginInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    attachmentInitialSampleLocationsCount*: uint32
    pAttachmentInitialSampleLocations*: ptr AttachmentSampleLocationsEXT
    postSubpassSampleLocationsCount*: uint32
    pPostSubpassSampleLocations*: ptr SubpassSampleLocationsEXT
  MultisamplePropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxSampleLocationGridSize*: Extent2D
  SamplerReductionModeCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    reductionMode*: SamplerReductionMode
  SamplerReductionModeCreateInfoEXT* = SamplerReductionModeCreateInfo
  PhysicalDeviceInlineUniformBlockPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxInlineUniformBlockSize*: uint32
    maxPerStageDescriptorInlineUniformBlocks*: uint32
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks*: uint32
    maxDescriptorSetInlineUniformBlocks*: uint32
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks*: uint32
  WriteDescriptorSetInlineUniformBlockEXT*  = object
    sType*: StructureType
    pNext*: pointer
    dataSize*: uint32
    pData*: pointer
  DescriptorPoolInlineUniformBlockCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxInlineUniformBlockBindings*: uint32
  ImageFormatListCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    viewFormatCount*: uint32
    pViewFormats*: ptr Format
  ImageFormatListCreateInfoKHR* = ImageFormatListCreateInfo
  ShaderModuleValidationCacheCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    validationCache*: ValidationCacheEXT
  ShaderResourceUsageAMD*  = object
    numUsedVgprs*: uint32
    numUsedSgprs*: uint32
    ldsSizePerLocalWorkGroup*: uint32
    ldsUsageSizeInBytes*: uint
    scratchMemUsageInBytes*: uint
  DeviceQueueGlobalPriorityCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    globalPriority*: QueueGlobalPriorityEXT
  DebugUtilsObjectNameInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    objectType*: ObjectType
    objectHandle*: uint64
    pObjectName*: cstring
  DebugUtilsObjectTagInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    objectType*: ObjectType
    objectHandle*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer
  DebugUtilsLabelEXT*  = object
    sType*: StructureType
    pNext*: pointer
    pLabelName*: cstring
    color*: array[4,float32]
  ImportMemoryHostPointerInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalMemoryHandleTypeFlagBits
    pHostPointer*: pointer
  MemoryHostPointerPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    memoryTypeBits*: uint32
  CalibratedTimestampInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    timeDomain*: TimeDomainEXT
  PhysicalDeviceShaderCorePropertiesAMD*  = object
    sType*: StructureType
    pNext*: pointer
    shaderEngineCount*: uint32
    shaderArraysPerEngineCount*: uint32
    computeUnitsPerShaderArray*: uint32
    simdPerComputeUnit*: uint32
    wavefrontsPerSimd*: uint32
    wavefrontSize*: uint32
    sgprsPerSimd*: uint32
    minSgprAllocation*: uint32
    maxSgprAllocation*: uint32
    sgprAllocationGranularity*: uint32
    vgprsPerSimd*: uint32
    minVgprAllocation*: uint32
    maxVgprAllocation*: uint32
    vgprAllocationGranularity*: uint32
  DescriptorSetVariableDescriptorCountAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    descriptorSetCount*: uint32
    pDescriptorCounts*: ptr uint32
  DescriptorSetVariableDescriptorCountAllocateInfoEXT* = DescriptorSetVariableDescriptorCountAllocateInfo
  DescriptorSetVariableDescriptorCountLayoutSupport*  = object
    sType*: StructureType
    pNext*: pointer
    maxVariableDescriptorCount*: uint32
  DescriptorSetVariableDescriptorCountLayoutSupportEXT* = DescriptorSetVariableDescriptorCountLayoutSupport
  SubpassBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    contents*: SubpassContents
  SubpassBeginInfoKHR* = SubpassBeginInfo
  SubpassEndInfo*  = object
    sType*: StructureType
    pNext*: pointer
  SubpassEndInfoKHR* = SubpassEndInfo
  PhysicalDeviceTimelineSemaphoreProperties*  = object
    sType*: StructureType
    pNext*: pointer
    maxTimelineSemaphoreValueDifference*: uint64
  PhysicalDeviceTimelineSemaphorePropertiesKHR* = PhysicalDeviceTimelineSemaphoreProperties
  SemaphoreTypeCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    semaphoreType*: SemaphoreType
    initialValue*: uint64
  SemaphoreTypeCreateInfoKHR* = SemaphoreTypeCreateInfo
  TimelineSemaphoreSubmitInfo*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreValueCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValueCount*: uint32
    pSignalSemaphoreValues*: ptr uint64
  TimelineSemaphoreSubmitInfoKHR* = TimelineSemaphoreSubmitInfo
  SemaphoreSignalInfo*  = object
    sType*: StructureType
    pNext*: pointer
    semaphore*: Semaphore
    value*: uint64
  SemaphoreSignalInfoKHR* = SemaphoreSignalInfo
  VertexInputBindingDivisorDescriptionEXT*  = object
    binding*: uint32
    divisor*: uint32
  PipelineVertexInputDivisorStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    vertexBindingDivisorCount*: uint32
    pVertexBindingDivisors*: ptr VertexInputBindingDivisorDescriptionEXT
  PhysicalDeviceVertexAttributeDivisorPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxVertexAttribDivisor*: uint32
  PhysicalDevicePCIBusInfoPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    pciDomain*: uint32
    pciBus*: uint32
    pciDevice*: uint32
    pciFunction*: uint32
  ImportAndroidHardwareBufferInfoANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    buffer*: ptr AHardwareBuffer
  AndroidHardwareBufferUsageANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    androidHardwareBufferUsage*: uint64
  MemoryGetAndroidHardwareBufferInfoANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    memory*: DeviceMemory
  ExternalFormatANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    externalFormat*: uint64
  CheckpointDataNV*  = object
    sType*: StructureType
    pNext*: pointer
    stage*: PipelineStageFlagBits
    pCheckpointMarker*: pointer
  ImageViewASTCDecodeModeEXT*  = object
    sType*: StructureType
    pNext*: pointer
    decodeMode*: Format
  PipelineViewportExclusiveScissorStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    exclusiveScissorCount*: uint32
    pExclusiveScissors*: ptr Rect2D
  ShadingRatePaletteNV*  = object
    shadingRatePaletteEntryCount*: uint32
    pShadingRatePaletteEntries*: ptr ShadingRatePaletteEntryNV
  PhysicalDeviceShadingRateImagePropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    shadingRateTexelSize*: Extent2D
    shadingRatePaletteSize*: uint32
    shadingRateMaxCoarseSamples*: uint32
  CoarseSampleLocationNV*  = object
    pixelX*: uint32
    pixelY*: uint32
    sample*: uint32
  CoarseSampleOrderCustomNV*  = object
    shadingRate*: ShadingRatePaletteEntryNV
    sampleCount*: uint32
    sampleLocationCount*: uint32
    pSampleLocations*: ptr CoarseSampleLocationNV
  PipelineViewportCoarseSampleOrderStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    sampleOrderType*: CoarseSampleOrderTypeNV
    customSampleOrderCount*: uint32
    pCustomSampleOrders*: ptr CoarseSampleOrderCustomNV
  PhysicalDeviceMeshShaderPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    maxDrawMeshTasksCount*: uint32
    maxTaskWorkGroupInvocations*: uint32
    maxTaskWorkGroupSize*: array[3,uint32]
    maxTaskTotalMemorySize*: uint32
    maxTaskOutputCount*: uint32
    maxMeshWorkGroupInvocations*: uint32
    maxMeshWorkGroupSize*: array[3,uint32]
    maxMeshTotalMemorySize*: uint32
    maxMeshOutputVertices*: uint32
    maxMeshOutputPrimitives*: uint32
    maxMeshMultiviewViewCount*: uint32
    meshOutputPerVertexGranularity*: uint32
    meshOutputPerPrimitiveGranularity*: uint32
  DrawMeshTasksIndirectCommandNV*  = object
    taskCount*: uint32
    firstTask*: uint32
  RayTracingShaderGroupCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: RayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32
  RayTracingShaderGroupCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: RayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32
    pShaderGroupCaptureReplayHandle*: pointer
  WriteDescriptorSetAccelerationStructureKHR*  = object
    sType*: StructureType
    pNext*: pointer
    accelerationStructureCount*: uint32
    pAccelerationStructures*: ptr AccelerationStructureKHR
  WriteDescriptorSetAccelerationStructureNV* = WriteDescriptorSetAccelerationStructureKHR
  AccelerationStructureMemoryRequirementsInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: AccelerationStructureMemoryRequirementsTypeKHR
    buildType*: AccelerationStructureBuildTypeKHR
    accelerationStructure*: AccelerationStructureKHR
  AccelerationStructureMemoryRequirementsInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: AccelerationStructureMemoryRequirementsTypeNV
    accelerationStructure*: AccelerationStructureNV
  PhysicalDeviceRayTracingPropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxPrimitiveCount*: uint64
    maxDescriptorSetAccelerationStructures*: uint32
    shaderGroupHandleCaptureReplaySize*: uint32
  PhysicalDeviceRayTracingPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxTriangleCount*: uint64
    maxDescriptorSetAccelerationStructures*: uint32
  TraceRaysIndirectCommandKHR*  = object
    width*: uint32
    height*: uint32
    depth*: uint32
  PhysicalDeviceImageDrmFormatModifierInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    sharingMode*: SharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
  ImageDrmFormatModifierListCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifiers*: ptr uint64
  ImageDrmFormatModifierPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    drmFormatModifier*: uint64
  DeviceMemoryOverallocationCreateInfoAMD*  = object
    sType*: StructureType
    pNext*: pointer
    overallocationBehavior*: MemoryOverallocationBehaviorAMD
  RenderPassFragmentDensityMapCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fragmentDensityMapAttachment*: AttachmentReference
  MemoryPriorityAllocateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    priority*: float32
  BufferDeviceAddressInfo*  = object
    sType*: StructureType
    pNext*: pointer
    buffer*: Buffer
  BufferDeviceAddressInfoKHR* = BufferDeviceAddressInfo
  BufferDeviceAddressInfoEXT* = BufferDeviceAddressInfo
  BufferOpaqueCaptureAddressCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64
  BufferOpaqueCaptureAddressCreateInfoKHR* = BufferOpaqueCaptureAddressCreateInfo
  PhysicalDeviceImageViewImageFormatInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    imageViewType*: ImageViewType
  RenderPassAttachmentBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    attachmentCount*: uint32
    pAttachments*: ptr ImageView
  RenderPassAttachmentBeginInfoKHR* = RenderPassAttachmentBeginInfo
  CooperativeMatrixPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    MSize*: uint32
    NSize*: uint32
    KSize*: uint32
    AType*: ComponentTypeNV
    BType*: ComponentTypeNV
    CType*: ComponentTypeNV
    DType*: ComponentTypeNV
    scope*: ScopeNV
  ImageViewHandleInfoNVX*  = object
    sType*: StructureType
    pNext*: pointer
    imageView*: ImageView
    descriptorType*: DescriptorType
    sampler*: Sampler
  PresentFrameTokenGGP*  = object
    sType*: StructureType
    pNext*: pointer
    frameToken*: GgpFrameToken
  SurfaceFullScreenExclusiveInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fullScreenExclusive*: FullScreenExclusiveEXT
  SurfaceFullScreenExclusiveWin32InfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    hmonitor*: HMONITOR
  PerformanceCounterKHR*  = object
    sType*: StructureType
    pNext*: pointer
    unit*: PerformanceCounterUnitKHR
    scope*: PerformanceCounterScopeKHR
    storage*: PerformanceCounterStorageKHR
    uuid*: array[UUID_SIZE,uint8]
  QueryPoolPerformanceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    queueFamilyIndex*: uint32
    counterIndexCount*: uint32
    pCounterIndices*: ptr uint32
  PerformanceCounterResultKHR* {.union.} = object
    int32*: int32
    int64*: int64
    uint32*: uint32
    uint64*: uint64
    float32*: float32
    float64*: float64
  PerformanceQuerySubmitInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    counterPassIndex*: uint32
  InitializePerformanceApiInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    pUserData*: pointer
  QueryPoolPerformanceQueryCreateInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    performanceCountersSampling*: QueryPoolSamplingModeINTEL
  QueryPoolCreateInfoINTEL* = QueryPoolPerformanceQueryCreateInfoINTEL
  PerformanceMarkerInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    marker*: uint64
  PerformanceStreamMarkerInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    marker*: uint32
  PerformanceConfigurationAcquireInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: PerformanceConfigurationTypeINTEL
  PhysicalDeviceShaderSMBuiltinsPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    shaderSMCount*: uint32
    shaderWarpsPerSM*: uint32
  AttachmentReferenceStencilLayout*  = object
    sType*: StructureType
    pNext*: pointer
    stencilLayout*: ImageLayout
  AttachmentReferenceStencilLayoutKHR* = AttachmentReferenceStencilLayout
  AttachmentDescriptionStencilLayout*  = object
    sType*: StructureType
    pNext*: pointer
    stencilInitialLayout*: ImageLayout
    stencilFinalLayout*: ImageLayout
  AttachmentDescriptionStencilLayoutKHR* = AttachmentDescriptionStencilLayout
  PipelineInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pipeline*: Pipeline
  PipelineExecutableInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pipeline*: Pipeline
    executableIndex*: uint32
  PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    requiredSubgroupSize*: uint32
  MemoryOpaqueCaptureAddressAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64
  MemoryOpaqueCaptureAddressAllocateInfoKHR* = MemoryOpaqueCaptureAddressAllocateInfo
  DeviceMemoryOpaqueCaptureAddressInfo*  = object
    sType*: StructureType
    pNext*: pointer
    memory*: DeviceMemory
  DeviceMemoryOpaqueCaptureAddressInfoKHR* = DeviceMemoryOpaqueCaptureAddressInfo
  PhysicalDeviceLineRasterizationPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    lineSubPixelPrecisionBits*: uint32
  SamplerCustomBorderColorCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    customBorderColor*: ClearColorValue
    format*: Format
  PhysicalDeviceCustomBorderColorPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxCustomBorderColorSamplers*: uint32
  AccelerationStructureBuildOffsetInfoKHR*  = object
    primitiveCount*: uint32
    primitiveOffset*: uint32
    firstVertex*: uint32
    transformOffset*: uint32
  AabbPositionsKHR*  = object
    minX*: float32
    minY*: float32
    minZ*: float32
    maxX*: float32
    maxY*: float32
    maxZ*: float32
  AabbPositionsNV* = AabbPositionsKHR
  TransformMatrixKHR*  = object
    matrix*: array[3,array[4, float32]]
  TransformMatrixNV* = TransformMatrixKHR
  AccelerationStructureDeviceAddressInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    accelerationStructure*: AccelerationStructureKHR
  AccelerationStructureVersionKHR*  = object
    sType*: StructureType
    pNext*: pointer
    versionData*: ptr uint8
  CopyAccelerationStructureInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    src*: AccelerationStructureKHR
    dst*: AccelerationStructureKHR
    mode*: CopyAccelerationStructureModeKHR
  RayTracingPipelineInterfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    maxPayloadSize*: uint32
    maxAttributeSize*: uint32
    maxCallableSize*: uint32
  DeferredOperationInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    operationHandle*: DeferredOperationKHR
  PipelineLibraryCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    libraryCount*: uint32
    pLibraries*: ptr Pipeline
  RenderPassTransformBeginInfoQCOM*  = object
    sType*: StructureType
    pNext*: pointer
    transform*: SurfaceTransformFlagBitsKHR
  CommandBufferInheritanceRenderPassTransformInfoQCOM*  = object
    sType*: StructureType
    pNext*: pointer
    transform*: SurfaceTransformFlagBitsKHR
    renderArea*: Rect2D
  PhysicalDevicePortabilitySubsetPropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    minVertexInputBindingStrideAlignment*: uint32
  SampleMask* = distinct uint32
  Bool32* = distinct uint32
  Flags* = distinct uint32
  DeviceSize* = distinct uint64
  DeviceAddress* = distinct uint64
  FramebufferCreateFlags* {.size:4} = set[FramebufferCreateFlag]
  QueryPoolCreateFlags* {.size:4} = set[Reserved]
  RenderPassCreateFlags* {.size:4} = set[RenderPassCreateFlag]
  SamplerCreateFlags* {.size:4} = set[SamplerCreateFlag]
  PipelineLayoutCreateFlags* {.size:4} = set[Reserved]
  PipelineCacheCreateFlags* {.size:4} = set[PipelineCacheCreateFlag]
  PipelineDepthStencilStateCreateFlags* {.size:4} = set[Reserved]
  PipelineDynamicStateCreateFlags* {.size:4} = set[Reserved]
  PipelineColorBlendStateCreateFlags* {.size:4} = set[Reserved]
  PipelineMultisampleStateCreateFlags* {.size:4} = set[Reserved]
  PipelineRasterizationStateCreateFlags* {.size:4} = set[Reserved]
  PipelineViewportStateCreateFlags* {.size:4} = set[Reserved]
  PipelineTessellationStateCreateFlags* {.size:4} = set[Reserved]
  PipelineInputAssemblyStateCreateFlags* {.size:4} = set[Reserved]
  PipelineVertexInputStateCreateFlags* {.size:4} = set[Reserved]
  PipelineShaderStageCreateFlags* {.size:4} = set[PipelineShaderStageCreateFlag]
  DescriptorSetLayoutCreateFlags* {.size:4} = set[DescriptorSetLayoutCreateFlag]
  BufferViewCreateFlags* {.size:4} = set[Reserved]
  InstanceCreateFlags* {.size:4} = set[Reserved]
  DeviceCreateFlags* {.size:4} = set[Reserved]
  DeviceQueueCreateFlags* {.size:4} = set[DeviceQueueCreateFlag]
  QueueFlags* {.size:4} = set[QueueFlag]
  MemoryPropertyFlags* {.size:4} = set[MemoryPropertyFlag]
  MemoryHeapFlags* {.size:4} = set[MemoryHeapFlag]
  AccessFlags* {.size:4} = set[AccessFlag]
  BufferUsageFlags* {.size:4} = set[BufferUsageFlag]
  BufferCreateFlags* {.size:4} = set[BufferCreateFlag]
  ShaderStageFlags* {.size:4} = set[ShaderStageFlag]
  ImageUsageFlags* {.size:4} = set[ImageUsageFlag]
  ImageCreateFlags* {.size:4} = set[ImageCreateFlag]
  ImageViewCreateFlags* {.size:4} = set[ImageViewCreateFlag]
  PipelineCreateFlags* {.size:4} = set[PipelineCreateFlag]
  ColorComponentFlags* {.size:4} = set[ColorComponentFlag]
  FenceCreateFlags* {.size:4} = set[FenceCreateFlag]
  SemaphoreCreateFlags* {.size:4} = set[Reserved]
  FormatFeatureFlags* {.size:4} = set[FormatFeatureFlag]
  QueryControlFlags* {.size:4} = set[QueryControlFlag]
  QueryResultFlags* {.size:4} = set[QueryResultFlag]
  ShaderModuleCreateFlags* {.size:4} = set[Reserved]
  EventCreateFlags* {.size:4} = set[Reserved]
  CommandPoolCreateFlags* {.size:4} = set[CommandPoolCreateFlag]
  CommandPoolResetFlags* {.size:4} = set[CommandPoolResetFlag]
  CommandBufferResetFlags* {.size:4} = set[CommandBufferResetFlag]
  CommandBufferUsageFlags* {.size:4} = set[CommandBufferUsageFlag]
  QueryPipelineStatisticFlags* {.size:4} = set[QueryPipelineStatisticFlag]
  MemoryMapFlags* {.size:4} = set[Reserved]
  ImageAspectFlags* {.size:4} = set[ImageAspectFlag]
  SparseMemoryBindFlags* {.size:4} = set[SparseMemoryBindFlag]
  SparseImageFormatFlags* {.size:4} = set[SparseImageFormatFlag]
  SubpassDescriptionFlags* {.size:4} = set[SubpassDescriptionFlag]
  PipelineStageFlags* {.size:4} = set[PipelineStageFlag]
  SampleCountFlags* {.size:4} = set[SampleCountFlag]
  AttachmentDescriptionFlags* {.size:4} = set[AttachmentDescriptionFlag]
  StencilFaceFlags* {.size:4} = set[StencilFaceFlag]
  CullModeFlags* {.size:4} = set[CullModeFlag]
  DescriptorPoolCreateFlags* {.size:4} = set[DescriptorPoolCreateFlag]
  DescriptorPoolResetFlags* {.size:4} = set[Reserved]
  DependencyFlags* {.size:4} = set[DependencyFlag]
  SubgroupFeatureFlags* {.size:4} = set[SubgroupFeatureFlag]
  IndirectCommandsLayoutUsageFlagsNV* {.size:4} = set[IndirectCommandsLayoutUsageFlagNV]
  IndirectStateFlagsNV* {.size:4} = set[IndirectStateFlagNV]
  GeometryFlagsKHR* {.size:4} = set[GeometryFlagKHR]
  GeometryFlagsNV* = GeometryFlagsKHR
  GeometryInstanceFlagsKHR* {.size:4} = set[GeometryInstanceFlagKHR]
  GeometryInstanceFlagsNV* = GeometryInstanceFlagsKHR
  BuildAccelerationStructureFlagsKHR* {.size:4} = set[BuildAccelerationStructureFlagKHR]
  BuildAccelerationStructureFlagsNV* = BuildAccelerationStructureFlagsKHR
  PrivateDataSlotCreateFlagsEXT* {.size:4} = set[Reserved]
  DescriptorUpdateTemplateCreateFlags* {.size:4} = set[Reserved]
  DescriptorUpdateTemplateCreateFlagsKHR* = DescriptorUpdateTemplateCreateFlags
  PipelineCreationFeedbackFlagsEXT* {.size:4} = set[PipelineCreationFeedbackFlagEXT]
  PerformanceCounterDescriptionFlagsKHR* {.size:4} = set[PerformanceCounterDescriptionFlagKHR]
  AcquireProfilingLockFlagsKHR* {.size:4} = set[Reserved]
  SemaphoreWaitFlags* {.size:4} = set[SemaphoreWaitFlag]
  SemaphoreWaitFlagsKHR* = SemaphoreWaitFlags
  PipelineCompilerControlFlagsAMD* {.size:4} = set[Reserved]
  ShaderCorePropertiesFlagsAMD* {.size:4} = set[Reserved]
  DeviceDiagnosticsConfigFlagsNV* {.size:4} = set[DeviceDiagnosticsConfigFlagNV]
  CompositeAlphaFlagsKHR* {.size:4} = set[CompositeAlphaFlagKHR]
  DisplayPlaneAlphaFlagsKHR* {.size:4} = set[DisplayPlaneAlphaFlagKHR]
  SurfaceTransformFlagsKHR* {.size:4} = set[SurfaceTransformFlagKHR]
  SwapchainCreateFlagsKHR* {.size:4} = set[SwapchainCreateFlagKHR]
  DisplayModeCreateFlagsKHR* {.size:4} = set[Reserved]
  DisplaySurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  AndroidSurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  ViSurfaceCreateFlagsNN* {.size:4} = set[Reserved]
  WaylandSurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  Win32SurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  XlibSurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  XcbSurfaceCreateFlagsKHR* {.size:4} = set[Reserved]
  DirectFBSurfaceCreateFlagsEXT* {.size:4} = set[Reserved]
  IOSSurfaceCreateFlagsMVK* {.size:4} = set[Reserved]
  MacOSSurfaceCreateFlagsMVK* {.size:4} = set[Reserved]
  MetalSurfaceCreateFlagsEXT* {.size:4} = set[Reserved]
  ImagePipeSurfaceCreateFlagsFUCHSIA* {.size:4} = set[Reserved]
  StreamDescriptorSurfaceCreateFlagsGGP* {.size:4} = set[Reserved]
  HeadlessSurfaceCreateFlagsEXT* {.size:4} = set[Reserved]
  PeerMemoryFeatureFlags* {.size:4} = set[PeerMemoryFeatureFlag]
  PeerMemoryFeatureFlagsKHR* = PeerMemoryFeatureFlags
  MemoryAllocateFlags* {.size:4} = set[MemoryAllocateFlag]
  MemoryAllocateFlagsKHR* = MemoryAllocateFlags
  DeviceGroupPresentModeFlagsKHR* {.size:4} = set[DeviceGroupPresentModeFlagKHR]
  DebugReportFlagsEXT* {.size:4} = set[DebugReportFlagEXT]
  CommandPoolTrimFlags* {.size:4} = set[Reserved]
  CommandPoolTrimFlagsKHR* = CommandPoolTrimFlags
  ExternalMemoryHandleTypeFlagsNV* {.size:4} = set[ExternalMemoryHandleTypeFlagNV]
  ExternalMemoryFeatureFlagsNV* {.size:4} = set[ExternalMemoryFeatureFlagNV]
  ExternalMemoryHandleTypeFlags* {.size:4} = set[ExternalMemoryHandleTypeFlag]
  ExternalMemoryHandleTypeFlagsKHR* = ExternalMemoryHandleTypeFlags
  ExternalMemoryFeatureFlags* {.size:4} = set[ExternalMemoryFeatureFlag]
  ExternalMemoryFeatureFlagsKHR* = ExternalMemoryFeatureFlags
  ExternalSemaphoreHandleTypeFlags* {.size:4} = set[ExternalSemaphoreHandleTypeFlag]
  ExternalSemaphoreHandleTypeFlagsKHR* = ExternalSemaphoreHandleTypeFlags
  ExternalSemaphoreFeatureFlags* {.size:4} = set[ExternalSemaphoreFeatureFlag]
  ExternalSemaphoreFeatureFlagsKHR* = ExternalSemaphoreFeatureFlags
  SemaphoreImportFlags* {.size:4} = set[SemaphoreImportFlag]
  SemaphoreImportFlagsKHR* = SemaphoreImportFlags
  ExternalFenceHandleTypeFlags* {.size:4} = set[ExternalFenceHandleTypeFlag]
  ExternalFenceHandleTypeFlagsKHR* = ExternalFenceHandleTypeFlags
  ExternalFenceFeatureFlags* {.size:4} = set[ExternalFenceFeatureFlag]
  ExternalFenceFeatureFlagsKHR* = ExternalFenceFeatureFlags
  FenceImportFlags* {.size:4} = set[FenceImportFlag]
  FenceImportFlagsKHR* = FenceImportFlags
  SurfaceCounterFlagsEXT* {.size:4} = set[SurfaceCounterFlagEXT]
  PipelineViewportSwizzleStateCreateFlagsNV* {.size:4} = set[Reserved]
  PipelineDiscardRectangleStateCreateFlagsEXT* {.size:4} = set[Reserved]
  PipelineCoverageToColorStateCreateFlagsNV* {.size:4} = set[Reserved]
  PipelineCoverageModulationStateCreateFlagsNV* {.size:4} = set[Reserved]
  PipelineCoverageReductionStateCreateFlagsNV* {.size:4} = set[Reserved]
  ValidationCacheCreateFlagsEXT* {.size:4} = set[Reserved]
  DebugUtilsMessageSeverityFlagsEXT* {.size:4} = set[DebugUtilsMessageSeverityFlagEXT]
  DebugUtilsMessageTypeFlagsEXT* {.size:4} = set[DebugUtilsMessageTypeFlagEXT]
  DebugUtilsMessengerCreateFlagsEXT* {.size:4} = set[Reserved]
  DebugUtilsMessengerCallbackDataFlagsEXT* {.size:4} = set[Reserved]
  PipelineRasterizationConservativeStateCreateFlagsEXT* {.size:4} = set[Reserved]
  DescriptorBindingFlags* {.size:4} = set[DescriptorBindingFlag]
  DescriptorBindingFlagsEXT* = DescriptorBindingFlags
  ConditionalRenderingFlagsEXT* {.size:4} = set[ConditionalRenderingFlagEXT]
  ResolveModeFlags* {.size:4} = set[ResolveModeFlag]
  ResolveModeFlagsKHR* = ResolveModeFlags
  PipelineRasterizationStateStreamCreateFlagsEXT* {.size:4} = set[Reserved]
  PipelineRasterizationDepthClipStateCreateFlagsEXT* {.size:4} = set[Reserved]
  ToolPurposeFlagsEXT* {.size:4} = set[ToolPurposeFlagEXT]
  PFN_vkDebugReportCallbackEXT* = proc(
    flags: DebugReportFlagsEXT,
    objectType: DebugReportObjectTypeEXT,
    `object`: uint64,
    location: uint,
    messageCode: int32,
    pLayerPrefix: cstring,
    pMessage: cstring,
    pUserData: pointer,
   ): Bool32 {.cdecl.}
  DeviceQueueCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueCount*: uint32
    pQueuePriorities*: ptr float32
  InstanceCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: InstanceCreateFlags
    pApplicationInfo*: ptr ApplicationInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: ptr ptr char
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: ptr ptr char
  QueueFamilyProperties*  = object
    queueFlags*: QueueFlags
    queueCount*: uint32
    timestampValidBits*: uint32
    minImageTransferGranularity*: Extent3D
  MemoryAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    allocationSize*: DeviceSize
    memoryTypeIndex*: uint32
  MemoryRequirements*  = object
    size*: DeviceSize
    alignment*: DeviceSize
    memoryTypeBits*: uint32
  SparseImageFormatProperties*  = object
    aspectMask*: ImageAspectFlags
    imageGranularity*: Extent3D
    flags*: SparseImageFormatFlags
  SparseImageMemoryRequirements*  = object
    formatProperties*: SparseImageFormatProperties
    imageMipTailFirstLod*: uint32
    imageMipTailSize*: DeviceSize
    imageMipTailOffset*: DeviceSize
    imageMipTailStride*: DeviceSize
  MemoryType*  = object
    propertyFlags*: MemoryPropertyFlags
    heapIndex*: uint32
  MemoryHeap*  = object
    size*: DeviceSize
    flags*: MemoryHeapFlags
  MappedMemoryRange*  = object
    sType*: StructureType
    pNext*: pointer
    memory*: DeviceMemory
    offset*: DeviceSize
    size*: DeviceSize
  FormatProperties*  = object
    linearTilingFeatures*: FormatFeatureFlags
    optimalTilingFeatures*: FormatFeatureFlags
    bufferFeatures*: FormatFeatureFlags
  ImageFormatProperties*  = object
    maxExtent*: Extent3D
    maxMipLevels*: uint32
    maxArrayLayers*: uint32
    sampleCounts*: SampleCountFlags
    maxResourceSize*: DeviceSize
  DescriptorBufferInfo*  = object
    buffer*: Buffer
    offset*: DeviceSize
    range*: DeviceSize
  WriteDescriptorSet*  = object
    sType*: StructureType
    pNext*: pointer
    dstSet*: DescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: DescriptorType
    pImageInfo*: ptr DescriptorImageInfo
    pBufferInfo*: ptr DescriptorBufferInfo
    pTexelBufferView*: ptr BufferView
  BufferCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: BufferCreateFlags
    size*: DeviceSize
    usage*: BufferUsageFlags
    sharingMode*: SharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
  BufferViewCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: BufferViewCreateFlags
    buffer*: Buffer
    format*: Format
    offset*: DeviceSize
    range*: DeviceSize
  ImageSubresource*  = object
    aspectMask*: ImageAspectFlags
    mipLevel*: uint32
    arrayLayer*: uint32
  ImageSubresourceLayers*  = object
    aspectMask*: ImageAspectFlags
    mipLevel*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32
  ImageSubresourceRange*  = object
    aspectMask*: ImageAspectFlags
    baseMipLevel*: uint32
    levelCount*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32
  MemoryBarrier*  = object
    sType*: StructureType
    pNext*: pointer
    srcAccessMask*: AccessFlags
    dstAccessMask*: AccessFlags
  BufferMemoryBarrier*  = object
    sType*: StructureType
    pNext*: pointer
    srcAccessMask*: AccessFlags
    dstAccessMask*: AccessFlags
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    buffer*: Buffer
    offset*: DeviceSize
    size*: DeviceSize
  ImageMemoryBarrier*  = object
    sType*: StructureType
    pNext*: pointer
    srcAccessMask*: AccessFlags
    dstAccessMask*: AccessFlags
    oldLayout*: ImageLayout
    newLayout*: ImageLayout
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    image*: Image
    subresourceRange*: ImageSubresourceRange
  ImageCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ImageCreateFlags
    imageType*: ImageType
    format*: Format
    extent*: Extent3D
    mipLevels*: uint32
    arrayLayers*: uint32
    samples*: SampleCountFlagBits
    tiling*: ImageTiling
    usage*: ImageUsageFlags
    sharingMode*: SharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    initialLayout*: ImageLayout
  SubresourceLayout*  = object
    offset*: DeviceSize
    size*: DeviceSize
    rowPitch*: DeviceSize
    arrayPitch*: DeviceSize
    depthPitch*: DeviceSize
  ImageViewCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ImageViewCreateFlags
    image*: Image
    viewType*: ImageViewType
    format*: Format
    components*: ComponentMapping
    subresourceRange*: ImageSubresourceRange
  BufferCopy*  = object
    srcOffset*: DeviceSize
    dstOffset*: DeviceSize
    size*: DeviceSize
  SparseMemoryBind*  = object
    resourceOffset*: DeviceSize
    size*: DeviceSize
    memory*: DeviceMemory
    memoryOffset*: DeviceSize
    flags*: SparseMemoryBindFlags
  SparseImageMemoryBind*  = object
    subresource*: ImageSubresource
    offset*: Offset3D
    extent*: Extent3D
    memory*: DeviceMemory
    memoryOffset*: DeviceSize
    flags*: SparseMemoryBindFlags
  SparseBufferMemoryBindInfo*  = object
    buffer*: Buffer
    bindCount*: uint32
    pBinds*: ptr SparseMemoryBind
  SparseImageOpaqueMemoryBindInfo*  = object
    image*: Image
    bindCount*: uint32
    pBinds*: ptr SparseMemoryBind
  SparseImageMemoryBindInfo*  = object
    image*: Image
    bindCount*: uint32
    pBinds*: ptr SparseImageMemoryBind
  BindSparseInfo*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr Semaphore
    bufferBindCount*: uint32
    pBufferBinds*: ptr SparseBufferMemoryBindInfo
    imageOpaqueBindCount*: uint32
    pImageOpaqueBinds*: ptr SparseImageOpaqueMemoryBindInfo
    imageBindCount*: uint32
    pImageBinds*: ptr SparseImageMemoryBindInfo
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr Semaphore
  ImageCopy*  = object
    srcSubresource*: ImageSubresourceLayers
    srcOffset*: Offset3D
    dstSubresource*: ImageSubresourceLayers
    dstOffset*: Offset3D
    extent*: Extent3D
  ImageBlit*  = object
    srcSubresource*: ImageSubresourceLayers
    srcOffsets*: array[2,Offset3D]
    dstSubresource*: ImageSubresourceLayers
    dstOffsets*: array[2,Offset3D]
  BufferImageCopy*  = object
    bufferOffset*: DeviceSize
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: ImageSubresourceLayers
    imageOffset*: Offset3D
    imageExtent*: Extent3D
  ImageResolve*  = object
    srcSubresource*: ImageSubresourceLayers
    srcOffset*: Offset3D
    dstSubresource*: ImageSubresourceLayers
    dstOffset*: Offset3D
    extent*: Extent3D
  ShaderModuleCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ShaderModuleCreateFlags
    codeSize*: uint
    pCode*: ptr uint32
  DescriptorSetLayoutBinding*  = object
    binding*: uint32
    descriptorType*: DescriptorType
    descriptorCount*: uint32
    stageFlags*: ShaderStageFlags
    pImmutableSamplers*: ptr Sampler
  DescriptorSetLayoutCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DescriptorSetLayoutCreateFlags
    bindingCount*: uint32
    pBindings*: ptr DescriptorSetLayoutBinding
  DescriptorPoolCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DescriptorPoolCreateFlags
    maxSets*: uint32
    poolSizeCount*: uint32
    pPoolSizes*: ptr DescriptorPoolSize
  PipelineShaderStageCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineShaderStageCreateFlags
    stage*: ShaderStageFlagBits
    module*: ShaderModule
    pName*: cstring
    pSpecializationInfo*: ptr SpecializationInfo
  ComputePipelineCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCreateFlags
    stage*: PipelineShaderStageCreateInfo
    layout*: PipelineLayout
    basePipelineHandle*: Pipeline
    basePipelineIndex*: int32
  PipelineVertexInputStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineVertexInputStateCreateFlags
    vertexBindingDescriptionCount*: uint32
    pVertexBindingDescriptions*: ptr VertexInputBindingDescription
    vertexAttributeDescriptionCount*: uint32
    pVertexAttributeDescriptions*: ptr VertexInputAttributeDescription
  PipelineInputAssemblyStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineInputAssemblyStateCreateFlags
    topology*: PrimitiveTopology
    primitiveRestartEnable*: Bool32
  PipelineTessellationStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineTessellationStateCreateFlags
    patchControlPoints*: uint32
  PipelineViewportStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineViewportStateCreateFlags
    viewportCount*: uint32
    pViewports*: ptr Viewport
    scissorCount*: uint32
    pScissors*: ptr Rect2D
  PipelineRasterizationStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineRasterizationStateCreateFlags
    depthClampEnable*: Bool32
    rasterizerDiscardEnable*: Bool32
    polygonMode*: PolygonMode
    cullMode*: CullModeFlags
    frontFace*: FrontFace
    depthBiasEnable*: Bool32
    depthBiasConstantFactor*: float32
    depthBiasClamp*: float32
    depthBiasSlopeFactor*: float32
    lineWidth*: float32
  PipelineMultisampleStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineMultisampleStateCreateFlags
    rasterizationSamples*: SampleCountFlagBits
    sampleShadingEnable*: Bool32
    minSampleShading*: float32
    pSampleMask*: ptr SampleMask
    alphaToCoverageEnable*: Bool32
    alphaToOneEnable*: Bool32
  PipelineColorBlendAttachmentState*  = object
    blendEnable*: Bool32
    srcColorBlendFactor*: BlendFactor
    dstColorBlendFactor*: BlendFactor
    colorBlendOp*: BlendOp
    srcAlphaBlendFactor*: BlendFactor
    dstAlphaBlendFactor*: BlendFactor
    alphaBlendOp*: BlendOp
    colorWriteMask*: ColorComponentFlags
  PipelineColorBlendStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineColorBlendStateCreateFlags
    logicOpEnable*: Bool32
    logicOp*: LogicOp
    attachmentCount*: uint32
    pAttachments*: ptr PipelineColorBlendAttachmentState
    blendConstants*: array[4,float32]
  PipelineDynamicStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineDynamicStateCreateFlags
    dynamicStateCount*: uint32
    pDynamicStates*: ptr DynamicState
  PipelineDepthStencilStateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineDepthStencilStateCreateFlags
    depthTestEnable*: Bool32
    depthWriteEnable*: Bool32
    depthCompareOp*: CompareOp
    depthBoundsTestEnable*: Bool32
    stencilTestEnable*: Bool32
    front*: StencilOpState
    back*: StencilOpState
    minDepthBounds*: float32
    maxDepthBounds*: float32
  GraphicsPipelineCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr PipelineShaderStageCreateInfo
    pVertexInputState*: ptr PipelineVertexInputStateCreateInfo
    pInputAssemblyState*: ptr PipelineInputAssemblyStateCreateInfo
    pTessellationState*: ptr PipelineTessellationStateCreateInfo
    pViewportState*: ptr PipelineViewportStateCreateInfo
    pRasterizationState*: ptr PipelineRasterizationStateCreateInfo
    pMultisampleState*: ptr PipelineMultisampleStateCreateInfo
    pDepthStencilState*: ptr PipelineDepthStencilStateCreateInfo
    pColorBlendState*: ptr PipelineColorBlendStateCreateInfo
    pDynamicState*: ptr PipelineDynamicStateCreateInfo
    layout*: PipelineLayout
    renderPass*: RenderPass
    subpass*: uint32
    basePipelineHandle*: Pipeline
    basePipelineIndex*: int32
  PipelineCacheCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCacheCreateFlags
    initialDataSize*: uint
    pInitialData*: pointer
  PushConstantRange*  = object
    stageFlags*: ShaderStageFlags
    offset*: uint32
    size*: uint32
  PipelineLayoutCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineLayoutCreateFlags
    setLayoutCount*: uint32
    pSetLayouts*: ptr DescriptorSetLayout
    pushConstantRangeCount*: uint32
    pPushConstantRanges*: ptr PushConstantRange
  SamplerCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: SamplerCreateFlags
    magFilter*: Filter
    minFilter*: Filter
    mipmapMode*: SamplerMipmapMode
    addressModeU*: SamplerAddressMode
    addressModeV*: SamplerAddressMode
    addressModeW*: SamplerAddressMode
    mipLodBias*: float32
    anisotropyEnable*: Bool32
    maxAnisotropy*: float32
    compareEnable*: Bool32
    compareOp*: CompareOp
    minLod*: float32
    maxLod*: float32
    borderColor*: BorderColor
    unnormalizedCoordinates*: Bool32
  CommandPoolCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: CommandPoolCreateFlags
    queueFamilyIndex*: uint32
  CommandBufferInheritanceInfo*  = object
    sType*: StructureType
    pNext*: pointer
    renderPass*: RenderPass
    subpass*: uint32
    framebuffer*: Framebuffer
    occlusionQueryEnable*: Bool32
    queryFlags*: QueryControlFlags
    pipelineStatistics*: QueryPipelineStatisticFlags
  CommandBufferBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: CommandBufferUsageFlags
    pInheritanceInfo*: ptr CommandBufferInheritanceInfo
  RenderPassBeginInfo*  = object
    sType*: StructureType
    pNext*: pointer
    renderPass*: RenderPass
    framebuffer*: Framebuffer
    renderArea*: Rect2D
    clearValueCount*: uint32
    pClearValues*: ptr ClearValue
  ClearAttachment*  = object
    aspectMask*: ImageAspectFlags
    colorAttachment*: uint32
    clearValue*: ClearValue
  AttachmentDescription*  = object
    flags*: AttachmentDescriptionFlags
    format*: Format
    samples*: SampleCountFlagBits
    loadOp*: AttachmentLoadOp
    storeOp*: AttachmentStoreOp
    stencilLoadOp*: AttachmentLoadOp
    stencilStoreOp*: AttachmentStoreOp
    initialLayout*: ImageLayout
    finalLayout*: ImageLayout
  SubpassDescription*  = object
    flags*: SubpassDescriptionFlags
    pipelineBindPoint*: PipelineBindPoint
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr AttachmentReference
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr AttachmentReference
    pResolveAttachments*: ptr AttachmentReference
    pDepthStencilAttachment*: ptr AttachmentReference
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32
  SubpassDependency*  = object
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: PipelineStageFlags
    dstStageMask*: PipelineStageFlags
    srcAccessMask*: AccessFlags
    dstAccessMask*: AccessFlags
    dependencyFlags*: DependencyFlags
  RenderPassCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: RenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr AttachmentDescription
    subpassCount*: uint32
    pSubpasses*: ptr SubpassDescription
    dependencyCount*: uint32
    pDependencies*: ptr SubpassDependency
  EventCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: EventCreateFlags
  FenceCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: FenceCreateFlags
  PhysicalDeviceFeatures*  = object
    robustBufferAccess*: Bool32
    fullDrawIndexUint32*: Bool32
    imageCubeArray*: Bool32
    independentBlend*: Bool32
    geometryShader*: Bool32
    tessellationShader*: Bool32
    sampleRateShading*: Bool32
    dualSrcBlend*: Bool32
    logicOp*: Bool32
    multiDrawIndirect*: Bool32
    drawIndirectFirstInstance*: Bool32
    depthClamp*: Bool32
    depthBiasClamp*: Bool32
    fillModeNonSolid*: Bool32
    depthBounds*: Bool32
    wideLines*: Bool32
    largePoints*: Bool32
    alphaToOne*: Bool32
    multiViewport*: Bool32
    samplerAnisotropy*: Bool32
    textureCompressionETC2*: Bool32
    textureCompressionASTC_LDR*: Bool32
    textureCompressionBC*: Bool32
    occlusionQueryPrecise*: Bool32
    pipelineStatisticsQuery*: Bool32
    vertexPipelineStoresAndAtomics*: Bool32
    fragmentStoresAndAtomics*: Bool32
    shaderTessellationAndGeometryPointSize*: Bool32
    shaderImageGatherExtended*: Bool32
    shaderStorageImageExtendedFormats*: Bool32
    shaderStorageImageMultisample*: Bool32
    shaderStorageImageReadWithoutFormat*: Bool32
    shaderStorageImageWriteWithoutFormat*: Bool32
    shaderUniformBufferArrayDynamicIndexing*: Bool32
    shaderSampledImageArrayDynamicIndexing*: Bool32
    shaderStorageBufferArrayDynamicIndexing*: Bool32
    shaderStorageImageArrayDynamicIndexing*: Bool32
    shaderClipDistance*: Bool32
    shaderCullDistance*: Bool32
    shaderFloat64*: Bool32
    shaderInt64*: Bool32
    shaderInt16*: Bool32
    shaderResourceResidency*: Bool32
    shaderResourceMinLod*: Bool32
    sparseBinding*: Bool32
    sparseResidencyBuffer*: Bool32
    sparseResidencyImage2D*: Bool32
    sparseResidencyImage3D*: Bool32
    sparseResidency2Samples*: Bool32
    sparseResidency4Samples*: Bool32
    sparseResidency8Samples*: Bool32
    sparseResidency16Samples*: Bool32
    sparseResidencyAliased*: Bool32
    variableMultisampleRate*: Bool32
    inheritedQueries*: Bool32
  PhysicalDeviceSparseProperties*  = object
    residencyStandard2DBlockShape*: Bool32
    residencyStandard2DMultisampleBlockShape*: Bool32
    residencyStandard3DBlockShape*: Bool32
    residencyAlignedMipSize*: Bool32
    residencyNonResidentStrict*: Bool32
  PhysicalDeviceLimits*  = object
    maxImageDimension1D*: uint32
    maxImageDimension2D*: uint32
    maxImageDimension3D*: uint32
    maxImageDimensionCube*: uint32
    maxImageArrayLayers*: uint32
    maxTexelBufferElements*: uint32
    maxUniformBufferRange*: uint32
    maxStorageBufferRange*: uint32
    maxPushConstantsSize*: uint32
    maxMemoryAllocationCount*: uint32
    maxSamplerAllocationCount*: uint32
    bufferImageGranularity*: DeviceSize
    sparseAddressSpaceSize*: DeviceSize
    maxBoundDescriptorSets*: uint32
    maxPerStageDescriptorSamplers*: uint32
    maxPerStageDescriptorUniformBuffers*: uint32
    maxPerStageDescriptorStorageBuffers*: uint32
    maxPerStageDescriptorSampledImages*: uint32
    maxPerStageDescriptorStorageImages*: uint32
    maxPerStageDescriptorInputAttachments*: uint32
    maxPerStageResources*: uint32
    maxDescriptorSetSamplers*: uint32
    maxDescriptorSetUniformBuffers*: uint32
    maxDescriptorSetUniformBuffersDynamic*: uint32
    maxDescriptorSetStorageBuffers*: uint32
    maxDescriptorSetStorageBuffersDynamic*: uint32
    maxDescriptorSetSampledImages*: uint32
    maxDescriptorSetStorageImages*: uint32
    maxDescriptorSetInputAttachments*: uint32
    maxVertexInputAttributes*: uint32
    maxVertexInputBindings*: uint32
    maxVertexInputAttributeOffset*: uint32
    maxVertexInputBindingStride*: uint32
    maxVertexOutputComponents*: uint32
    maxTessellationGenerationLevel*: uint32
    maxTessellationPatchSize*: uint32
    maxTessellationControlPerVertexInputComponents*: uint32
    maxTessellationControlPerVertexOutputComponents*: uint32
    maxTessellationControlPerPatchOutputComponents*: uint32
    maxTessellationControlTotalOutputComponents*: uint32
    maxTessellationEvaluationInputComponents*: uint32
    maxTessellationEvaluationOutputComponents*: uint32
    maxGeometryShaderInvocations*: uint32
    maxGeometryInputComponents*: uint32
    maxGeometryOutputComponents*: uint32
    maxGeometryOutputVertices*: uint32
    maxGeometryTotalOutputComponents*: uint32
    maxFragmentInputComponents*: uint32
    maxFragmentOutputAttachments*: uint32
    maxFragmentDualSrcAttachments*: uint32
    maxFragmentCombinedOutputResources*: uint32
    maxComputeSharedMemorySize*: uint32
    maxComputeWorkGroupCount*: array[3,uint32]
    maxComputeWorkGroupInvocations*: uint32
    maxComputeWorkGroupSize*: array[3,uint32]
    subPixelPrecisionBits*: uint32
    subTexelPrecisionBits*: uint32
    mipmapPrecisionBits*: uint32
    maxDrawIndexedIndexValue*: uint32
    maxDrawIndirectCount*: uint32
    maxSamplerLodBias*: float32
    maxSamplerAnisotropy*: float32
    maxViewports*: uint32
    maxViewportDimensions*: array[2,uint32]
    viewportBoundsRange*: array[2,float32]
    viewportSubPixelBits*: uint32
    minMemoryMapAlignment*: uint
    minTexelBufferOffsetAlignment*: DeviceSize
    minUniformBufferOffsetAlignment*: DeviceSize
    minStorageBufferOffsetAlignment*: DeviceSize
    minTexelOffset*: int32
    maxTexelOffset*: uint32
    minTexelGatherOffset*: int32
    maxTexelGatherOffset*: uint32
    minInterpolationOffset*: float32
    maxInterpolationOffset*: float32
    subPixelInterpolationOffsetBits*: uint32
    maxFramebufferWidth*: uint32
    maxFramebufferHeight*: uint32
    maxFramebufferLayers*: uint32
    framebufferColorSampleCounts*: SampleCountFlags
    framebufferDepthSampleCounts*: SampleCountFlags
    framebufferStencilSampleCounts*: SampleCountFlags
    framebufferNoAttachmentsSampleCounts*: SampleCountFlags
    maxColorAttachments*: uint32
    sampledImageColorSampleCounts*: SampleCountFlags
    sampledImageIntegerSampleCounts*: SampleCountFlags
    sampledImageDepthSampleCounts*: SampleCountFlags
    sampledImageStencilSampleCounts*: SampleCountFlags
    storageImageSampleCounts*: SampleCountFlags
    maxSampleMaskWords*: uint32
    timestampComputeAndGraphics*: Bool32
    timestampPeriod*: float32
    maxClipDistances*: uint32
    maxCullDistances*: uint32
    maxCombinedClipAndCullDistances*: uint32
    discreteQueuePriorities*: uint32
    pointSizeRange*: array[2,float32]
    lineWidthRange*: array[2,float32]
    pointSizeGranularity*: float32
    lineWidthGranularity*: float32
    strictLines*: Bool32
    standardSampleLocations*: Bool32
    optimalBufferCopyOffsetAlignment*: DeviceSize
    optimalBufferCopyRowPitchAlignment*: DeviceSize
    nonCoherentAtomSize*: DeviceSize
  SemaphoreCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: SemaphoreCreateFlags
  QueryPoolCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: QueryPoolCreateFlags
    queryType*: QueryType
    queryCount*: uint32
    pipelineStatistics*: QueryPipelineStatisticFlags
  FramebufferCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: FramebufferCreateFlags
    renderPass*: RenderPass
    attachmentCount*: uint32
    pAttachments*: ptr ImageView
    width*: uint32
    height*: uint32
    layers*: uint32
  SubmitInfo*  = object
    sType*: StructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr Semaphore
    pWaitDstStageMask*: ptr PipelineStageFlags
    commandBufferCount*: uint32
    pCommandBuffers*: ptr CommandBuffer
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr Semaphore
  DisplayPropertiesKHR*  = object
    display*: DisplayKHR
    displayName*: cstring
    physicalDimensions*: Extent2D
    physicalResolution*: Extent2D
    supportedTransforms*: SurfaceTransformFlagsKHR
    planeReorderPossible*: Bool32
    persistentContent*: Bool32
  DisplayModeCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DisplayModeCreateFlagsKHR
    parameters*: DisplayModeParametersKHR
  DisplayPlaneCapabilitiesKHR*  = object
    supportedAlpha*: DisplayPlaneAlphaFlagsKHR
    minSrcPosition*: Offset2D
    maxSrcPosition*: Offset2D
    minSrcExtent*: Extent2D
    maxSrcExtent*: Extent2D
    minDstPosition*: Offset2D
    maxDstPosition*: Offset2D
    minDstExtent*: Extent2D
    maxDstExtent*: Extent2D
  DisplaySurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DisplaySurfaceCreateFlagsKHR
    displayMode*: DisplayModeKHR
    planeIndex*: uint32
    planeStackIndex*: uint32
    transform*: SurfaceTransformFlagBitsKHR
    globalAlpha*: float32
    alphaMode*: DisplayPlaneAlphaFlagBitsKHR
    imageExtent*: Extent2D
  DisplayPresentInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcRect*: Rect2D
    dstRect*: Rect2D
    persistent*: Bool32
  SurfaceCapabilitiesKHR*  = object
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: Extent2D
    minImageExtent*: Extent2D
    maxImageExtent*: Extent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: SurfaceTransformFlagsKHR
    currentTransform*: SurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: CompositeAlphaFlagsKHR
    supportedUsageFlags*: ImageUsageFlags
  AndroidSurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: AndroidSurfaceCreateFlagsKHR
    window*: ptr ANativeWindow
  ViSurfaceCreateInfoNN*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ViSurfaceCreateFlagsNN
    window*: pointer
  WaylandSurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: WaylandSurfaceCreateFlagsKHR
    display*: ptr wl_display
    surface*: ptr wl_surface
  Win32SurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: Win32SurfaceCreateFlagsKHR
    hinstance*: HINSTANCE
    hwnd*: HWND
  XlibSurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: XlibSurfaceCreateFlagsKHR
    dpy*: ptr Display
    window*: Window
  XcbSurfaceCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: XcbSurfaceCreateFlagsKHR
    connection*: ptr xcb_connection_t
    window*: xcb_window_t
  DirectFBSurfaceCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DirectFBSurfaceCreateFlagsEXT
    dfb*: ptr IDirectFB
    surface*: ptr IDirectFBSurface
  ImagePipeSurfaceCreateInfoFUCHSIA*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ImagePipeSurfaceCreateFlagsFUCHSIA
    imagePipeHandle*: zx_handle_t
  StreamDescriptorSurfaceCreateInfoGGP*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: StreamDescriptorSurfaceCreateFlagsGGP
    streamDescriptor*: GgpStreamDescriptor
  SwapchainCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: SwapchainCreateFlagsKHR
    surface*: SurfaceKHR
    minImageCount*: uint32
    imageFormat*: Format
    imageColorSpace*: ColorSpaceKHR
    imageExtent*: Extent2D
    imageArrayLayers*: uint32
    imageUsage*: ImageUsageFlags
    imageSharingMode*: SharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    preTransform*: SurfaceTransformFlagBitsKHR
    compositeAlpha*: CompositeAlphaFlagBitsKHR
    presentMode*: PresentModeKHR
    clipped*: Bool32
    oldSwapchain*: SwapchainKHR
  DebugReportCallbackCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DebugReportFlagsEXT
    pfnCallback*: PFN_vkDebugReportCallbackEXT
    pUserData*: pointer
  DedicatedAllocationImageCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    dedicatedAllocation*: Bool32
  DedicatedAllocationBufferCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    dedicatedAllocation*: Bool32
  ExternalImageFormatPropertiesNV*  = object
    imageFormatProperties*: ImageFormatProperties
    externalMemoryFeatures*: ExternalMemoryFeatureFlagsNV
    exportFromImportedHandleTypes*: ExternalMemoryHandleTypeFlagsNV
    compatibleHandleTypes*: ExternalMemoryHandleTypeFlagsNV
  ExternalMemoryImageCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalMemoryHandleTypeFlagsNV
  ExportMemoryAllocateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalMemoryHandleTypeFlagsNV
  ImportMemoryWin32HandleInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    handleType*: ExternalMemoryHandleTypeFlagsNV
    handle*: HANDLE
  PhysicalDeviceDeviceGeneratedCommandsFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    deviceGeneratedCommands*: Bool32
  PrivateDataSlotCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PrivateDataSlotCreateFlagsEXT
  PhysicalDevicePrivateDataFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    privateData*: Bool32
  GraphicsShaderGroupCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    stageCount*: uint32
    pStages*: ptr PipelineShaderStageCreateInfo
    pVertexInputState*: ptr PipelineVertexInputStateCreateInfo
    pTessellationState*: ptr PipelineTessellationStateCreateInfo
  GraphicsPipelineShaderGroupsCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    groupCount*: uint32
    pGroups*: ptr GraphicsShaderGroupCreateInfoNV
    pipelineCount*: uint32
    pPipelines*: ptr Pipeline
  BindIndexBufferIndirectCommandNV*  = object
    bufferAddress*: DeviceAddress
    size*: uint32
    indexType*: IndexType
  BindVertexBufferIndirectCommandNV*  = object
    bufferAddress*: DeviceAddress
    size*: uint32
    stride*: uint32
  IndirectCommandsStreamNV*  = object
    buffer*: Buffer
    offset*: DeviceSize
  IndirectCommandsLayoutTokenNV*  = object
    sType*: StructureType
    pNext*: pointer
    tokenType*: IndirectCommandsTokenTypeNV
    stream*: uint32
    offset*: uint32
    vertexBindingUnit*: uint32
    vertexDynamicStride*: Bool32
    pushconstantPipelineLayout*: PipelineLayout
    pushconstantShaderStageFlags*: ShaderStageFlags
    pushconstantOffset*: uint32
    pushconstantSize*: uint32
    indirectStateFlags*: IndirectStateFlagsNV
    indexTypeCount*: uint32
    pIndexTypes*: ptr IndexType
    pIndexTypeValues*: ptr uint32
  IndirectCommandsLayoutCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: IndirectCommandsLayoutUsageFlagsNV
    pipelineBindPoint*: PipelineBindPoint
    tokenCount*: uint32
    pTokens*: ptr IndirectCommandsLayoutTokenNV
    streamCount*: uint32
    pStreamStrides*: ptr uint32
  GeneratedCommandsInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    pipelineBindPoint*: PipelineBindPoint
    pipeline*: Pipeline
    indirectCommandsLayout*: IndirectCommandsLayoutNV
    streamCount*: uint32
    pStreams*: ptr IndirectCommandsStreamNV
    sequencesCount*: uint32
    preprocessBuffer*: Buffer
    preprocessOffset*: DeviceSize
    preprocessSize*: DeviceSize
    sequencesCountBuffer*: Buffer
    sequencesCountOffset*: DeviceSize
    sequencesIndexBuffer*: Buffer
    sequencesIndexOffset*: DeviceSize
  PhysicalDeviceFeatures2*  = object
    sType*: StructureType
    pNext*: pointer
    features*: PhysicalDeviceFeatures
  PhysicalDeviceFeatures2KHR* = PhysicalDeviceFeatures2
  FormatProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    formatProperties*: FormatProperties
  FormatProperties2KHR* = FormatProperties2
  ImageFormatProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    imageFormatProperties*: ImageFormatProperties
  ImageFormatProperties2KHR* = ImageFormatProperties2
  PhysicalDeviceImageFormatInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    format*: Format
    `type`*: ImageType
    tiling*: ImageTiling
    usage*: ImageUsageFlags
    flags*: ImageCreateFlags
  PhysicalDeviceImageFormatInfo2KHR* = PhysicalDeviceImageFormatInfo2
  QueueFamilyProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    queueFamilyProperties*: QueueFamilyProperties
  QueueFamilyProperties2KHR* = QueueFamilyProperties2
  SparseImageFormatProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    properties*: SparseImageFormatProperties
  SparseImageFormatProperties2KHR* = SparseImageFormatProperties2
  PhysicalDeviceSparseImageFormatInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    format*: Format
    `type`*: ImageType
    samples*: SampleCountFlagBits
    usage*: ImageUsageFlags
    tiling*: ImageTiling
  PhysicalDeviceSparseImageFormatInfo2KHR* = PhysicalDeviceSparseImageFormatInfo2
  PresentRegionKHR*  = object
    rectangleCount*: uint32
    pRectangles*: ptr RectLayerKHR
  PhysicalDeviceVariablePointersFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    variablePointersStorageBuffer*: Bool32
    variablePointers*: Bool32
  PhysicalDeviceVariablePointersFeaturesKHR* = PhysicalDeviceVariablePointersFeatures
  PhysicalDeviceVariablePointerFeaturesKHR* = PhysicalDeviceVariablePointersFeatures
  PhysicalDeviceVariablePointerFeatures* = PhysicalDeviceVariablePointersFeatures
  ExternalMemoryProperties*  = object
    externalMemoryFeatures*: ExternalMemoryFeatureFlags
    exportFromImportedHandleTypes*: ExternalMemoryHandleTypeFlags
    compatibleHandleTypes*: ExternalMemoryHandleTypeFlags
  ExternalMemoryPropertiesKHR* = ExternalMemoryProperties
  ExternalImageFormatProperties*  = object
    sType*: StructureType
    pNext*: pointer
    externalMemoryProperties*: ExternalMemoryProperties
  ExternalImageFormatPropertiesKHR* = ExternalImageFormatProperties
  PhysicalDeviceExternalBufferInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: BufferCreateFlags
    usage*: BufferUsageFlags
    handleType*: ExternalMemoryHandleTypeFlagBits
  PhysicalDeviceExternalBufferInfoKHR* = PhysicalDeviceExternalBufferInfo
  ExternalBufferProperties*  = object
    sType*: StructureType
    pNext*: pointer
    externalMemoryProperties*: ExternalMemoryProperties
  ExternalBufferPropertiesKHR* = ExternalBufferProperties
  PhysicalDeviceIDProperties*  = object
    sType*: StructureType
    pNext*: pointer
    deviceUUID*: array[UUID_SIZE,uint8]
    driverUUID*: array[UUID_SIZE,uint8]
    deviceLUID*: array[LUID_SIZE,uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: Bool32
  PhysicalDeviceIDPropertiesKHR* = PhysicalDeviceIDProperties
  ExternalMemoryImageCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalMemoryHandleTypeFlags
  ExternalMemoryImageCreateInfoKHR* = ExternalMemoryImageCreateInfo
  ExternalMemoryBufferCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalMemoryHandleTypeFlags
  ExternalMemoryBufferCreateInfoKHR* = ExternalMemoryBufferCreateInfo
  ExportMemoryAllocateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalMemoryHandleTypeFlags
  ExportMemoryAllocateInfoKHR* = ExportMemoryAllocateInfo
  ExternalSemaphoreProperties*  = object
    sType*: StructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: ExternalSemaphoreHandleTypeFlags
    compatibleHandleTypes*: ExternalSemaphoreHandleTypeFlags
    externalSemaphoreFeatures*: ExternalSemaphoreFeatureFlags
  ExternalSemaphorePropertiesKHR* = ExternalSemaphoreProperties
  ExportSemaphoreCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalSemaphoreHandleTypeFlags
  ExportSemaphoreCreateInfoKHR* = ExportSemaphoreCreateInfo
  ImportSemaphoreWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    semaphore*: Semaphore
    flags*: SemaphoreImportFlags
    handleType*: ExternalSemaphoreHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR
  ImportSemaphoreFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    semaphore*: Semaphore
    flags*: SemaphoreImportFlags
    handleType*: ExternalSemaphoreHandleTypeFlagBits
    fd*: cint
  ExternalFenceProperties*  = object
    sType*: StructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: ExternalFenceHandleTypeFlags
    compatibleHandleTypes*: ExternalFenceHandleTypeFlags
    externalFenceFeatures*: ExternalFenceFeatureFlags
  ExternalFencePropertiesKHR* = ExternalFenceProperties
  ExportFenceCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    handleTypes*: ExternalFenceHandleTypeFlags
  ExportFenceCreateInfoKHR* = ExportFenceCreateInfo
  ImportFenceWin32HandleInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    fence*: Fence
    flags*: FenceImportFlags
    handleType*: ExternalFenceHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR
  ImportFenceFdInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    fence*: Fence
    flags*: FenceImportFlags
    handleType*: ExternalFenceHandleTypeFlagBits
    fd*: cint
  PhysicalDeviceMultiviewFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    multiview*: Bool32
    multiviewGeometryShader*: Bool32
    multiviewTessellationShader*: Bool32
  PhysicalDeviceMultiviewFeaturesKHR* = PhysicalDeviceMultiviewFeatures
  SurfaceCapabilities2EXT*  = object
    sType*: StructureType
    pNext*: pointer
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: Extent2D
    minImageExtent*: Extent2D
    maxImageExtent*: Extent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: SurfaceTransformFlagsKHR
    currentTransform*: SurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: CompositeAlphaFlagsKHR
    supportedUsageFlags*: ImageUsageFlags
    supportedSurfaceCounters*: SurfaceCounterFlagsEXT
  SwapchainCounterCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    surfaceCounters*: SurfaceCounterFlagsEXT
  PhysicalDeviceGroupProperties*  = object
    sType*: StructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    physicalDevices*: array[MAX_DEVICE_GROUP_SIZE,PhysicalDevice]
    subsetAllocation*: Bool32
  PhysicalDeviceGroupPropertiesKHR* = PhysicalDeviceGroupProperties
  MemoryAllocateFlagsInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: MemoryAllocateFlags
    deviceMask*: uint32
  MemoryAllocateFlagsInfoKHR* = MemoryAllocateFlagsInfo
  BindBufferMemoryInfo*  = object
    sType*: StructureType
    pNext*: pointer
    buffer*: Buffer
    memory*: DeviceMemory
    memoryOffset*: DeviceSize
  BindBufferMemoryInfoKHR* = BindBufferMemoryInfo
  BindImageMemoryInfo*  = object
    sType*: StructureType
    pNext*: pointer
    image*: Image
    memory*: DeviceMemory
    memoryOffset*: DeviceSize
  BindImageMemoryInfoKHR* = BindImageMemoryInfo
  DeviceGroupPresentCapabilitiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    presentMask*: array[MAX_DEVICE_GROUP_SIZE,uint32]
    modes*: DeviceGroupPresentModeFlagsKHR
  DeviceGroupSwapchainCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    modes*: DeviceGroupPresentModeFlagsKHR
  DescriptorUpdateTemplateCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DescriptorUpdateTemplateCreateFlags
    descriptorUpdateEntryCount*: uint32
    pDescriptorUpdateEntries*: ptr DescriptorUpdateTemplateEntry
    templateType*: DescriptorUpdateTemplateType
    descriptorSetLayout*: DescriptorSetLayout
    pipelineBindPoint*: PipelineBindPoint
    pipelineLayout*: PipelineLayout
    set*: uint32
  DescriptorUpdateTemplateCreateInfoKHR* = DescriptorUpdateTemplateCreateInfo
  DisplayNativeHdrSurfaceCapabilitiesAMD*  = object
    sType*: StructureType
    pNext*: pointer
    localDimmingSupport*: Bool32
  SwapchainDisplayNativeHdrCreateInfoAMD*  = object
    sType*: StructureType
    pNext*: pointer
    localDimmingEnable*: Bool32
  PresentTimesInfoGOOGLE*  = object
    sType*: StructureType
    pNext*: pointer
    swapchainCount*: uint32
    pTimes*: ptr PresentTimeGOOGLE
  IOSSurfaceCreateInfoMVK*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: IOSSurfaceCreateFlagsMVK
    pView*: pointer
  MacOSSurfaceCreateInfoMVK*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: MacOSSurfaceCreateFlagsMVK
    pView*: pointer
  MetalSurfaceCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: MetalSurfaceCreateFlagsEXT
    pLayer*: ptr CAMetalLayer
  PipelineViewportWScalingStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    viewportWScalingEnable*: Bool32
    viewportCount*: uint32
    pViewportWScalings*: ptr ViewportWScalingNV
  PipelineViewportSwizzleStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineViewportSwizzleStateCreateFlagsNV
    viewportCount*: uint32
    pViewportSwizzles*: ptr ViewportSwizzleNV
  PipelineDiscardRectangleStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineDiscardRectangleStateCreateFlagsEXT
    discardRectangleMode*: DiscardRectangleModeEXT
    discardRectangleCount*: uint32
    pDiscardRectangles*: ptr Rect2D
  PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*  = object
    sType*: StructureType
    pNext*: pointer
    perViewPositionAllComponents*: Bool32
  InputAttachmentAspectReference*  = object
    subpass*: uint32
    inputAttachmentIndex*: uint32
    aspectMask*: ImageAspectFlags
  InputAttachmentAspectReferenceKHR* = InputAttachmentAspectReference
  RenderPassInputAttachmentAspectCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    aspectReferenceCount*: uint32
    pAspectReferences*: ptr InputAttachmentAspectReference
  RenderPassInputAttachmentAspectCreateInfoKHR* = RenderPassInputAttachmentAspectCreateInfo
  SurfaceCapabilities2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    surfaceCapabilities*: SurfaceCapabilitiesKHR
  DisplayProperties2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    displayProperties*: DisplayPropertiesKHR
  DisplayPlaneCapabilities2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    capabilities*: DisplayPlaneCapabilitiesKHR
  SharedPresentSurfaceCapabilitiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    sharedPresentSupportedUsageFlags*: ImageUsageFlags
  PhysicalDevice16BitStorageFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    storageBuffer16BitAccess*: Bool32
    uniformAndStorageBuffer16BitAccess*: Bool32
    storagePushConstant16*: Bool32
    storageInputOutput16*: Bool32
  PhysicalDevice16BitStorageFeaturesKHR* = PhysicalDevice16BitStorageFeatures
  PhysicalDeviceSubgroupProperties*  = object
    sType*: StructureType
    pNext*: pointer
    subgroupSize*: uint32
    supportedStages*: ShaderStageFlags
    supportedOperations*: SubgroupFeatureFlags
    quadOperationsInAllStages*: Bool32
  PhysicalDeviceShaderSubgroupExtendedTypesFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    shaderSubgroupExtendedTypes*: Bool32
  PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR* = PhysicalDeviceShaderSubgroupExtendedTypesFeatures
  MemoryRequirements2*  = object
    sType*: StructureType
    pNext*: pointer
    memoryRequirements*: MemoryRequirements
  MemoryRequirements2KHR* = MemoryRequirements2
  SparseImageMemoryRequirements2*  = object
    sType*: StructureType
    pNext*: pointer
    memoryRequirements*: SparseImageMemoryRequirements
  SparseImageMemoryRequirements2KHR* = SparseImageMemoryRequirements2
  MemoryDedicatedRequirements*  = object
    sType*: StructureType
    pNext*: pointer
    prefersDedicatedAllocation*: Bool32
    requiresDedicatedAllocation*: Bool32
  MemoryDedicatedRequirementsKHR* = MemoryDedicatedRequirements
  ImageViewUsageCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    usage*: ImageUsageFlags
  ImageViewUsageCreateInfoKHR* = ImageViewUsageCreateInfo
  SamplerYcbcrConversionCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    format*: Format
    ycbcrModel*: SamplerYcbcrModelConversion
    ycbcrRange*: SamplerYcbcrRange
    components*: ComponentMapping
    xChromaOffset*: ChromaLocation
    yChromaOffset*: ChromaLocation
    chromaFilter*: Filter
    forceExplicitReconstruction*: Bool32
  SamplerYcbcrConversionCreateInfoKHR* = SamplerYcbcrConversionCreateInfo
  PhysicalDeviceSamplerYcbcrConversionFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    samplerYcbcrConversion*: Bool32
  PhysicalDeviceSamplerYcbcrConversionFeaturesKHR* = PhysicalDeviceSamplerYcbcrConversionFeatures
  TextureLODGatherFormatPropertiesAMD*  = object
    sType*: StructureType
    pNext*: pointer
    supportsTextureGatherLODBiasAMD*: Bool32
  ConditionalRenderingBeginInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    buffer*: Buffer
    offset*: DeviceSize
    flags*: ConditionalRenderingFlagsEXT
  ProtectedSubmitInfo*  = object
    sType*: StructureType
    pNext*: pointer
    protectedSubmit*: Bool32
  PhysicalDeviceProtectedMemoryFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    protectedMemory*: Bool32
  PhysicalDeviceProtectedMemoryProperties*  = object
    sType*: StructureType
    pNext*: pointer
    protectedNoFault*: Bool32
  DeviceQueueInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueIndex*: uint32
  PipelineCoverageToColorStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCoverageToColorStateCreateFlagsNV
    coverageToColorEnable*: Bool32
    coverageToColorLocation*: uint32
  PhysicalDeviceSamplerFilterMinmaxProperties*  = object
    sType*: StructureType
    pNext*: pointer
    filterMinmaxSingleComponentFormats*: Bool32
    filterMinmaxImageComponentMapping*: Bool32
  PhysicalDeviceSamplerFilterMinmaxPropertiesEXT* = PhysicalDeviceSamplerFilterMinmaxProperties
  PipelineSampleLocationsStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    sampleLocationsEnable*: Bool32
    sampleLocationsInfo*: SampleLocationsInfoEXT
  PhysicalDeviceSampleLocationsPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    sampleLocationSampleCounts*: SampleCountFlags
    maxSampleLocationGridSize*: Extent2D
    sampleLocationCoordinateRange*: array[2,float32]
    sampleLocationSubPixelBits*: uint32
    variableSampleLocations*: Bool32
  PhysicalDeviceBlendOperationAdvancedFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    advancedBlendCoherentOperations*: Bool32
  PhysicalDeviceBlendOperationAdvancedPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    advancedBlendMaxColorAttachments*: uint32
    advancedBlendIndependentBlend*: Bool32
    advancedBlendNonPremultipliedSrcColor*: Bool32
    advancedBlendNonPremultipliedDstColor*: Bool32
    advancedBlendCorrelatedOverlap*: Bool32
    advancedBlendAllOperations*: Bool32
  PipelineColorBlendAdvancedStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    srcPremultiplied*: Bool32
    dstPremultiplied*: Bool32
    blendOverlap*: BlendOverlapEXT
  PhysicalDeviceInlineUniformBlockFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    inlineUniformBlock*: Bool32
    descriptorBindingInlineUniformBlockUpdateAfterBind*: Bool32
  PipelineCoverageModulationStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCoverageModulationStateCreateFlagsNV
    coverageModulationMode*: CoverageModulationModeNV
    coverageModulationTableEnable*: Bool32
    coverageModulationTableCount*: uint32
    pCoverageModulationTable*: ptr float32
  ValidationCacheCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ValidationCacheCreateFlagsEXT
    initialDataSize*: uint
    pInitialData*: pointer
  PhysicalDeviceMaintenance3Properties*  = object
    sType*: StructureType
    pNext*: pointer
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: DeviceSize
  PhysicalDeviceMaintenance3PropertiesKHR* = PhysicalDeviceMaintenance3Properties
  DescriptorSetLayoutSupport*  = object
    sType*: StructureType
    pNext*: pointer
    supported*: Bool32
  DescriptorSetLayoutSupportKHR* = DescriptorSetLayoutSupport
  PhysicalDeviceShaderDrawParametersFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    shaderDrawParameters*: Bool32
  PhysicalDeviceShaderDrawParameterFeatures* = PhysicalDeviceShaderDrawParametersFeatures
  PhysicalDeviceShaderFloat16Int8Features*  = object
    sType*: StructureType
    pNext*: pointer
    shaderFloat16*: Bool32
    shaderInt8*: Bool32
  PhysicalDeviceShaderFloat16Int8FeaturesKHR* = PhysicalDeviceShaderFloat16Int8Features
  PhysicalDeviceFloat16Int8FeaturesKHR* = PhysicalDeviceShaderFloat16Int8Features
  PhysicalDeviceFloatControlsProperties*  = object
    sType*: StructureType
    pNext*: pointer
    denormBehaviorIndependence*: ShaderFloatControlsIndependence
    roundingModeIndependence*: ShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: Bool32
    shaderSignedZeroInfNanPreserveFloat32*: Bool32
    shaderSignedZeroInfNanPreserveFloat64*: Bool32
    shaderDenormPreserveFloat16*: Bool32
    shaderDenormPreserveFloat32*: Bool32
    shaderDenormPreserveFloat64*: Bool32
    shaderDenormFlushToZeroFloat16*: Bool32
    shaderDenormFlushToZeroFloat32*: Bool32
    shaderDenormFlushToZeroFloat64*: Bool32
    shaderRoundingModeRTEFloat16*: Bool32
    shaderRoundingModeRTEFloat32*: Bool32
    shaderRoundingModeRTEFloat64*: Bool32
    shaderRoundingModeRTZFloat16*: Bool32
    shaderRoundingModeRTZFloat32*: Bool32
    shaderRoundingModeRTZFloat64*: Bool32
  PhysicalDeviceFloatControlsPropertiesKHR* = PhysicalDeviceFloatControlsProperties
  PhysicalDeviceHostQueryResetFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    hostQueryReset*: Bool32
  PhysicalDeviceHostQueryResetFeaturesEXT* = PhysicalDeviceHostQueryResetFeatures
  ShaderStatisticsInfoAMD*  = object
    shaderStageMask*: ShaderStageFlags
    resourceUsage*: ShaderResourceUsageAMD
    numPhysicalVgprs*: uint32
    numPhysicalSgprs*: uint32
    numAvailableVgprs*: uint32
    numAvailableSgprs*: uint32
    computeWorkGroupSize*: array[3,uint32]
  DebugUtilsMessengerCallbackDataEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DebugUtilsMessengerCallbackDataFlagsEXT
    pMessageIdName*: cstring
    messageIdNumber*: int32
    pMessage*: cstring
    queueLabelCount*: uint32
    pQueueLabels*: ptr DebugUtilsLabelEXT
    cmdBufLabelCount*: uint32
    pCmdBufLabels*: ptr DebugUtilsLabelEXT
    objectCount*: uint32
    pObjects*: ptr DebugUtilsObjectNameInfoEXT
  PhysicalDeviceExternalMemoryHostPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    minImportedHostPointerAlignment*: DeviceSize
  PhysicalDeviceConservativeRasterizationPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    primitiveOverestimationSize*: float32
    maxExtraPrimitiveOverestimationSize*: float32
    extraPrimitiveOverestimationSizeGranularity*: float32
    primitiveUnderestimation*: Bool32
    conservativePointAndLineRasterization*: Bool32
    degenerateTrianglesRasterized*: Bool32
    degenerateLinesRasterized*: Bool32
    fullyCoveredFragmentShaderInputVariable*: Bool32
    conservativeRasterizationPostDepthCoverage*: Bool32
  PhysicalDeviceShaderCoreProperties2AMD*  = object
    sType*: StructureType
    pNext*: pointer
    shaderCoreFeatures*: ShaderCorePropertiesFlagsAMD
    activeComputeUnitCount*: uint32
  PipelineRasterizationConservativeStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineRasterizationConservativeStateCreateFlagsEXT
    conservativeRasterizationMode*: ConservativeRasterizationModeEXT
    extraPrimitiveOverestimationSize*: float32
  PhysicalDeviceDescriptorIndexingFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    shaderInputAttachmentArrayDynamicIndexing*: Bool32
    shaderUniformTexelBufferArrayDynamicIndexing*: Bool32
    shaderStorageTexelBufferArrayDynamicIndexing*: Bool32
    shaderUniformBufferArrayNonUniformIndexing*: Bool32
    shaderSampledImageArrayNonUniformIndexing*: Bool32
    shaderStorageBufferArrayNonUniformIndexing*: Bool32
    shaderStorageImageArrayNonUniformIndexing*: Bool32
    shaderInputAttachmentArrayNonUniformIndexing*: Bool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: Bool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: Bool32
    descriptorBindingUniformBufferUpdateAfterBind*: Bool32
    descriptorBindingSampledImageUpdateAfterBind*: Bool32
    descriptorBindingStorageImageUpdateAfterBind*: Bool32
    descriptorBindingStorageBufferUpdateAfterBind*: Bool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: Bool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: Bool32
    descriptorBindingUpdateUnusedWhilePending*: Bool32
    descriptorBindingPartiallyBound*: Bool32
    descriptorBindingVariableDescriptorCount*: Bool32
    runtimeDescriptorArray*: Bool32
  PhysicalDeviceDescriptorIndexingFeaturesEXT* = PhysicalDeviceDescriptorIndexingFeatures
  PhysicalDeviceDescriptorIndexingProperties*  = object
    sType*: StructureType
    pNext*: pointer
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: Bool32
    shaderSampledImageArrayNonUniformIndexingNative*: Bool32
    shaderStorageBufferArrayNonUniformIndexingNative*: Bool32
    shaderStorageImageArrayNonUniformIndexingNative*: Bool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: Bool32
    robustBufferAccessUpdateAfterBind*: Bool32
    quadDivergentImplicitLod*: Bool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32
  PhysicalDeviceDescriptorIndexingPropertiesEXT* = PhysicalDeviceDescriptorIndexingProperties
  DescriptorSetLayoutBindingFlagsCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    bindingCount*: uint32
    pBindingFlags*: ptr DescriptorBindingFlags
  DescriptorSetLayoutBindingFlagsCreateInfoEXT* = DescriptorSetLayoutBindingFlagsCreateInfo
  AttachmentDescription2*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: AttachmentDescriptionFlags
    format*: Format
    samples*: SampleCountFlagBits
    loadOp*: AttachmentLoadOp
    storeOp*: AttachmentStoreOp
    stencilLoadOp*: AttachmentLoadOp
    stencilStoreOp*: AttachmentStoreOp
    initialLayout*: ImageLayout
    finalLayout*: ImageLayout
  AttachmentDescription2KHR* = AttachmentDescription2
  AttachmentReference2*  = object
    sType*: StructureType
    pNext*: pointer
    attachment*: uint32
    layout*: ImageLayout
    aspectMask*: ImageAspectFlags
  AttachmentReference2KHR* = AttachmentReference2
  SubpassDescription2*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: SubpassDescriptionFlags
    pipelineBindPoint*: PipelineBindPoint
    viewMask*: uint32
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr AttachmentReference2
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr AttachmentReference2
    pResolveAttachments*: ptr AttachmentReference2
    pDepthStencilAttachment*: ptr AttachmentReference2
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32
  SubpassDescription2KHR* = SubpassDescription2
  SubpassDependency2*  = object
    sType*: StructureType
    pNext*: pointer
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: PipelineStageFlags
    dstStageMask*: PipelineStageFlags
    srcAccessMask*: AccessFlags
    dstAccessMask*: AccessFlags
    dependencyFlags*: DependencyFlags
    viewOffset*: int32
  SubpassDependency2KHR* = SubpassDependency2
  RenderPassCreateInfo2*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: RenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr AttachmentDescription2
    subpassCount*: uint32
    pSubpasses*: ptr SubpassDescription2
    dependencyCount*: uint32
    pDependencies*: ptr SubpassDependency2
    correlatedViewMaskCount*: uint32
    pCorrelatedViewMasks*: ptr uint32
  RenderPassCreateInfo2KHR* = RenderPassCreateInfo2
  PhysicalDeviceTimelineSemaphoreFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    timelineSemaphore*: Bool32
  PhysicalDeviceTimelineSemaphoreFeaturesKHR* = PhysicalDeviceTimelineSemaphoreFeatures
  SemaphoreWaitInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: SemaphoreWaitFlags
    semaphoreCount*: uint32
    pSemaphores*: ptr Semaphore
    pValues*: ptr uint64
  SemaphoreWaitInfoKHR* = SemaphoreWaitInfo
  AndroidHardwareBufferPropertiesANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    allocationSize*: DeviceSize
    memoryTypeBits*: uint32
  AndroidHardwareBufferFormatPropertiesANDROID*  = object
    sType*: StructureType
    pNext*: pointer
    format*: Format
    externalFormat*: uint64
    formatFeatures*: FormatFeatureFlags
    samplerYcbcrConversionComponents*: ComponentMapping
    suggestedYcbcrModel*: SamplerYcbcrModelConversion
    suggestedYcbcrRange*: SamplerYcbcrRange
    suggestedXChromaOffset*: ChromaLocation
    suggestedYChromaOffset*: ChromaLocation
  CommandBufferInheritanceConditionalRenderingInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    conditionalRenderingEnable*: Bool32
  PhysicalDevice8BitStorageFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    storageBuffer8BitAccess*: Bool32
    uniformAndStorageBuffer8BitAccess*: Bool32
    storagePushConstant8*: Bool32
  PhysicalDevice8BitStorageFeaturesKHR* = PhysicalDevice8BitStorageFeatures
  PhysicalDeviceConditionalRenderingFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    conditionalRendering*: Bool32
    inheritedConditionalRendering*: Bool32
  PhysicalDeviceVulkanMemoryModelFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    vulkanMemoryModel*: Bool32
    vulkanMemoryModelDeviceScope*: Bool32
    vulkanMemoryModelAvailabilityVisibilityChains*: Bool32
  PhysicalDeviceVulkanMemoryModelFeaturesKHR* = PhysicalDeviceVulkanMemoryModelFeatures
  PhysicalDeviceShaderAtomicInt64Features*  = object
    sType*: StructureType
    pNext*: pointer
    shaderBufferInt64Atomics*: Bool32
    shaderSharedInt64Atomics*: Bool32
  PhysicalDeviceShaderAtomicInt64FeaturesKHR* = PhysicalDeviceShaderAtomicInt64Features
  PhysicalDeviceShaderAtomicFloatFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    shaderBufferFloat32Atomics*: Bool32
    shaderBufferFloat32AtomicAdd*: Bool32
    shaderBufferFloat64Atomics*: Bool32
    shaderBufferFloat64AtomicAdd*: Bool32
    shaderSharedFloat32Atomics*: Bool32
    shaderSharedFloat32AtomicAdd*: Bool32
    shaderSharedFloat64Atomics*: Bool32
    shaderSharedFloat64AtomicAdd*: Bool32
    shaderImageFloat32Atomics*: Bool32
    shaderImageFloat32AtomicAdd*: Bool32
    sparseImageFloat32Atomics*: Bool32
    sparseImageFloat32AtomicAdd*: Bool32
  PhysicalDeviceVertexAttributeDivisorFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    vertexAttributeInstanceRateDivisor*: Bool32
    vertexAttributeInstanceRateZeroDivisor*: Bool32
  QueueFamilyCheckpointPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    checkpointExecutionStageMask*: PipelineStageFlags
  PhysicalDeviceDepthStencilResolveProperties*  = object
    sType*: StructureType
    pNext*: pointer
    supportedDepthResolveModes*: ResolveModeFlags
    supportedStencilResolveModes*: ResolveModeFlags
    independentResolveNone*: Bool32
    independentResolve*: Bool32
  PhysicalDeviceDepthStencilResolvePropertiesKHR* = PhysicalDeviceDepthStencilResolveProperties
  SubpassDescriptionDepthStencilResolve*  = object
    sType*: StructureType
    pNext*: pointer
    depthResolveMode*: ResolveModeFlagBits
    stencilResolveMode*: ResolveModeFlagBits
    pDepthStencilResolveAttachment*: ptr AttachmentReference2
  SubpassDescriptionDepthStencilResolveKHR* = SubpassDescriptionDepthStencilResolve
  PhysicalDeviceASTCDecodeFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    decodeModeSharedExponent*: Bool32
  PhysicalDeviceTransformFeedbackFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    transformFeedback*: Bool32
    geometryStreams*: Bool32
  PhysicalDeviceTransformFeedbackPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    maxTransformFeedbackStreams*: uint32
    maxTransformFeedbackBuffers*: uint32
    maxTransformFeedbackBufferSize*: DeviceSize
    maxTransformFeedbackStreamDataSize*: uint32
    maxTransformFeedbackBufferDataSize*: uint32
    maxTransformFeedbackBufferDataStride*: uint32
    transformFeedbackQueries*: Bool32
    transformFeedbackStreamsLinesTriangles*: Bool32
    transformFeedbackRasterizationStreamSelect*: Bool32
    transformFeedbackDraw*: Bool32
  PipelineRasterizationStateStreamCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineRasterizationStateStreamCreateFlagsEXT
    rasterizationStream*: uint32
  PhysicalDeviceRepresentativeFragmentTestFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    representativeFragmentTest*: Bool32
  PipelineRepresentativeFragmentTestStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    representativeFragmentTestEnable*: Bool32
  PhysicalDeviceExclusiveScissorFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    exclusiveScissor*: Bool32
  PhysicalDeviceCornerSampledImageFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    cornerSampledImage*: Bool32
  PhysicalDeviceComputeShaderDerivativesFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    computeDerivativeGroupQuads*: Bool32
    computeDerivativeGroupLinear*: Bool32
  PhysicalDeviceFragmentShaderBarycentricFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    fragmentShaderBarycentric*: Bool32
  PhysicalDeviceShaderImageFootprintFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    imageFootprint*: Bool32
  PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    dedicatedAllocationImageAliasing*: Bool32
  PipelineViewportShadingRateImageStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    shadingRateImageEnable*: Bool32
    viewportCount*: uint32
    pShadingRatePalettes*: ptr ShadingRatePaletteNV
  PhysicalDeviceShadingRateImageFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    shadingRateImage*: Bool32
    shadingRateCoarseSampleOrder*: Bool32
  PhysicalDeviceMeshShaderFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    taskShader*: Bool32
    meshShader*: Bool32
  RayTracingPipelineCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr PipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr RayTracingShaderGroupCreateInfoNV
    maxRecursionDepth*: uint32
    layout*: PipelineLayout
    basePipelineHandle*: Pipeline
    basePipelineIndex*: int32
  RayTracingPipelineCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr PipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr RayTracingShaderGroupCreateInfoKHR
    maxRecursionDepth*: uint32
    libraries*: PipelineLibraryCreateInfoKHR
    pLibraryInterface*: ptr RayTracingPipelineInterfaceCreateInfoKHR
    layout*: PipelineLayout
    basePipelineHandle*: Pipeline
    basePipelineIndex*: int32
  GeometryTrianglesNV*  = object
    sType*: StructureType
    pNext*: pointer
    vertexData*: Buffer
    vertexOffset*: DeviceSize
    vertexCount*: uint32
    vertexStride*: DeviceSize
    vertexFormat*: Format
    indexData*: Buffer
    indexOffset*: DeviceSize
    indexCount*: uint32
    indexType*: IndexType
    transformData*: Buffer
    transformOffset*: DeviceSize
  GeometryAABBNV*  = object
    sType*: StructureType
    pNext*: pointer
    aabbData*: Buffer
    numAABBs*: uint32
    stride*: uint32
    offset*: DeviceSize
  GeometryDataNV*  = object
    triangles*: GeometryTrianglesNV
    aabbs*: GeometryAABBNV
  GeometryNV*  = object
    sType*: StructureType
    pNext*: pointer
    geometryType*: GeometryTypeKHR
    geometry*: GeometryDataNV
    flags*: GeometryFlagsKHR
  AccelerationStructureInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: AccelerationStructureTypeNV
    flags*: BuildAccelerationStructureFlagsNV
    instanceCount*: uint32
    geometryCount*: uint32
    pGeometries*: ptr GeometryNV
  AccelerationStructureCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    compactedSize*: DeviceSize
    info*: AccelerationStructureInfoNV
  BindAccelerationStructureMemoryInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    accelerationStructure*: AccelerationStructureKHR
    memory*: DeviceMemory
    memoryOffset*: DeviceSize
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32
  BindAccelerationStructureMemoryInfoNV* = BindAccelerationStructureMemoryInfoKHR
  PhysicalDeviceRayTracingFeaturesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    rayTracing*: Bool32
    rayTracingShaderGroupHandleCaptureReplay*: Bool32
    rayTracingShaderGroupHandleCaptureReplayMixed*: Bool32
    rayTracingAccelerationStructureCaptureReplay*: Bool32
    rayTracingIndirectTraceRays*: Bool32
    rayTracingIndirectAccelerationStructureBuild*: Bool32
    rayTracingHostAccelerationStructureCommands*: Bool32
    rayQuery*: Bool32
    rayTracingPrimitiveCulling*: Bool32
  StridedBufferRegionKHR*  = object
    buffer*: Buffer
    offset*: DeviceSize
    stride*: DeviceSize
    size*: DeviceSize
  DrmFormatModifierPropertiesEXT*  = object
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    drmFormatModifierTilingFeatures*: FormatFeatureFlags
  ImageDrmFormatModifierExplicitCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    pPlaneLayouts*: ptr SubresourceLayout
  ImageStencilUsageCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    stencilUsage*: ImageUsageFlags
  ImageStencilUsageCreateInfoEXT* = ImageStencilUsageCreateInfo
  PhysicalDeviceFragmentDensityMapFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fragmentDensityMap*: Bool32
    fragmentDensityMapDynamic*: Bool32
    fragmentDensityMapNonSubsampledImages*: Bool32
  PhysicalDeviceFragmentDensityMap2FeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fragmentDensityMapDeferred*: Bool32
  PhysicalDeviceFragmentDensityMapPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    minFragmentDensityTexelSize*: Extent2D
    maxFragmentDensityTexelSize*: Extent2D
    fragmentDensityInvocations*: Bool32
  PhysicalDeviceFragmentDensityMap2PropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    subsampledLoads*: Bool32
    subsampledCoarseReconstructionEarlyAccess*: Bool32
    maxSubsampledArrayLayers*: uint32
    maxDescriptorSetSubsampledSamplers*: uint32
  PhysicalDeviceScalarBlockLayoutFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    scalarBlockLayout*: Bool32
  PhysicalDeviceScalarBlockLayoutFeaturesEXT* = PhysicalDeviceScalarBlockLayoutFeatures
  SurfaceProtectedCapabilitiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    supportsProtected*: Bool32
  PhysicalDeviceUniformBufferStandardLayoutFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    uniformBufferStandardLayout*: Bool32
  PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR* = PhysicalDeviceUniformBufferStandardLayoutFeatures
  PhysicalDeviceDepthClipEnableFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    depthClipEnable*: Bool32
  PipelineRasterizationDepthClipStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineRasterizationDepthClipStateCreateFlagsEXT
    depthClipEnable*: Bool32
  PhysicalDeviceMemoryBudgetPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    heapBudget*: array[MAX_MEMORY_HEAPS,DeviceSize]
    heapUsage*: array[MAX_MEMORY_HEAPS,DeviceSize]
  PhysicalDeviceMemoryPriorityFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    memoryPriority*: Bool32
  PhysicalDeviceBufferDeviceAddressFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    bufferDeviceAddress*: Bool32
    bufferDeviceAddressCaptureReplay*: Bool32
    bufferDeviceAddressMultiDevice*: Bool32
  PhysicalDeviceBufferDeviceAddressFeaturesKHR* = PhysicalDeviceBufferDeviceAddressFeatures
  PhysicalDeviceBufferDeviceAddressFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    bufferDeviceAddress*: Bool32
    bufferDeviceAddressCaptureReplay*: Bool32
    bufferDeviceAddressMultiDevice*: Bool32
  PhysicalDeviceBufferAddressFeaturesEXT* = PhysicalDeviceBufferDeviceAddressFeaturesEXT
  BufferDeviceAddressCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    deviceAddress*: DeviceAddress
  FilterCubicImageViewImageFormatPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    filterCubic*: Bool32
    filterCubicMinmax*: Bool32
  PhysicalDeviceImagelessFramebufferFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    imagelessFramebuffer*: Bool32
  PhysicalDeviceImagelessFramebufferFeaturesKHR* = PhysicalDeviceImagelessFramebufferFeatures
  FramebufferAttachmentImageInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: ImageCreateFlags
    usage*: ImageUsageFlags
    width*: uint32
    height*: uint32
    layerCount*: uint32
    viewFormatCount*: uint32
    pViewFormats*: ptr Format
  FramebufferAttachmentImageInfoKHR* = FramebufferAttachmentImageInfo
  PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    textureCompressionASTC_HDR*: Bool32
  PhysicalDeviceCooperativeMatrixFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    cooperativeMatrix*: Bool32
    cooperativeMatrixRobustBufferAccess*: Bool32
  PhysicalDeviceCooperativeMatrixPropertiesNV*  = object
    sType*: StructureType
    pNext*: pointer
    cooperativeMatrixSupportedStages*: ShaderStageFlags
  PhysicalDeviceYcbcrImageArraysFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    ycbcrImageArrays*: Bool32
  ImageViewAddressPropertiesNVX*  = object
    sType*: StructureType
    pNext*: pointer
    deviceAddress*: DeviceAddress
    size*: DeviceSize
  PipelineCreationFeedbackEXT*  = object
    flags*: PipelineCreationFeedbackFlagsEXT
    duration*: uint64
  PipelineCreationFeedbackCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    pPipelineCreationFeedback*: ptr PipelineCreationFeedbackEXT
    pipelineStageCreationFeedbackCount*: uint32
    pPipelineStageCreationFeedbacks*: ptr PipelineCreationFeedbackEXT
  SurfaceCapabilitiesFullScreenExclusiveEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fullScreenExclusiveSupported*: Bool32
  PhysicalDevicePerformanceQueryFeaturesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    performanceCounterQueryPools*: Bool32
    performanceCounterMultipleQueryPools*: Bool32
  PhysicalDevicePerformanceQueryPropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    allowCommandBufferQueryCopies*: Bool32
  PerformanceCounterDescriptionKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PerformanceCounterDescriptionFlagsKHR
    name*: array[MAX_DESCRIPTION_SIZE,char]
    category*: array[MAX_DESCRIPTION_SIZE,char]
    description*: array[MAX_DESCRIPTION_SIZE,char]
  AcquireProfilingLockInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: AcquireProfilingLockFlagsKHR
    timeout*: uint64
  HeadlessSurfaceCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: HeadlessSurfaceCreateFlagsEXT
  PhysicalDeviceCoverageReductionModeFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    coverageReductionMode*: Bool32
  PipelineCoverageReductionStateCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: PipelineCoverageReductionStateCreateFlagsNV
    coverageReductionMode*: CoverageReductionModeNV
  FramebufferMixedSamplesCombinationNV*  = object
    sType*: StructureType
    pNext*: pointer
    coverageReductionMode*: CoverageReductionModeNV
    rasterizationSamples*: SampleCountFlagBits
    depthStencilSamples*: SampleCountFlags
    colorSamples*: SampleCountFlags
  PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    shaderIntegerFunctions2*: Bool32
  PerformanceValueDataINTEL* {.union.} = object
    value32*: uint32
    value64*: uint64
    valueFloat*: float32
    valueBool*: Bool32
    valueString*: cstring
  PerformanceValueINTEL*  = object
    `type`*: PerformanceValueTypeINTEL
    data*: PerformanceValueDataINTEL
  PerformanceOverrideInfoINTEL*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: PerformanceOverrideTypeINTEL
    enable*: Bool32
    parameter*: uint64
  PhysicalDeviceShaderClockFeaturesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    shaderSubgroupClock*: Bool32
    shaderDeviceClock*: Bool32
  PhysicalDeviceIndexTypeUint8FeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    indexTypeUint8*: Bool32
  PhysicalDeviceShaderSMBuiltinsFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    shaderSMBuiltins*: Bool32
  PhysicalDeviceFragmentShaderInterlockFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    fragmentShaderSampleInterlock*: Bool32
    fragmentShaderPixelInterlock*: Bool32
    fragmentShaderShadingRateInterlock*: Bool32
  PhysicalDeviceSeparateDepthStencilLayoutsFeatures*  = object
    sType*: StructureType
    pNext*: pointer
    separateDepthStencilLayouts*: Bool32
  PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR* = PhysicalDeviceSeparateDepthStencilLayoutsFeatures
  PhysicalDevicePipelineExecutablePropertiesFeaturesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    pipelineExecutableInfo*: Bool32
  PipelineExecutablePropertiesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    stages*: ShaderStageFlags
    name*: array[MAX_DESCRIPTION_SIZE,char]
    description*: array[MAX_DESCRIPTION_SIZE,char]
    subgroupSize*: uint32
  PipelineExecutableStatisticValueKHR* {.union.} = object
    b32*: Bool32
    i64*: int64
    u64*: uint64
    f64*: float64
  PipelineExecutableStatisticKHR*  = object
    sType*: StructureType
    pNext*: pointer
    name*: array[MAX_DESCRIPTION_SIZE,char]
    description*: array[MAX_DESCRIPTION_SIZE,char]
    format*: PipelineExecutableStatisticFormatKHR
    value*: PipelineExecutableStatisticValueKHR
  PipelineExecutableInternalRepresentationKHR*  = object
    sType*: StructureType
    pNext*: pointer
    name*: array[MAX_DESCRIPTION_SIZE,char]
    description*: array[MAX_DESCRIPTION_SIZE,char]
    isText*: Bool32
    dataSize*: uint
    pData*: pointer
  PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    shaderDemoteToHelperInvocation*: Bool32
  PhysicalDeviceTexelBufferAlignmentFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    texelBufferAlignment*: Bool32
  PhysicalDeviceTexelBufferAlignmentPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    storageTexelBufferOffsetAlignmentBytes*: DeviceSize
    storageTexelBufferOffsetSingleTexelAlignment*: Bool32
    uniformTexelBufferOffsetAlignmentBytes*: DeviceSize
    uniformTexelBufferOffsetSingleTexelAlignment*: Bool32
  PhysicalDeviceSubgroupSizeControlFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    subgroupSizeControl*: Bool32
    computeFullSubgroups*: Bool32
  PhysicalDeviceSubgroupSizeControlPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    minSubgroupSize*: uint32
    maxSubgroupSize*: uint32
    maxComputeWorkgroupSubgroups*: uint32
    requiredSubgroupSizeStages*: ShaderStageFlags
  PhysicalDeviceLineRasterizationFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    rectangularLines*: Bool32
    bresenhamLines*: Bool32
    smoothLines*: Bool32
    stippledRectangularLines*: Bool32
    stippledBresenhamLines*: Bool32
    stippledSmoothLines*: Bool32
  PipelineRasterizationLineStateCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    lineRasterizationMode*: LineRasterizationModeEXT
    stippledLineEnable*: Bool32
    lineStippleFactor*: uint32
    lineStipplePattern*: uint16
  PhysicalDevicePipelineCreationCacheControlFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    pipelineCreationCacheControl*: Bool32
  PhysicalDeviceVulkan11Features*  = object
    sType*: StructureType
    pNext*: pointer
    storageBuffer16BitAccess*: Bool32
    uniformAndStorageBuffer16BitAccess*: Bool32
    storagePushConstant16*: Bool32
    storageInputOutput16*: Bool32
    multiview*: Bool32
    multiviewGeometryShader*: Bool32
    multiviewTessellationShader*: Bool32
    variablePointersStorageBuffer*: Bool32
    variablePointers*: Bool32
    protectedMemory*: Bool32
    samplerYcbcrConversion*: Bool32
    shaderDrawParameters*: Bool32
  PhysicalDeviceVulkan11Properties*  = object
    sType*: StructureType
    pNext*: pointer
    deviceUUID*: array[UUID_SIZE,uint8]
    driverUUID*: array[UUID_SIZE,uint8]
    deviceLUID*: array[LUID_SIZE,uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: Bool32
    subgroupSize*: uint32
    subgroupSupportedStages*: ShaderStageFlags
    subgroupSupportedOperations*: SubgroupFeatureFlags
    subgroupQuadOperationsInAllStages*: Bool32
    pointClippingBehavior*: PointClippingBehavior
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32
    protectedNoFault*: Bool32
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: DeviceSize
  PhysicalDeviceVulkan12Features*  = object
    sType*: StructureType
    pNext*: pointer
    samplerMirrorClampToEdge*: Bool32
    drawIndirectCount*: Bool32
    storageBuffer8BitAccess*: Bool32
    uniformAndStorageBuffer8BitAccess*: Bool32
    storagePushConstant8*: Bool32
    shaderBufferInt64Atomics*: Bool32
    shaderSharedInt64Atomics*: Bool32
    shaderFloat16*: Bool32
    shaderInt8*: Bool32
    descriptorIndexing*: Bool32
    shaderInputAttachmentArrayDynamicIndexing*: Bool32
    shaderUniformTexelBufferArrayDynamicIndexing*: Bool32
    shaderStorageTexelBufferArrayDynamicIndexing*: Bool32
    shaderUniformBufferArrayNonUniformIndexing*: Bool32
    shaderSampledImageArrayNonUniformIndexing*: Bool32
    shaderStorageBufferArrayNonUniformIndexing*: Bool32
    shaderStorageImageArrayNonUniformIndexing*: Bool32
    shaderInputAttachmentArrayNonUniformIndexing*: Bool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: Bool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: Bool32
    descriptorBindingUniformBufferUpdateAfterBind*: Bool32
    descriptorBindingSampledImageUpdateAfterBind*: Bool32
    descriptorBindingStorageImageUpdateAfterBind*: Bool32
    descriptorBindingStorageBufferUpdateAfterBind*: Bool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: Bool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: Bool32
    descriptorBindingUpdateUnusedWhilePending*: Bool32
    descriptorBindingPartiallyBound*: Bool32
    descriptorBindingVariableDescriptorCount*: Bool32
    runtimeDescriptorArray*: Bool32
    samplerFilterMinmax*: Bool32
    scalarBlockLayout*: Bool32
    imagelessFramebuffer*: Bool32
    uniformBufferStandardLayout*: Bool32
    shaderSubgroupExtendedTypes*: Bool32
    separateDepthStencilLayouts*: Bool32
    hostQueryReset*: Bool32
    timelineSemaphore*: Bool32
    bufferDeviceAddress*: Bool32
    bufferDeviceAddressCaptureReplay*: Bool32
    bufferDeviceAddressMultiDevice*: Bool32
    vulkanMemoryModel*: Bool32
    vulkanMemoryModelDeviceScope*: Bool32
    vulkanMemoryModelAvailabilityVisibilityChains*: Bool32
    shaderOutputViewportIndex*: Bool32
    shaderOutputLayer*: Bool32
    subgroupBroadcastDynamicId*: Bool32
  PhysicalDeviceVulkan12Properties*  = object
    sType*: StructureType
    pNext*: pointer
    driverID*: DriverId
    driverName*: array[MAX_DRIVER_NAME_SIZE,char]
    driverInfo*: array[MAX_DRIVER_INFO_SIZE,char]
    conformanceVersion*: ConformanceVersion
    denormBehaviorIndependence*: ShaderFloatControlsIndependence
    roundingModeIndependence*: ShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: Bool32
    shaderSignedZeroInfNanPreserveFloat32*: Bool32
    shaderSignedZeroInfNanPreserveFloat64*: Bool32
    shaderDenormPreserveFloat16*: Bool32
    shaderDenormPreserveFloat32*: Bool32
    shaderDenormPreserveFloat64*: Bool32
    shaderDenormFlushToZeroFloat16*: Bool32
    shaderDenormFlushToZeroFloat32*: Bool32
    shaderDenormFlushToZeroFloat64*: Bool32
    shaderRoundingModeRTEFloat16*: Bool32
    shaderRoundingModeRTEFloat32*: Bool32
    shaderRoundingModeRTEFloat64*: Bool32
    shaderRoundingModeRTZFloat16*: Bool32
    shaderRoundingModeRTZFloat32*: Bool32
    shaderRoundingModeRTZFloat64*: Bool32
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: Bool32
    shaderSampledImageArrayNonUniformIndexingNative*: Bool32
    shaderStorageBufferArrayNonUniformIndexingNative*: Bool32
    shaderStorageImageArrayNonUniformIndexingNative*: Bool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: Bool32
    robustBufferAccessUpdateAfterBind*: Bool32
    quadDivergentImplicitLod*: Bool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32
    supportedDepthResolveModes*: ResolveModeFlags
    supportedStencilResolveModes*: ResolveModeFlags
    independentResolveNone*: Bool32
    independentResolve*: Bool32
    filterMinmaxSingleComponentFormats*: Bool32
    filterMinmaxImageComponentMapping*: Bool32
    maxTimelineSemaphoreValueDifference*: uint64
    framebufferIntegerColorSampleCounts*: SampleCountFlags
  PipelineCompilerControlCreateInfoAMD*  = object
    sType*: StructureType
    pNext*: pointer
    compilerControlFlags*: PipelineCompilerControlFlagsAMD
  PhysicalDeviceCoherentMemoryFeaturesAMD*  = object
    sType*: StructureType
    pNext*: pointer
    deviceCoherentMemory*: Bool32
  PhysicalDeviceToolPropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    name*: array[MAX_EXTENSION_NAME_SIZE,char]
    version*: array[MAX_EXTENSION_NAME_SIZE,char]
    purposes*: ToolPurposeFlagsEXT
    description*: array[MAX_DESCRIPTION_SIZE,char]
    layer*: array[MAX_EXTENSION_NAME_SIZE,char]
  PhysicalDeviceCustomBorderColorFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    customBorderColors*: Bool32
    customBorderColorWithoutFormat*: Bool32
  DeviceOrHostAddressKHR* {.union.} = object
    deviceAddress*: DeviceAddress
    hostAddress*: pointer
  DeviceOrHostAddressConstKHR* {.union.} = object
    deviceAddress*: DeviceAddress
    hostAddress*: pointer
  AccelerationStructureGeometryTrianglesDataKHR*  = object
    sType*: StructureType
    pNext*: pointer
    vertexFormat*: Format
    vertexData*: DeviceOrHostAddressConstKHR
    vertexStride*: DeviceSize
    indexType*: IndexType
    indexData*: DeviceOrHostAddressConstKHR
    transformData*: DeviceOrHostAddressConstKHR
  AccelerationStructureGeometryAabbsDataKHR*  = object
    sType*: StructureType
    pNext*: pointer
    data*: DeviceOrHostAddressConstKHR
    stride*: DeviceSize
  AccelerationStructureGeometryInstancesDataKHR*  = object
    sType*: StructureType
    pNext*: pointer
    arrayOfPointers*: Bool32
    data*: DeviceOrHostAddressConstKHR
  AccelerationStructureGeometryDataKHR* {.union.} = object
    triangles*: AccelerationStructureGeometryTrianglesDataKHR
    aabbs*: AccelerationStructureGeometryAabbsDataKHR
    instances*: AccelerationStructureGeometryInstancesDataKHR
  AccelerationStructureGeometryKHR*  = object
    sType*: StructureType
    pNext*: pointer
    geometryType*: GeometryTypeKHR
    geometry*: AccelerationStructureGeometryDataKHR
    flags*: GeometryFlagsKHR
  AccelerationStructureBuildGeometryInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    `type`*: AccelerationStructureTypeKHR
    flags*: BuildAccelerationStructureFlagsKHR
    update*: Bool32
    srcAccelerationStructure*: AccelerationStructureKHR
    dstAccelerationStructure*: AccelerationStructureKHR
    geometryArrayOfPointers*: Bool32
    geometryCount*: uint32
    ppGeometries*: ptr ptr AccelerationStructureGeometryKHR
    scratchData*: DeviceOrHostAddressKHR
  AccelerationStructureCreateGeometryTypeInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    geometryType*: GeometryTypeKHR
    maxPrimitiveCount*: uint32
    indexType*: IndexType
    maxVertexCount*: uint32
    vertexFormat*: Format
    allowsTransforms*: Bool32
  AccelerationStructureCreateInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    compactedSize*: DeviceSize
    `type`*: AccelerationStructureTypeKHR
    flags*: BuildAccelerationStructureFlagsKHR
    maxGeometryCount*: uint32
    pGeometryInfos*: ptr AccelerationStructureCreateGeometryTypeInfoKHR
    deviceAddress*: DeviceAddress
  AccelerationStructureInstanceKHR*  = object
    transform*: TransformMatrixKHR
    instanceCustomIndex*: uint32
    mask*: uint32
    instanceShaderBindingTableRecordOffset*: uint32
    flags*: GeometryInstanceFlagsKHR
    accelerationStructureReference*: uint64
  AccelerationStructureInstanceNV* = AccelerationStructureInstanceKHR
  CopyAccelerationStructureToMemoryInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    src*: AccelerationStructureKHR
    dst*: DeviceOrHostAddressKHR
    mode*: CopyAccelerationStructureModeKHR
  CopyMemoryToAccelerationStructureInfoKHR*  = object
    sType*: StructureType
    pNext*: pointer
    src*: DeviceOrHostAddressConstKHR
    dst*: AccelerationStructureKHR
    mode*: CopyAccelerationStructureModeKHR
  PhysicalDeviceExtendedDynamicStateFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    extendedDynamicState*: Bool32
  PhysicalDeviceDiagnosticsConfigFeaturesNV*  = object
    sType*: StructureType
    pNext*: pointer
    diagnosticsConfig*: Bool32
  DeviceDiagnosticsConfigCreateInfoNV*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DeviceDiagnosticsConfigFlagsNV
  PhysicalDeviceRobustness2FeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    robustBufferAccess2*: Bool32
    robustImageAccess2*: Bool32
    nullDescriptor*: Bool32
  PhysicalDeviceRobustness2PropertiesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    robustStorageBufferAccessSizeAlignment*: DeviceSize
    robustUniformBufferAccessSizeAlignment*: DeviceSize
  PhysicalDeviceImageRobustnessFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    robustImageAccess*: Bool32
  PhysicalDevicePortabilitySubsetFeaturesKHR*  = object
    sType*: StructureType
    pNext*: pointer
    constantAlphaColorBlendFactors*: Bool32
    events*: Bool32
    imageViewFormatReinterpretation*: Bool32
    imageViewFormatSwizzle*: Bool32
    imageView2DOn3DImage*: Bool32
    multisampleArrayImage*: Bool32
    mutableComparisonSamplers*: Bool32
    pointPolygons*: Bool32
    samplerMipLodBias*: Bool32
    separateStencilMaskRef*: Bool32
    shaderSampleRateInterpolationFunctions*: Bool32
    tessellationIsolines*: Bool32
    tessellationPointMode*: Bool32
    triangleFans*: Bool32
    vertexAttributeAccessBeyondStride*: Bool32
  PhysicalDevice4444FormatsFeaturesEXT*  = object
    sType*: StructureType
    pNext*: pointer
    formatA4R4G4B4*: Bool32
    formatA4B4G4R4*: Bool32
  BufferCopy2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcOffset*: DeviceSize
    dstOffset*: DeviceSize
    size*: DeviceSize
  ImageCopy2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcSubresource*: ImageSubresourceLayers
    srcOffset*: Offset3D
    dstSubresource*: ImageSubresourceLayers
    dstOffset*: Offset3D
    extent*: Extent3D
  ImageBlit2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcSubresource*: ImageSubresourceLayers
    srcOffsets*: array[2,Offset3D]
    dstSubresource*: ImageSubresourceLayers
    dstOffsets*: array[2,Offset3D]
  BufferImageCopy2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    bufferOffset*: DeviceSize
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: ImageSubresourceLayers
    imageOffset*: Offset3D
    imageExtent*: Extent3D
  ImageResolve2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcSubresource*: ImageSubresourceLayers
    srcOffset*: Offset3D
    dstSubresource*: ImageSubresourceLayers
    dstOffset*: Offset3D
    extent*: Extent3D
  CopyBufferInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcBuffer*: Buffer
    dstBuffer*: Buffer
    regionCount*: uint32
    pRegions*: ptr BufferCopy2KHR
  CopyImageInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcImage*: Image
    srcImageLayout*: ImageLayout
    dstImage*: Image
    dstImageLayout*: ImageLayout
    regionCount*: uint32
    pRegions*: ptr ImageCopy2KHR
  BlitImageInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcImage*: Image
    srcImageLayout*: ImageLayout
    dstImage*: Image
    dstImageLayout*: ImageLayout
    regionCount*: uint32
    pRegions*: ptr ImageBlit2KHR
    filter*: Filter
  CopyBufferToImageInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcBuffer*: Buffer
    dstImage*: Image
    dstImageLayout*: ImageLayout
    regionCount*: uint32
    pRegions*: ptr BufferImageCopy2KHR
  CopyImageToBufferInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcImage*: Image
    srcImageLayout*: ImageLayout
    dstBuffer*: Buffer
    regionCount*: uint32
    pRegions*: ptr BufferImageCopy2KHR
  ResolveImageInfo2KHR*  = object
    sType*: StructureType
    pNext*: pointer
    srcImage*: Image
    srcImageLayout*: ImageLayout
    dstImage*: Image
    dstImageLayout*: ImageLayout
    regionCount*: uint32
    pRegions*: ptr ImageResolve2KHR
  PFN_vkDebugUtilsMessengerCallbackEXT* = proc(
    messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT,
    messageTypes: DebugUtilsMessageTypeFlagsEXT,
    pCallbackData: ptr DebugUtilsMessengerCallbackDataEXT,
    pUserData: pointer,
   ): Bool32 {.cdecl.}
  PhysicalDeviceProperties*  = object
    apiVersion*: uint32
    driverVersion*: uint32
    vendorID*: uint32
    deviceID*: uint32
    deviceType*: PhysicalDeviceType
    deviceName*: array[MAX_PHYSICAL_DEVICE_NAME_SIZE,char]
    pipelineCacheUUID*: array[UUID_SIZE,uint8]
    limits*: PhysicalDeviceLimits
    sparseProperties*: PhysicalDeviceSparseProperties
  DeviceCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DeviceCreateFlags
    queueCreateInfoCount*: uint32
    pQueueCreateInfos*: ptr DeviceQueueCreateInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: ptr ptr char
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: ptr ptr char
    pEnabledFeatures*: ptr PhysicalDeviceFeatures
  PhysicalDeviceMemoryProperties*  = object
    memoryTypeCount*: uint32
    memoryTypes*: array[MAX_MEMORY_TYPES,MemoryType]
    memoryHeapCount*: uint32
    memoryHeaps*: array[MAX_MEMORY_HEAPS,MemoryHeap]
  PhysicalDeviceProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    properties*: PhysicalDeviceProperties
  PhysicalDeviceProperties2KHR* = PhysicalDeviceProperties2
  PhysicalDeviceMemoryProperties2*  = object
    sType*: StructureType
    pNext*: pointer
    memoryProperties*: PhysicalDeviceMemoryProperties
  PhysicalDeviceMemoryProperties2KHR* = PhysicalDeviceMemoryProperties2
  PresentRegionsKHR*  = object
    sType*: StructureType
    pNext*: pointer
    swapchainCount*: uint32
    pRegions*: ptr PresentRegionKHR
  DebugUtilsMessengerCreateInfoEXT*  = object
    sType*: StructureType
    pNext*: pointer
    flags*: DebugUtilsMessengerCreateFlagsEXT
    messageSeverity*: DebugUtilsMessageSeverityFlagsEXT
    messageType*: DebugUtilsMessageTypeFlagsEXT
    pfnUserCallback*: PFN_vkDebugUtilsMessengerCallbackEXT
    pUserData*: pointer
  DrmFormatModifierPropertiesListEXT*  = object
    sType*: StructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifierProperties*: ptr DrmFormatModifierPropertiesEXT
  FramebufferAttachmentsCreateInfo*  = object
    sType*: StructureType
    pNext*: pointer
    attachmentImageInfoCount*: uint32
    pAttachmentImageInfos*: ptr FramebufferAttachmentImageInfo
  FramebufferAttachmentsCreateInfoKHR* = FramebufferAttachmentsCreateInfo

proc mkBaseOutStructure*(
  sType: StructureType ,
  pNext: ptr BaseOutStructure = nil,
  ) : BaseOutStructure =
  result.sType = sType
  result.pNext = pNext

proc mkBaseInStructure*(
  sType: StructureType ,
  pNext: ptr BaseInStructure = nil,
  ) : BaseInStructure =
  result.sType = sType
  result.pNext = pNext

proc mkOffset2D*(
  x: int32 ,
  y: int32 ,
  ) : Offset2D =
  result.x = x
  result.y = y

proc mkOffset3D*(
  x: int32 ,
  y: int32 ,
  z: int32 ,
  ) : Offset3D =
  result.x = x
  result.y = y
  result.z = z

proc mkExtent2D*(
  width: uint32 ,
  height: uint32 ,
  ) : Extent2D =
  result.width = width
  result.height = height

proc mkExtent3D*(
  width: uint32 ,
  height: uint32 ,
  depth: uint32 ,
  ) : Extent3D =
  result.width = width
  result.height = height
  result.depth = depth

proc mkViewport*(
  x: float32 ,
  y: float32 ,
  width: float32 ,
  height: float32 ,
  minDepth: float32 ,
  maxDepth: float32 ,
  ) : Viewport =
  result.x = x
  result.y = y
  result.width = width
  result.height = height
  result.minDepth = minDepth
  result.maxDepth = maxDepth

proc mkRect2D*(
  offset: Offset2D ,
  extent: Extent2D ,
  ) : Rect2D =
  result.offset = offset
  result.extent = extent

proc mkClearRect*(
  rect: Rect2D ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : ClearRect =
  result.rect = rect
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkComponentMapping*(
  r: ComponentSwizzle ,
  g: ComponentSwizzle ,
  b: ComponentSwizzle ,
  a: ComponentSwizzle ,
  ) : ComponentMapping =
  result.r = r
  result.g = g
  result.b = b
  result.a = a

proc mkExtensionProperties*(
  extensionName: array[MAX_EXTENSION_NAME_SIZE,char] ,
  specVersion: uint32 ,
  ) : ExtensionProperties =
  result.extensionName = extensionName
  result.specVersion = specVersion

proc mkLayerProperties*(
  layerName: array[MAX_EXTENSION_NAME_SIZE,char] ,
  specVersion: uint32 ,
  implementationVersion: uint32 ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  ) : LayerProperties =
  result.layerName = layerName
  result.specVersion = specVersion
  result.implementationVersion = implementationVersion
  result.description = description

proc mkApplicationInfo*(
  sType: StructureType = STRUCTURE_TYPE_APPLICATION_INFO,
  pNext: pointer = nil,
  pApplicationName: cstring = nil,
  applicationVersion: uint32 ,
  pEngineName: cstring = nil,
  engineVersion: uint32 ,
  apiVersion: uint32 ,
  ) : ApplicationInfo =
  result.sType = sType
  result.pNext = pNext
  result.pApplicationName = pApplicationName
  result.applicationVersion = applicationVersion
  result.pEngineName = pEngineName
  result.engineVersion = engineVersion
  result.apiVersion = apiVersion

proc mkAllocationCallbacks*(
  pUserData: pointer = nil,
  pfnAllocation: PFN_vkAllocationFunction ,
  pfnReallocation: PFN_vkReallocationFunction ,
  pfnFree: PFN_vkFreeFunction ,
  pfnInternalAllocation: PFN_vkInternalAllocationNotification = nil,
  pfnInternalFree: PFN_vkInternalFreeNotification = nil,
  ) : AllocationCallbacks =
  result.pUserData = pUserData
  result.pfnAllocation = pfnAllocation
  result.pfnReallocation = pfnReallocation
  result.pfnFree = pfnFree
  result.pfnInternalAllocation = pfnInternalAllocation
  result.pfnInternalFree = pfnInternalFree

proc mkDescriptorImageInfo*(
  sampler: Sampler ,
  imageView: ImageView ,
  imageLayout: ImageLayout ,
  ) : DescriptorImageInfo =
  result.sampler = sampler
  result.imageView = imageView
  result.imageLayout = imageLayout

proc mkCopyDescriptorSet*(
  sType: StructureType = STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
  pNext: pointer = nil,
  srcSet: DescriptorSet ,
  srcBinding: uint32 ,
  srcArrayElement: uint32 ,
  dstSet: DescriptorSet ,
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  ) : CopyDescriptorSet =
  result.sType = sType
  result.pNext = pNext
  result.srcSet = srcSet
  result.srcBinding = srcBinding
  result.srcArrayElement = srcArrayElement
  result.dstSet = dstSet
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount

proc mkDescriptorPoolSize*(
  `type`: DescriptorType ,
  descriptorCount: uint32 ,
  ) : DescriptorPoolSize =
  result.`type` = `type`
  result.descriptorCount = descriptorCount

proc mkDescriptorSetAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
  pNext: pointer = nil,
  descriptorPool: DescriptorPool ,
  descriptorSetCount: uint32 ,
  pSetLayouts: ptr DescriptorSetLayout ,
  ) : DescriptorSetAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.descriptorPool = descriptorPool
  result.descriptorSetCount = descriptorSetCount
  result.pSetLayouts = pSetLayouts

proc mkSpecializationMapEntry*(
  constantID: uint32 ,
  offset: uint32 ,
  size: uint ,
  ) : SpecializationMapEntry =
  result.constantID = constantID
  result.offset = offset
  result.size = size

proc mkSpecializationInfo*(
  mapEntryCount: uint32 = 0.uint32,
  pMapEntries: ptr SpecializationMapEntry ,
  dataSize: uint = 0.uint,
  pData: pointer ,
  ) : SpecializationInfo =
  result.mapEntryCount = mapEntryCount
  result.pMapEntries = pMapEntries
  result.dataSize = dataSize
  result.pData = pData

proc mkVertexInputBindingDescription*(
  binding: uint32 ,
  stride: uint32 ,
  inputRate: VertexInputRate ,
  ) : VertexInputBindingDescription =
  result.binding = binding
  result.stride = stride
  result.inputRate = inputRate

proc mkVertexInputAttributeDescription*(
  location: uint32 ,
  binding: uint32 ,
  format: Format ,
  offset: uint32 ,
  ) : VertexInputAttributeDescription =
  result.location = location
  result.binding = binding
  result.format = format
  result.offset = offset

proc mkStencilOpState*(
  failOp: StencilOp ,
  passOp: StencilOp ,
  depthFailOp: StencilOp ,
  compareOp: CompareOp ,
  compareMask: uint32 ,
  writeMask: uint32 ,
  reference: uint32 ,
  ) : StencilOpState =
  result.failOp = failOp
  result.passOp = passOp
  result.depthFailOp = depthFailOp
  result.compareOp = compareOp
  result.compareMask = compareMask
  result.writeMask = writeMask
  result.reference = reference

proc mkCommandBufferAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
  pNext: pointer = nil,
  commandPool: CommandPool ,
  level: CommandBufferLevel ,
  commandBufferCount: uint32 ,
  ) : CommandBufferAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.commandPool = commandPool
  result.level = level
  result.commandBufferCount = commandBufferCount

proc mkClearDepthStencilValue*(
  depth: float32 ,
  stencil: uint32 ,
  ) : ClearDepthStencilValue =
  result.depth = depth
  result.stencil = stencil

proc mkAttachmentReference*(
  attachment: uint32 ,
  layout: ImageLayout ,
  ) : AttachmentReference =
  result.attachment = attachment
  result.layout = layout

proc mkDrawIndirectCommand*(
  vertexCount: uint32 ,
  instanceCount: uint32 ,
  firstVertex: uint32 ,
  firstInstance: uint32 ,
  ) : DrawIndirectCommand =
  result.vertexCount = vertexCount
  result.instanceCount = instanceCount
  result.firstVertex = firstVertex
  result.firstInstance = firstInstance

proc mkDrawIndexedIndirectCommand*(
  indexCount: uint32 ,
  instanceCount: uint32 ,
  firstIndex: uint32 ,
  vertexOffset: int32 ,
  firstInstance: uint32 ,
  ) : DrawIndexedIndirectCommand =
  result.indexCount = indexCount
  result.instanceCount = instanceCount
  result.firstIndex = firstIndex
  result.vertexOffset = vertexOffset
  result.firstInstance = firstInstance

proc mkDispatchIndirectCommand*(
  x: uint32 ,
  y: uint32 ,
  z: uint32 ,
  ) : DispatchIndirectCommand =
  result.x = x
  result.y = y
  result.z = z

proc mkDisplayPlanePropertiesKHR*(
  currentDisplay: DisplayKHR ,
  currentStackIndex: uint32 ,
  ) : DisplayPlanePropertiesKHR =
  result.currentDisplay = currentDisplay
  result.currentStackIndex = currentStackIndex

proc mkDisplayModeParametersKHR*(
  visibleRegion: Extent2D ,
  refreshRate: uint32 ,
  ) : DisplayModeParametersKHR =
  result.visibleRegion = visibleRegion
  result.refreshRate = refreshRate

proc mkDisplayModePropertiesKHR*(
  displayMode: DisplayModeKHR ,
  parameters: DisplayModeParametersKHR ,
  ) : DisplayModePropertiesKHR =
  result.displayMode = displayMode
  result.parameters = parameters

proc mkSurfaceFormatKHR*(
  format: Format ,
  colorSpace: ColorSpaceKHR ,
  ) : SurfaceFormatKHR =
  result.format = format
  result.colorSpace = colorSpace

proc mkPresentInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr Semaphore ,
  swapchainCount: uint32 ,
  pSwapchains: ptr SwapchainKHR ,
  pImageIndices: ptr uint32 ,
  pResults: ptr Result = nil,
  ) : PresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.swapchainCount = swapchainCount
  result.pSwapchains = pSwapchains
  result.pImageIndices = pImageIndices
  result.pResults = pResults

proc mkValidationFlagsEXT*(
  sType: StructureType = STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
  pNext: pointer = nil,
  disabledValidationCheckCount: uint32 ,
  pDisabledValidationChecks: ptr ValidationCheckEXT ,
  ) : ValidationFlagsEXT =
  result.sType = sType
  result.pNext = pNext
  result.disabledValidationCheckCount = disabledValidationCheckCount
  result.pDisabledValidationChecks = pDisabledValidationChecks

proc mkValidationFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
  pNext: pointer = nil,
  enabledValidationFeatureCount: uint32 = 0.uint32,
  pEnabledValidationFeatures: ptr ValidationFeatureEnableEXT ,
  disabledValidationFeatureCount: uint32 = 0.uint32,
  pDisabledValidationFeatures: ptr ValidationFeatureDisableEXT ,
  ) : ValidationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.enabledValidationFeatureCount = enabledValidationFeatureCount
  result.pEnabledValidationFeatures = pEnabledValidationFeatures
  result.disabledValidationFeatureCount = disabledValidationFeatureCount
  result.pDisabledValidationFeatures = pDisabledValidationFeatures

proc mkPipelineRasterizationStateRasterizationOrderAMD*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
  pNext: pointer = nil,
  rasterizationOrder: RasterizationOrderAMD ,
  ) : PipelineRasterizationStateRasterizationOrderAMD =
  result.sType = sType
  result.pNext = pNext
  result.rasterizationOrder = rasterizationOrder

proc mkDebugMarkerObjectNameInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
  pNext: pointer = nil,
  objectType: DebugReportObjectTypeEXT ,
  `object`: uint64 ,
  pObjectName: cstring ,
  ) : DebugMarkerObjectNameInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.`object` = `object`
  result.pObjectName = pObjectName

proc mkDebugMarkerObjectTagInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
  pNext: pointer = nil,
  objectType: DebugReportObjectTypeEXT ,
  `object`: uint64 ,
  tagName: uint64 ,
  tagSize: uint ,
  pTag: pointer ,
  ) : DebugMarkerObjectTagInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.`object` = `object`
  result.tagName = tagName
  result.tagSize = tagSize
  result.pTag = pTag

proc mkDebugMarkerMarkerInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
  pNext: pointer = nil,
  pMarkerName: cstring ,
  color: array[4,float32] = [0.float32,0.float32,0.float32,0.float32,],
  ) : DebugMarkerMarkerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.pMarkerName = pMarkerName
  result.color = color

proc mkDedicatedAllocationMemoryAllocateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
  pNext: pointer = nil,
  image: Image = Image(nil),
  buffer: Buffer = Buffer(nil),
  ) : DedicatedAllocationMemoryAllocateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.buffer = buffer

proc mkExportMemoryWin32HandleInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD = 0.DWORD,
  ) : ExportMemoryWin32HandleInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess

proc mkWin32KeyedMutexAcquireReleaseInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
  pNext: pointer = nil,
  acquireCount: uint32 = 0.uint32,
  pAcquireSyncs: ptr DeviceMemory ,
  pAcquireKeys: ptr uint64 ,
  pAcquireTimeoutMilliseconds: ptr uint32 ,
  releaseCount: uint32 = 0.uint32,
  pReleaseSyncs: ptr DeviceMemory ,
  pReleaseKeys: ptr uint64 ,
  ) : Win32KeyedMutexAcquireReleaseInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.acquireCount = acquireCount
  result.pAcquireSyncs = pAcquireSyncs
  result.pAcquireKeys = pAcquireKeys
  result.pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds
  result.releaseCount = releaseCount
  result.pReleaseSyncs = pReleaseSyncs
  result.pReleaseKeys = pReleaseKeys

proc mkDevicePrivateDataCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
  pNext: pointer = nil,
  privateDataSlotRequestCount: uint32 ,
  ) : DevicePrivateDataCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.privateDataSlotRequestCount = privateDataSlotRequestCount

proc mkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
  pNext: pointer = nil,
  maxGraphicsShaderGroupCount: uint32 ,
  maxIndirectSequenceCount: uint32 ,
  maxIndirectCommandsTokenCount: uint32 ,
  maxIndirectCommandsStreamCount: uint32 ,
  maxIndirectCommandsTokenOffset: uint32 ,
  maxIndirectCommandsStreamStride: uint32 ,
  minSequencesCountBufferOffsetAlignment: uint32 ,
  minSequencesIndexBufferOffsetAlignment: uint32 ,
  minIndirectCommandsBufferOffsetAlignment: uint32 ,
  ) : PhysicalDeviceDeviceGeneratedCommandsPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.maxGraphicsShaderGroupCount = maxGraphicsShaderGroupCount
  result.maxIndirectSequenceCount = maxIndirectSequenceCount
  result.maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount
  result.maxIndirectCommandsStreamCount = maxIndirectCommandsStreamCount
  result.maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset
  result.maxIndirectCommandsStreamStride = maxIndirectCommandsStreamStride
  result.minSequencesCountBufferOffsetAlignment = minSequencesCountBufferOffsetAlignment
  result.minSequencesIndexBufferOffsetAlignment = minSequencesIndexBufferOffsetAlignment
  result.minIndirectCommandsBufferOffsetAlignment = minIndirectCommandsBufferOffsetAlignment

proc mkBindShaderGroupIndirectCommandNV*(
  groupIndex: uint32 ,
  ) : BindShaderGroupIndirectCommandNV =
  result.groupIndex = groupIndex

proc mkSetStateFlagsIndirectCommandNV*(
  data: uint32 ,
  ) : SetStateFlagsIndirectCommandNV =
  result.data = data

proc mkGeneratedCommandsMemoryRequirementsInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
  pNext: pointer = nil,
  pipelineBindPoint: PipelineBindPoint ,
  pipeline: Pipeline ,
  indirectCommandsLayout: IndirectCommandsLayoutNV ,
  maxSequencesCount: uint32 ,
  ) : GeneratedCommandsMemoryRequirementsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pipelineBindPoint = pipelineBindPoint
  result.pipeline = pipeline
  result.indirectCommandsLayout = indirectCommandsLayout
  result.maxSequencesCount = maxSequencesCount

proc mkPhysicalDevicePushDescriptorPropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
  pNext: pointer = nil,
  maxPushDescriptors: uint32 ,
  ) : PhysicalDevicePushDescriptorPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.maxPushDescriptors = maxPushDescriptors

proc mkConformanceVersion*(
  major: uint8 ,
  minor: uint8 ,
  subminor: uint8 ,
  patch: uint8 ,
  ) : ConformanceVersion =
  result.major = major
  result.minor = minor
  result.subminor = subminor
  result.patch = patch

proc mkPhysicalDeviceDriverProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
  pNext: pointer = nil,
  driverID: DriverId ,
  driverName: array[MAX_DRIVER_NAME_SIZE,char] ,
  driverInfo: array[MAX_DRIVER_INFO_SIZE,char] ,
  conformanceVersion: ConformanceVersion ,
  ) : PhysicalDeviceDriverProperties =
  result.sType = sType
  result.pNext = pNext
  result.driverID = driverID
  result.driverName = driverName
  result.driverInfo = driverInfo
  result.conformanceVersion = conformanceVersion

proc mkRectLayerKHR*(
  offset: Offset2D ,
  extent: Extent2D ,
  layer: uint32 ,
  ) : RectLayerKHR =
  result.offset = offset
  result.extent = extent
  result.layer = layer

proc mkPhysicalDeviceExternalImageFormatInfo*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
  pNext: pointer = nil,
  handleType: ExternalMemoryHandleTypeFlagBits = 0.ExternalMemoryHandleTypeFlagBits,
  ) : PhysicalDeviceExternalImageFormatInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkImportMemoryWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  handleType: ExternalMemoryHandleTypeFlagBits = 0.ExternalMemoryHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : ImportMemoryWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkExportMemoryWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : ExportMemoryWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkMemoryWin32HandlePropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : MemoryWin32HandlePropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkMemoryGetWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  memory: DeviceMemory ,
  handleType: ExternalMemoryHandleTypeFlagBits ,
  ) : MemoryGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.handleType = handleType

proc mkImportMemoryFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
  pNext: pointer = nil,
  handleType: ExternalMemoryHandleTypeFlagBits = 0.ExternalMemoryHandleTypeFlagBits,
  fd: cint ,
  ) : ImportMemoryFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.fd = fd

proc mkMemoryFdPropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : MemoryFdPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkMemoryGetFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  memory: DeviceMemory ,
  handleType: ExternalMemoryHandleTypeFlagBits ,
  ) : MemoryGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.handleType = handleType

proc mkWin32KeyedMutexAcquireReleaseInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
  pNext: pointer = nil,
  acquireCount: uint32 = 0.uint32,
  pAcquireSyncs: ptr DeviceMemory ,
  pAcquireKeys: ptr uint64 ,
  pAcquireTimeouts: ptr uint32 ,
  releaseCount: uint32 = 0.uint32,
  pReleaseSyncs: ptr DeviceMemory ,
  pReleaseKeys: ptr uint64 ,
  ) : Win32KeyedMutexAcquireReleaseInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.acquireCount = acquireCount
  result.pAcquireSyncs = pAcquireSyncs
  result.pAcquireKeys = pAcquireKeys
  result.pAcquireTimeouts = pAcquireTimeouts
  result.releaseCount = releaseCount
  result.pReleaseSyncs = pReleaseSyncs
  result.pReleaseKeys = pReleaseKeys

proc mkPhysicalDeviceExternalSemaphoreInfo*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
  pNext: pointer = nil,
  handleType: ExternalSemaphoreHandleTypeFlagBits ,
  ) : PhysicalDeviceExternalSemaphoreInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkExportSemaphoreWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : ExportSemaphoreWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkD3D12FenceSubmitInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
  pNext: pointer = nil,
  waitSemaphoreValuesCount: uint32 = 0.uint32,
  pWaitSemaphoreValues: ptr uint64 = nil,
  signalSemaphoreValuesCount: uint32 = 0.uint32,
  pSignalSemaphoreValues: ptr uint64 = nil,
  ) : D3D12FenceSubmitInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreValuesCount = waitSemaphoreValuesCount
  result.pWaitSemaphoreValues = pWaitSemaphoreValues
  result.signalSemaphoreValuesCount = signalSemaphoreValuesCount
  result.pSignalSemaphoreValues = pSignalSemaphoreValues

proc mkSemaphoreGetWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  semaphore: Semaphore ,
  handleType: ExternalSemaphoreHandleTypeFlagBits ,
  ) : SemaphoreGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.handleType = handleType

proc mkSemaphoreGetFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  semaphore: Semaphore ,
  handleType: ExternalSemaphoreHandleTypeFlagBits ,
  ) : SemaphoreGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.handleType = handleType

proc mkPhysicalDeviceExternalFenceInfo*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
  pNext: pointer = nil,
  handleType: ExternalFenceHandleTypeFlagBits ,
  ) : PhysicalDeviceExternalFenceInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkExportFenceWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : ExportFenceWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkFenceGetWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  fence: Fence ,
  handleType: ExternalFenceHandleTypeFlagBits ,
  ) : FenceGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.handleType = handleType

proc mkFenceGetFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  fence: Fence ,
  handleType: ExternalFenceHandleTypeFlagBits ,
  ) : FenceGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.handleType = handleType

proc mkPhysicalDeviceMultiviewProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
  pNext: pointer = nil,
  maxMultiviewViewCount: uint32 ,
  maxMultiviewInstanceIndex: uint32 ,
  ) : PhysicalDeviceMultiviewProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxMultiviewViewCount = maxMultiviewViewCount
  result.maxMultiviewInstanceIndex = maxMultiviewInstanceIndex

proc mkRenderPassMultiviewCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
  pNext: pointer = nil,
  subpassCount: uint32 = 0.uint32,
  pViewMasks: ptr uint32 ,
  dependencyCount: uint32 = 0.uint32,
  pViewOffsets: ptr int32 ,
  correlationMaskCount: uint32 = 0.uint32,
  pCorrelationMasks: ptr uint32 ,
  ) : RenderPassMultiviewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.subpassCount = subpassCount
  result.pViewMasks = pViewMasks
  result.dependencyCount = dependencyCount
  result.pViewOffsets = pViewOffsets
  result.correlationMaskCount = correlationMaskCount
  result.pCorrelationMasks = pCorrelationMasks

proc mkDisplayPowerInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
  pNext: pointer = nil,
  powerState: DisplayPowerStateEXT ,
  ) : DisplayPowerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.powerState = powerState

proc mkDeviceEventInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
  pNext: pointer = nil,
  deviceEvent: DeviceEventTypeEXT ,
  ) : DeviceEventInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.deviceEvent = deviceEvent

proc mkDisplayEventInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
  pNext: pointer = nil,
  displayEvent: DisplayEventTypeEXT ,
  ) : DisplayEventInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.displayEvent = displayEvent

proc mkBindBufferMemoryDeviceGroupInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
  pNext: pointer = nil,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  ) : BindBufferMemoryDeviceGroupInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices

proc mkBindImageMemoryDeviceGroupInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
  pNext: pointer = nil,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  splitInstanceBindRegionCount: uint32 = 0.uint32,
  pSplitInstanceBindRegions: ptr Rect2D ,
  ) : BindImageMemoryDeviceGroupInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices
  result.splitInstanceBindRegionCount = splitInstanceBindRegionCount
  result.pSplitInstanceBindRegions = pSplitInstanceBindRegions

proc mkDeviceGroupRenderPassBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
  pNext: pointer = nil,
  deviceMask: uint32 ,
  deviceRenderAreaCount: uint32 = 0.uint32,
  pDeviceRenderAreas: ptr Rect2D ,
  ) : DeviceGroupRenderPassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceMask = deviceMask
  result.deviceRenderAreaCount = deviceRenderAreaCount
  result.pDeviceRenderAreas = pDeviceRenderAreas

proc mkDeviceGroupCommandBufferBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
  pNext: pointer = nil,
  deviceMask: uint32 ,
  ) : DeviceGroupCommandBufferBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceMask = deviceMask

proc mkDeviceGroupSubmitInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphoreDeviceIndices: ptr uint32 ,
  commandBufferCount: uint32 = 0.uint32,
  pCommandBufferDeviceMasks: ptr uint32 ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphoreDeviceIndices: ptr uint32 ,
  ) : DeviceGroupSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices
  result.commandBufferCount = commandBufferCount
  result.pCommandBufferDeviceMasks = pCommandBufferDeviceMasks
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices

proc mkDeviceGroupBindSparseInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
  pNext: pointer = nil,
  resourceDeviceIndex: uint32 ,
  memoryDeviceIndex: uint32 ,
  ) : DeviceGroupBindSparseInfo =
  result.sType = sType
  result.pNext = pNext
  result.resourceDeviceIndex = resourceDeviceIndex
  result.memoryDeviceIndex = memoryDeviceIndex

proc mkImageSwapchainCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  swapchain: SwapchainKHR = SwapchainKHR(nil),
  ) : ImageSwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain

proc mkBindImageMemorySwapchainInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
  pNext: pointer = nil,
  swapchain: SwapchainKHR ,
  imageIndex: uint32 ,
  ) : BindImageMemorySwapchainInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain
  result.imageIndex = imageIndex

proc mkAcquireNextImageInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
  pNext: pointer = nil,
  swapchain: SwapchainKHR ,
  timeout: uint64 ,
  semaphore: Semaphore,
  fence: Fence = Fence(nil),
  deviceMask: uint32 ,
  ) : AcquireNextImageInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain
  result.timeout = timeout
  result.semaphore = semaphore
  result.fence = fence
  result.deviceMask = deviceMask

proc mkDeviceGroupPresentInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  swapchainCount: uint32 = 0.uint32,
  pDeviceMasks: ptr uint32 ,
  mode: DeviceGroupPresentModeFlagBitsKHR ,
  ) : DeviceGroupPresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pDeviceMasks = pDeviceMasks
  result.mode = mode

proc mkDeviceGroupDeviceCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
  pNext: pointer = nil,
  physicalDeviceCount: uint32 = 0.uint32,
  pPhysicalDevices: ptr PhysicalDevice ,
  ) : DeviceGroupDeviceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.physicalDeviceCount = physicalDeviceCount
  result.pPhysicalDevices = pPhysicalDevices

proc mkDescriptorUpdateTemplateEntry*(
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  descriptorType: DescriptorType ,
  offset: uint ,
  stride: uint ,
  ) : DescriptorUpdateTemplateEntry =
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount
  result.descriptorType = descriptorType
  result.offset = offset
  result.stride = stride

proc mkXYColorEXT*(
  x: float32 ,
  y: float32 ,
  ) : XYColorEXT =
  result.x = x
  result.y = y

proc mkHdrMetadataEXT*(
  sType: StructureType = STRUCTURE_TYPE_HDR_METADATA_EXT,
  pNext: pointer = nil,
  displayPrimaryRed: XYColorEXT ,
  displayPrimaryGreen: XYColorEXT ,
  displayPrimaryBlue: XYColorEXT ,
  whitePoint: XYColorEXT ,
  maxLuminance: float32 ,
  minLuminance: float32 ,
  maxContentLightLevel: float32 ,
  maxFrameAverageLightLevel: float32 ,
  ) : HdrMetadataEXT =
  result.sType = sType
  result.pNext = pNext
  result.displayPrimaryRed = displayPrimaryRed
  result.displayPrimaryGreen = displayPrimaryGreen
  result.displayPrimaryBlue = displayPrimaryBlue
  result.whitePoint = whitePoint
  result.maxLuminance = maxLuminance
  result.minLuminance = minLuminance
  result.maxContentLightLevel = maxContentLightLevel
  result.maxFrameAverageLightLevel = maxFrameAverageLightLevel

proc mkRefreshCycleDurationGOOGLE*(
  refreshDuration: uint64 ,
  ) : RefreshCycleDurationGOOGLE =
  result.refreshDuration = refreshDuration

proc mkPastPresentationTimingGOOGLE*(
  presentID: uint32 ,
  desiredPresentTime: uint64 ,
  actualPresentTime: uint64 ,
  earliestPresentTime: uint64 ,
  presentMargin: uint64 ,
  ) : PastPresentationTimingGOOGLE =
  result.presentID = presentID
  result.desiredPresentTime = desiredPresentTime
  result.actualPresentTime = actualPresentTime
  result.earliestPresentTime = earliestPresentTime
  result.presentMargin = presentMargin

proc mkPresentTimeGOOGLE*(
  presentID: uint32 ,
  desiredPresentTime: uint64 ,
  ) : PresentTimeGOOGLE =
  result.presentID = presentID
  result.desiredPresentTime = desiredPresentTime

proc mkViewportWScalingNV*(
  xcoeff: float32 ,
  ycoeff: float32 ,
  ) : ViewportWScalingNV =
  result.xcoeff = xcoeff
  result.ycoeff = ycoeff

proc mkViewportSwizzleNV*(
  x: ViewportCoordinateSwizzleNV ,
  y: ViewportCoordinateSwizzleNV ,
  z: ViewportCoordinateSwizzleNV ,
  w: ViewportCoordinateSwizzleNV ,
  ) : ViewportSwizzleNV =
  result.x = x
  result.y = y
  result.z = z
  result.w = w

proc mkPhysicalDeviceDiscardRectanglePropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxDiscardRectangles: uint32 ,
  ) : PhysicalDeviceDiscardRectanglePropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxDiscardRectangles = maxDiscardRectangles

proc mkPhysicalDeviceSurfaceInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
  pNext: pointer = nil,
  surface: SurfaceKHR ,
  ) : PhysicalDeviceSurfaceInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surface = surface

proc mkSurfaceFormat2KHR*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
  pNext: pointer = nil,
  surfaceFormat: SurfaceFormatKHR ,
  ) : SurfaceFormat2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surfaceFormat = surfaceFormat

proc mkDisplayPlaneProperties2KHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayPlaneProperties: DisplayPlanePropertiesKHR ,
  ) : DisplayPlaneProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayPlaneProperties = displayPlaneProperties

proc mkDisplayModeProperties2KHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayModeProperties: DisplayModePropertiesKHR ,
  ) : DisplayModeProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayModeProperties = displayModeProperties

proc mkDisplayPlaneInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
  pNext: pointer = nil,
  mode: DisplayModeKHR ,
  planeIndex: uint32 ,
  ) : DisplayPlaneInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.mode = mode
  result.planeIndex = planeIndex

proc mkBufferMemoryRequirementsInfo2*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  buffer: Buffer ,
  ) : BufferMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkImageMemoryRequirementsInfo2*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  image: Image ,
  ) : ImageMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.image = image

proc mkImageSparseMemoryRequirementsInfo2*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  image: Image ,
  ) : ImageSparseMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.image = image

proc mkPhysicalDevicePointClippingProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
  pNext: pointer = nil,
  pointClippingBehavior: PointClippingBehavior ,
  ) : PhysicalDevicePointClippingProperties =
  result.sType = sType
  result.pNext = pNext
  result.pointClippingBehavior = pointClippingBehavior

proc mkMemoryDedicatedAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
  pNext: pointer = nil,
  image: Image = Image(nil),
  buffer: Buffer = Buffer(nil),
  ) : MemoryDedicatedAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.buffer = buffer

proc mkPipelineTessellationDomainOriginStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
  pNext: pointer = nil,
  domainOrigin: TessellationDomainOrigin ,
  ) : PipelineTessellationDomainOriginStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.domainOrigin = domainOrigin

proc mkSamplerYcbcrConversionInfo*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
  pNext: pointer = nil,
  conversion: SamplerYcbcrConversion ,
  ) : SamplerYcbcrConversionInfo =
  result.sType = sType
  result.pNext = pNext
  result.conversion = conversion

proc mkBindImagePlaneMemoryInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
  pNext: pointer = nil,
  planeAspect: ImageAspectFlagBits ,
  ) : BindImagePlaneMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.planeAspect = planeAspect

proc mkImagePlaneMemoryRequirementsInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
  pNext: pointer = nil,
  planeAspect: ImageAspectFlagBits ,
  ) : ImagePlaneMemoryRequirementsInfo =
  result.sType = sType
  result.pNext = pNext
  result.planeAspect = planeAspect

proc mkSamplerYcbcrConversionImageFormatProperties*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
  pNext: pointer = nil,
  combinedImageSamplerDescriptorCount: uint32 ,
  ) : SamplerYcbcrConversionImageFormatProperties =
  result.sType = sType
  result.pNext = pNext
  result.combinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount

proc mkSampleLocationEXT*(
  x: float32 ,
  y: float32 ,
  ) : SampleLocationEXT =
  result.x = x
  result.y = y

proc mkSampleLocationsInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
  pNext: pointer = nil,
  sampleLocationsPerPixel: SampleCountFlagBits = 0.SampleCountFlagBits,
  sampleLocationGridSize: Extent2D ,
  sampleLocationsCount: uint32 = 0.uint32,
  pSampleLocations: ptr SampleLocationEXT ,
  ) : SampleLocationsInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationsPerPixel = sampleLocationsPerPixel
  result.sampleLocationGridSize = sampleLocationGridSize
  result.sampleLocationsCount = sampleLocationsCount
  result.pSampleLocations = pSampleLocations

proc mkAttachmentSampleLocationsEXT*(
  attachmentIndex: uint32 ,
  sampleLocationsInfo: SampleLocationsInfoEXT ,
  ) : AttachmentSampleLocationsEXT =
  result.attachmentIndex = attachmentIndex
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkSubpassSampleLocationsEXT*(
  subpassIndex: uint32 ,
  sampleLocationsInfo: SampleLocationsInfoEXT ,
  ) : SubpassSampleLocationsEXT =
  result.subpassIndex = subpassIndex
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkRenderPassSampleLocationsBeginInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
  pNext: pointer = nil,
  attachmentInitialSampleLocationsCount: uint32 = 0.uint32,
  pAttachmentInitialSampleLocations: ptr AttachmentSampleLocationsEXT ,
  postSubpassSampleLocationsCount: uint32 = 0.uint32,
  pPostSubpassSampleLocations: ptr SubpassSampleLocationsEXT ,
  ) : RenderPassSampleLocationsBeginInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount
  result.pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations
  result.postSubpassSampleLocationsCount = postSubpassSampleLocationsCount
  result.pPostSubpassSampleLocations = pPostSubpassSampleLocations

proc mkMultisamplePropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxSampleLocationGridSize: Extent2D ,
  ) : MultisamplePropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxSampleLocationGridSize = maxSampleLocationGridSize

proc mkSamplerReductionModeCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
  pNext: pointer = nil,
  reductionMode: SamplerReductionMode ,
  ) : SamplerReductionModeCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.reductionMode = reductionMode

proc mkPhysicalDeviceInlineUniformBlockPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxInlineUniformBlockSize: uint32 ,
  maxPerStageDescriptorInlineUniformBlocks: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32 ,
  maxDescriptorSetInlineUniformBlocks: uint32 ,
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32 ,
  ) : PhysicalDeviceInlineUniformBlockPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxInlineUniformBlockSize = maxInlineUniformBlockSize
  result.maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
  result.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
  result.maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
  result.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks

proc mkWriteDescriptorSetInlineUniformBlockEXT*(
  sType: StructureType = STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
  pNext: pointer = nil,
  dataSize: uint32 ,
  pData: pointer ,
  ) : WriteDescriptorSetInlineUniformBlockEXT =
  result.sType = sType
  result.pNext = pNext
  result.dataSize = dataSize
  result.pData = pData

proc mkDescriptorPoolInlineUniformBlockCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  maxInlineUniformBlockBindings: uint32 ,
  ) : DescriptorPoolInlineUniformBlockCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxInlineUniformBlockBindings = maxInlineUniformBlockBindings

proc mkImageFormatListCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
  pNext: pointer = nil,
  viewFormatCount: uint32 = 0.uint32,
  pViewFormats: ptr Format ,
  ) : ImageFormatListCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.viewFormatCount = viewFormatCount
  result.pViewFormats = pViewFormats

proc mkShaderModuleValidationCacheCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  validationCache: ValidationCacheEXT ,
  ) : ShaderModuleValidationCacheCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.validationCache = validationCache

proc mkShaderResourceUsageAMD*(
  numUsedVgprs: uint32 ,
  numUsedSgprs: uint32 ,
  ldsSizePerLocalWorkGroup: uint32 ,
  ldsUsageSizeInBytes: uint ,
  scratchMemUsageInBytes: uint ,
  ) : ShaderResourceUsageAMD =
  result.numUsedVgprs = numUsedVgprs
  result.numUsedSgprs = numUsedSgprs
  result.ldsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup
  result.ldsUsageSizeInBytes = ldsUsageSizeInBytes
  result.scratchMemUsageInBytes = scratchMemUsageInBytes

proc mkDeviceQueueGlobalPriorityCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
  pNext: pointer = nil,
  globalPriority: QueueGlobalPriorityEXT ,
  ) : DeviceQueueGlobalPriorityCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.globalPriority = globalPriority

proc mkDebugUtilsObjectNameInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
  pNext: pointer = nil,
  objectType: ObjectType ,
  objectHandle: uint64 ,
  pObjectName: cstring = nil,
  ) : DebugUtilsObjectNameInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.objectHandle = objectHandle
  result.pObjectName = pObjectName

proc mkDebugUtilsObjectTagInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
  pNext: pointer = nil,
  objectType: ObjectType ,
  objectHandle: uint64 ,
  tagName: uint64 ,
  tagSize: uint ,
  pTag: pointer ,
  ) : DebugUtilsObjectTagInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.objectHandle = objectHandle
  result.tagName = tagName
  result.tagSize = tagSize
  result.pTag = pTag

proc mkDebugUtilsLabelEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
  pNext: pointer = nil,
  pLabelName: cstring ,
  color: array[4,float32] = [0.float32,0.float32,0.float32,0.float32,],
  ) : DebugUtilsLabelEXT =
  result.sType = sType
  result.pNext = pNext
  result.pLabelName = pLabelName
  result.color = color

proc mkImportMemoryHostPointerInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
  pNext: pointer = nil,
  handleType: ExternalMemoryHandleTypeFlagBits ,
  pHostPointer: pointer ,
  ) : ImportMemoryHostPointerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.pHostPointer = pHostPointer

proc mkMemoryHostPointerPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : MemoryHostPointerPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkCalibratedTimestampInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
  pNext: pointer = nil,
  timeDomain: TimeDomainEXT ,
  ) : CalibratedTimestampInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.timeDomain = timeDomain

proc mkPhysicalDeviceShaderCorePropertiesAMD*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
  pNext: pointer = nil,
  shaderEngineCount: uint32 ,
  shaderArraysPerEngineCount: uint32 ,
  computeUnitsPerShaderArray: uint32 ,
  simdPerComputeUnit: uint32 ,
  wavefrontsPerSimd: uint32 ,
  wavefrontSize: uint32 ,
  sgprsPerSimd: uint32 ,
  minSgprAllocation: uint32 ,
  maxSgprAllocation: uint32 ,
  sgprAllocationGranularity: uint32 ,
  vgprsPerSimd: uint32 ,
  minVgprAllocation: uint32 ,
  maxVgprAllocation: uint32 ,
  vgprAllocationGranularity: uint32 ,
  ) : PhysicalDeviceShaderCorePropertiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.shaderEngineCount = shaderEngineCount
  result.shaderArraysPerEngineCount = shaderArraysPerEngineCount
  result.computeUnitsPerShaderArray = computeUnitsPerShaderArray
  result.simdPerComputeUnit = simdPerComputeUnit
  result.wavefrontsPerSimd = wavefrontsPerSimd
  result.wavefrontSize = wavefrontSize
  result.sgprsPerSimd = sgprsPerSimd
  result.minSgprAllocation = minSgprAllocation
  result.maxSgprAllocation = maxSgprAllocation
  result.sgprAllocationGranularity = sgprAllocationGranularity
  result.vgprsPerSimd = vgprsPerSimd
  result.minVgprAllocation = minVgprAllocation
  result.maxVgprAllocation = maxVgprAllocation
  result.vgprAllocationGranularity = vgprAllocationGranularity

proc mkDescriptorSetVariableDescriptorCountAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
  pNext: pointer = nil,
  descriptorSetCount: uint32 = 0.uint32,
  pDescriptorCounts: ptr uint32 ,
  ) : DescriptorSetVariableDescriptorCountAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.descriptorSetCount = descriptorSetCount
  result.pDescriptorCounts = pDescriptorCounts

proc mkDescriptorSetVariableDescriptorCountLayoutSupport*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
  pNext: pointer = nil,
  maxVariableDescriptorCount: uint32 ,
  ) : DescriptorSetVariableDescriptorCountLayoutSupport =
  result.sType = sType
  result.pNext = pNext
  result.maxVariableDescriptorCount = maxVariableDescriptorCount

proc mkSubpassBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
  pNext: pointer = nil,
  contents: SubpassContents ,
  ) : SubpassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.contents = contents

proc mkSubpassEndInfo*(
  sType: StructureType = STRUCTURE_TYPE_SUBPASS_END_INFO,
  pNext: pointer = nil,
  ) : SubpassEndInfo =
  result.sType = sType
  result.pNext = pNext

proc mkPhysicalDeviceTimelineSemaphoreProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
  pNext: pointer = nil,
  maxTimelineSemaphoreValueDifference: uint64 ,
  ) : PhysicalDeviceTimelineSemaphoreProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference

proc mkSemaphoreTypeCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
  pNext: pointer = nil,
  semaphoreType: SemaphoreType ,
  initialValue: uint64 ,
  ) : SemaphoreTypeCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.semaphoreType = semaphoreType
  result.initialValue = initialValue

proc mkTimelineSemaphoreSubmitInfo*(
  sType: StructureType = STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreValueCount: uint32 = 0.uint32,
  pWaitSemaphoreValues: ptr uint64 = nil,
  signalSemaphoreValueCount: uint32 = 0.uint32,
  pSignalSemaphoreValues: ptr uint64 = nil,
  ) : TimelineSemaphoreSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreValueCount = waitSemaphoreValueCount
  result.pWaitSemaphoreValues = pWaitSemaphoreValues
  result.signalSemaphoreValueCount = signalSemaphoreValueCount
  result.pSignalSemaphoreValues = pSignalSemaphoreValues

proc mkSemaphoreSignalInfo*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
  pNext: pointer = nil,
  semaphore: Semaphore ,
  value: uint64 ,
  ) : SemaphoreSignalInfo =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.value = value

proc mkVertexInputBindingDivisorDescriptionEXT*(
  binding: uint32 ,
  divisor: uint32 ,
  ) : VertexInputBindingDivisorDescriptionEXT =
  result.binding = binding
  result.divisor = divisor

proc mkPipelineVertexInputDivisorStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  vertexBindingDivisorCount: uint32 ,
  pVertexBindingDivisors: ptr VertexInputBindingDivisorDescriptionEXT ,
  ) : PipelineVertexInputDivisorStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.vertexBindingDivisorCount = vertexBindingDivisorCount
  result.pVertexBindingDivisors = pVertexBindingDivisors

proc mkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxVertexAttribDivisor: uint32 ,
  ) : PhysicalDeviceVertexAttributeDivisorPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxVertexAttribDivisor = maxVertexAttribDivisor

proc mkPhysicalDevicePCIBusInfoPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
  pNext: pointer = nil,
  pciDomain: uint32 ,
  pciBus: uint32 ,
  pciDevice: uint32 ,
  pciFunction: uint32 ,
  ) : PhysicalDevicePCIBusInfoPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.pciDomain = pciDomain
  result.pciBus = pciBus
  result.pciDevice = pciDevice
  result.pciFunction = pciFunction

proc mkImportAndroidHardwareBufferInfoANDROID*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  pNext: pointer = nil,
  buffer: ptr AHardwareBuffer ,
  ) : ImportAndroidHardwareBufferInfoANDROID =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkAndroidHardwareBufferUsageANDROID*(
  sType: StructureType = STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
  pNext: pointer = nil,
  androidHardwareBufferUsage: uint64 ,
  ) : AndroidHardwareBufferUsageANDROID =
  result.sType = sType
  result.pNext = pNext
  result.androidHardwareBufferUsage = androidHardwareBufferUsage

proc mkMemoryGetAndroidHardwareBufferInfoANDROID*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  pNext: pointer = nil,
  memory: DeviceMemory ,
  ) : MemoryGetAndroidHardwareBufferInfoANDROID =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory

proc mkExternalFormatANDROID*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
  pNext: pointer = nil,
  externalFormat: uint64 ,
  ) : ExternalFormatANDROID =
  result.sType = sType
  result.pNext = pNext
  result.externalFormat = externalFormat

proc mkCheckpointDataNV*(
  sType: StructureType = STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
  pNext: pointer = nil,
  stage: PipelineStageFlagBits ,
  pCheckpointMarker: pointer ,
  ) : CheckpointDataNV =
  result.sType = sType
  result.pNext = pNext
  result.stage = stage
  result.pCheckpointMarker = pCheckpointMarker

proc mkImageViewASTCDecodeModeEXT*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
  pNext: pointer = nil,
  decodeMode: Format ,
  ) : ImageViewASTCDecodeModeEXT =
  result.sType = sType
  result.pNext = pNext
  result.decodeMode = decodeMode

proc mkPipelineViewportExclusiveScissorStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  exclusiveScissorCount: uint32 = 0.uint32,
  pExclusiveScissors: ptr Rect2D ,
  ) : PipelineViewportExclusiveScissorStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.exclusiveScissorCount = exclusiveScissorCount
  result.pExclusiveScissors = pExclusiveScissors

proc mkShadingRatePaletteNV*(
  shadingRatePaletteEntryCount: uint32 ,
  pShadingRatePaletteEntries: ptr ShadingRatePaletteEntryNV ,
  ) : ShadingRatePaletteNV =
  result.shadingRatePaletteEntryCount = shadingRatePaletteEntryCount
  result.pShadingRatePaletteEntries = pShadingRatePaletteEntries

proc mkPhysicalDeviceShadingRateImagePropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
  pNext: pointer = nil,
  shadingRateTexelSize: Extent2D ,
  shadingRatePaletteSize: uint32 ,
  shadingRateMaxCoarseSamples: uint32 ,
  ) : PhysicalDeviceShadingRateImagePropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateTexelSize = shadingRateTexelSize
  result.shadingRatePaletteSize = shadingRatePaletteSize
  result.shadingRateMaxCoarseSamples = shadingRateMaxCoarseSamples

proc mkCoarseSampleLocationNV*(
  pixelX: uint32 ,
  pixelY: uint32 ,
  sample: uint32 ,
  ) : CoarseSampleLocationNV =
  result.pixelX = pixelX
  result.pixelY = pixelY
  result.sample = sample

proc mkCoarseSampleOrderCustomNV*(
  shadingRate: ShadingRatePaletteEntryNV ,
  sampleCount: uint32 ,
  sampleLocationCount: uint32 ,
  pSampleLocations: ptr CoarseSampleLocationNV ,
  ) : CoarseSampleOrderCustomNV =
  result.shadingRate = shadingRate
  result.sampleCount = sampleCount
  result.sampleLocationCount = sampleLocationCount
  result.pSampleLocations = pSampleLocations

proc mkPipelineViewportCoarseSampleOrderStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  sampleOrderType: CoarseSampleOrderTypeNV ,
  customSampleOrderCount: uint32 = 0.uint32,
  pCustomSampleOrders: ptr CoarseSampleOrderCustomNV ,
  ) : PipelineViewportCoarseSampleOrderStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.sampleOrderType = sampleOrderType
  result.customSampleOrderCount = customSampleOrderCount
  result.pCustomSampleOrders = pCustomSampleOrders

proc mkPhysicalDeviceMeshShaderPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
  pNext: pointer = nil,
  maxDrawMeshTasksCount: uint32 ,
  maxTaskWorkGroupInvocations: uint32 ,
  maxTaskWorkGroupSize: array[3,uint32] ,
  maxTaskTotalMemorySize: uint32 ,
  maxTaskOutputCount: uint32 ,
  maxMeshWorkGroupInvocations: uint32 ,
  maxMeshWorkGroupSize: array[3,uint32] ,
  maxMeshTotalMemorySize: uint32 ,
  maxMeshOutputVertices: uint32 ,
  maxMeshOutputPrimitives: uint32 ,
  maxMeshMultiviewViewCount: uint32 ,
  meshOutputPerVertexGranularity: uint32 ,
  meshOutputPerPrimitiveGranularity: uint32 ,
  ) : PhysicalDeviceMeshShaderPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.maxDrawMeshTasksCount = maxDrawMeshTasksCount
  result.maxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations
  result.maxTaskWorkGroupSize = maxTaskWorkGroupSize
  result.maxTaskTotalMemorySize = maxTaskTotalMemorySize
  result.maxTaskOutputCount = maxTaskOutputCount
  result.maxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations
  result.maxMeshWorkGroupSize = maxMeshWorkGroupSize
  result.maxMeshTotalMemorySize = maxMeshTotalMemorySize
  result.maxMeshOutputVertices = maxMeshOutputVertices
  result.maxMeshOutputPrimitives = maxMeshOutputPrimitives
  result.maxMeshMultiviewViewCount = maxMeshMultiviewViewCount
  result.meshOutputPerVertexGranularity = meshOutputPerVertexGranularity
  result.meshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity

proc mkDrawMeshTasksIndirectCommandNV*(
  taskCount: uint32 ,
  firstTask: uint32 ,
  ) : DrawMeshTasksIndirectCommandNV =
  result.taskCount = taskCount
  result.firstTask = firstTask

proc mkRayTracingShaderGroupCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
  pNext: pointer = nil,
  `type`: RayTracingShaderGroupTypeKHR ,
  generalShader: uint32 ,
  closestHitShader: uint32 ,
  anyHitShader: uint32 ,
  intersectionShader: uint32 ,
  ) : RayTracingShaderGroupCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.generalShader = generalShader
  result.closestHitShader = closestHitShader
  result.anyHitShader = anyHitShader
  result.intersectionShader = intersectionShader

proc mkRayTracingShaderGroupCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
  pNext: pointer = nil,
  `type`: RayTracingShaderGroupTypeKHR ,
  generalShader: uint32 ,
  closestHitShader: uint32 ,
  anyHitShader: uint32 ,
  intersectionShader: uint32 ,
  pShaderGroupCaptureReplayHandle: pointer = nil,
  ) : RayTracingShaderGroupCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.generalShader = generalShader
  result.closestHitShader = closestHitShader
  result.anyHitShader = anyHitShader
  result.intersectionShader = intersectionShader
  result.pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle

proc mkWriteDescriptorSetAccelerationStructureKHR*(
  sType: StructureType = STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
  pNext: pointer = nil,
  accelerationStructureCount: uint32 ,
  pAccelerationStructures: ptr AccelerationStructureKHR ,
  ) : WriteDescriptorSetAccelerationStructureKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructureCount = accelerationStructureCount
  result.pAccelerationStructures = pAccelerationStructures

proc mkAccelerationStructureMemoryRequirementsInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR,
  pNext: pointer = nil,
  `type`: AccelerationStructureMemoryRequirementsTypeKHR ,
  buildType: AccelerationStructureBuildTypeKHR ,
  accelerationStructure: AccelerationStructureKHR ,
  ) : AccelerationStructureMemoryRequirementsInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.buildType = buildType
  result.accelerationStructure = accelerationStructure

proc mkAccelerationStructureMemoryRequirementsInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
  pNext: pointer = nil,
  `type`: AccelerationStructureMemoryRequirementsTypeNV ,
  accelerationStructure: AccelerationStructureNV ,
  ) : AccelerationStructureMemoryRequirementsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.accelerationStructure = accelerationStructure

proc mkPhysicalDeviceRayTracingPropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR,
  pNext: pointer = nil,
  shaderGroupHandleSize: uint32 ,
  maxRecursionDepth: uint32 ,
  maxShaderGroupStride: uint32 ,
  shaderGroupBaseAlignment: uint32 ,
  maxGeometryCount: uint64 ,
  maxInstanceCount: uint64 ,
  maxPrimitiveCount: uint64 ,
  maxDescriptorSetAccelerationStructures: uint32 ,
  shaderGroupHandleCaptureReplaySize: uint32 ,
  ) : PhysicalDeviceRayTracingPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.shaderGroupHandleSize = shaderGroupHandleSize
  result.maxRecursionDepth = maxRecursionDepth
  result.maxShaderGroupStride = maxShaderGroupStride
  result.shaderGroupBaseAlignment = shaderGroupBaseAlignment
  result.maxGeometryCount = maxGeometryCount
  result.maxInstanceCount = maxInstanceCount
  result.maxPrimitiveCount = maxPrimitiveCount
  result.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
  result.shaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize

proc mkPhysicalDeviceRayTracingPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
  pNext: pointer = nil,
  shaderGroupHandleSize: uint32 ,
  maxRecursionDepth: uint32 ,
  maxShaderGroupStride: uint32 ,
  shaderGroupBaseAlignment: uint32 ,
  maxGeometryCount: uint64 ,
  maxInstanceCount: uint64 ,
  maxTriangleCount: uint64 ,
  maxDescriptorSetAccelerationStructures: uint32 ,
  ) : PhysicalDeviceRayTracingPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderGroupHandleSize = shaderGroupHandleSize
  result.maxRecursionDepth = maxRecursionDepth
  result.maxShaderGroupStride = maxShaderGroupStride
  result.shaderGroupBaseAlignment = shaderGroupBaseAlignment
  result.maxGeometryCount = maxGeometryCount
  result.maxInstanceCount = maxInstanceCount
  result.maxTriangleCount = maxTriangleCount
  result.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures

proc mkTraceRaysIndirectCommandKHR*(
  width: uint32 ,
  height: uint32 ,
  depth: uint32 ,
  ) : TraceRaysIndirectCommandKHR =
  result.width = width
  result.height = height
  result.depth = depth

proc mkPhysicalDeviceImageDrmFormatModifierInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  sharingMode: SharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  ) : PhysicalDeviceImageDrmFormatModifierInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices

proc mkImageDrmFormatModifierListCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifierCount: uint32 ,
  pDrmFormatModifiers: ptr uint64 ,
  ) : ImageDrmFormatModifierListCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifierCount = drmFormatModifierCount
  result.pDrmFormatModifiers = pDrmFormatModifiers

proc mkImageDrmFormatModifierPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  ) : ImageDrmFormatModifierPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier

proc mkDeviceMemoryOverallocationCreateInfoAMD*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
  pNext: pointer = nil,
  overallocationBehavior: MemoryOverallocationBehaviorAMD ,
  ) : DeviceMemoryOverallocationCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.overallocationBehavior = overallocationBehavior

proc mkRenderPassFragmentDensityMapCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
  pNext: pointer = nil,
  fragmentDensityMapAttachment: AttachmentReference ,
  ) : RenderPassFragmentDensityMapCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMapAttachment = fragmentDensityMapAttachment

proc mkMemoryPriorityAllocateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
  pNext: pointer = nil,
  priority: float32 ,
  ) : MemoryPriorityAllocateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.priority = priority

proc mkBufferDeviceAddressInfo*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
  pNext: pointer = nil,
  buffer: Buffer ,
  ) : BufferDeviceAddressInfo =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkBufferOpaqueCaptureAddressCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
  pNext: pointer = nil,
  opaqueCaptureAddress: uint64 ,
  ) : BufferOpaqueCaptureAddressCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.opaqueCaptureAddress = opaqueCaptureAddress

proc mkPhysicalDeviceImageViewImageFormatInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
  pNext: pointer = nil,
  imageViewType: ImageViewType ,
  ) : PhysicalDeviceImageViewImageFormatInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.imageViewType = imageViewType

proc mkRenderPassAttachmentBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
  pNext: pointer = nil,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr ImageView ,
  ) : RenderPassAttachmentBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments

proc mkCooperativeMatrixPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  pNext: pointer = nil,
  MSize: uint32 ,
  NSize: uint32 ,
  KSize: uint32 ,
  AType: ComponentTypeNV ,
  BType: ComponentTypeNV ,
  CType: ComponentTypeNV ,
  DType: ComponentTypeNV ,
  scope: ScopeNV ,
  ) : CooperativeMatrixPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.MSize = MSize
  result.NSize = NSize
  result.KSize = KSize
  result.AType = AType
  result.BType = BType
  result.CType = CType
  result.DType = DType
  result.scope = scope

proc mkImageViewHandleInfoNVX*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
  pNext: pointer = nil,
  imageView: ImageView ,
  descriptorType: DescriptorType ,
  sampler: Sampler = Sampler(nil),
  ) : ImageViewHandleInfoNVX =
  result.sType = sType
  result.pNext = pNext
  result.imageView = imageView
  result.descriptorType = descriptorType
  result.sampler = sampler

proc mkPresentFrameTokenGGP*(
  sType: StructureType = STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
  pNext: pointer = nil,
  frameToken: GgpFrameToken ,
  ) : PresentFrameTokenGGP =
  result.sType = sType
  result.pNext = pNext
  result.frameToken = frameToken

proc mkSurfaceFullScreenExclusiveInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
  pNext: pointer = nil,
  fullScreenExclusive: FullScreenExclusiveEXT ,
  ) : SurfaceFullScreenExclusiveInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.fullScreenExclusive = fullScreenExclusive

proc mkSurfaceFullScreenExclusiveWin32InfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
  pNext: pointer = nil,
  hmonitor: HMONITOR ,
  ) : SurfaceFullScreenExclusiveWin32InfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.hmonitor = hmonitor

proc mkPerformanceCounterKHR*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
  pNext: pointer = nil,
  unit: PerformanceCounterUnitKHR ,
  scope: PerformanceCounterScopeKHR ,
  storage: PerformanceCounterStorageKHR ,
  uuid: array[UUID_SIZE,uint8] ,
  ) : PerformanceCounterKHR =
  result.sType = sType
  result.pNext = pNext
  result.unit = unit
  result.scope = scope
  result.storage = storage
  result.uuid = uuid

proc mkQueryPoolPerformanceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  queueFamilyIndex: uint32 ,
  counterIndexCount: uint32 ,
  pCounterIndices: ptr uint32 ,
  ) : QueryPoolPerformanceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.queueFamilyIndex = queueFamilyIndex
  result.counterIndexCount = counterIndexCount
  result.pCounterIndices = pCounterIndices

proc mkPerformanceQuerySubmitInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
  pNext: pointer = nil,
  counterPassIndex: uint32 ,
  ) : PerformanceQuerySubmitInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.counterPassIndex = counterPassIndex

proc mkInitializePerformanceApiInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
  pNext: pointer = nil,
  pUserData: pointer = nil,
  ) : InitializePerformanceApiInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.pUserData = pUserData

proc mkQueryPoolPerformanceQueryCreateInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
  pNext: pointer = nil,
  performanceCountersSampling: QueryPoolSamplingModeINTEL ,
  ) : QueryPoolPerformanceQueryCreateInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.performanceCountersSampling = performanceCountersSampling

proc mkPerformanceMarkerInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
  pNext: pointer = nil,
  marker: uint64 ,
  ) : PerformanceMarkerInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.marker = marker

proc mkPerformanceStreamMarkerInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
  pNext: pointer = nil,
  marker: uint32 ,
  ) : PerformanceStreamMarkerInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.marker = marker

proc mkPerformanceConfigurationAcquireInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
  pNext: pointer = nil,
  `type`: PerformanceConfigurationTypeINTEL ,
  ) : PerformanceConfigurationAcquireInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`

proc mkPhysicalDeviceShaderSMBuiltinsPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
  pNext: pointer = nil,
  shaderSMCount: uint32 ,
  shaderWarpsPerSM: uint32 ,
  ) : PhysicalDeviceShaderSMBuiltinsPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderSMCount = shaderSMCount
  result.shaderWarpsPerSM = shaderWarpsPerSM

proc mkAttachmentReferenceStencilLayout*(
  sType: StructureType = STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
  pNext: pointer = nil,
  stencilLayout: ImageLayout ,
  ) : AttachmentReferenceStencilLayout =
  result.sType = sType
  result.pNext = pNext
  result.stencilLayout = stencilLayout

proc mkAttachmentDescriptionStencilLayout*(
  sType: StructureType = STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
  pNext: pointer = nil,
  stencilInitialLayout: ImageLayout ,
  stencilFinalLayout: ImageLayout ,
  ) : AttachmentDescriptionStencilLayout =
  result.sType = sType
  result.pNext = pNext
  result.stencilInitialLayout = stencilInitialLayout
  result.stencilFinalLayout = stencilFinalLayout

proc mkPipelineInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_INFO_KHR,
  pNext: pointer = nil,
  pipeline: Pipeline ,
  ) : PipelineInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipeline = pipeline

proc mkPipelineExecutableInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
  pNext: pointer = nil,
  pipeline: Pipeline ,
  executableIndex: uint32 ,
  ) : PipelineExecutableInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipeline = pipeline
  result.executableIndex = executableIndex

proc mkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  requiredSubgroupSize: uint32 ,
  ) : PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.requiredSubgroupSize = requiredSubgroupSize

proc mkMemoryOpaqueCaptureAddressAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
  pNext: pointer = nil,
  opaqueCaptureAddress: uint64 ,
  ) : MemoryOpaqueCaptureAddressAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.opaqueCaptureAddress = opaqueCaptureAddress

proc mkDeviceMemoryOpaqueCaptureAddressInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
  pNext: pointer = nil,
  memory: DeviceMemory ,
  ) : DeviceMemoryOpaqueCaptureAddressInfo =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory

proc mkPhysicalDeviceLineRasterizationPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
  pNext: pointer = nil,
  lineSubPixelPrecisionBits: uint32 ,
  ) : PhysicalDeviceLineRasterizationPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.lineSubPixelPrecisionBits = lineSubPixelPrecisionBits

proc mkSamplerCustomBorderColorCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
  pNext: pointer = nil,
  customBorderColor: ClearColorValue ,
  format: Format ,
  ) : SamplerCustomBorderColorCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.customBorderColor = customBorderColor
  result.format = format

proc mkPhysicalDeviceCustomBorderColorPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxCustomBorderColorSamplers: uint32 ,
  ) : PhysicalDeviceCustomBorderColorPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxCustomBorderColorSamplers = maxCustomBorderColorSamplers

proc mkAccelerationStructureBuildOffsetInfoKHR*(
  primitiveCount: uint32 ,
  primitiveOffset: uint32 ,
  firstVertex: uint32 = 0.uint32,
  transformOffset: uint32 = 0.uint32,
  ) : AccelerationStructureBuildOffsetInfoKHR =
  result.primitiveCount = primitiveCount
  result.primitiveOffset = primitiveOffset
  result.firstVertex = firstVertex
  result.transformOffset = transformOffset

proc mkAabbPositionsKHR*(
  minX: float32 ,
  minY: float32 ,
  minZ: float32 ,
  maxX: float32 ,
  maxY: float32 ,
  maxZ: float32 ,
  ) : AabbPositionsKHR =
  result.minX = minX
  result.minY = minY
  result.minZ = minZ
  result.maxX = maxX
  result.maxY = maxY
  result.maxZ = maxZ

proc mkTransformMatrixKHR*(
  matrix: array[3,array[4, float32]] ,
  ) : TransformMatrixKHR =
  result.matrix = matrix

proc mkAccelerationStructureDeviceAddressInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
  pNext: pointer = nil,
  accelerationStructure: AccelerationStructureKHR ,
  ) : AccelerationStructureDeviceAddressInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructure = accelerationStructure

proc mkAccelerationStructureVersionKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR,
  pNext: pointer = nil,
  versionData: ptr uint8 ,
  ) : AccelerationStructureVersionKHR =
  result.sType = sType
  result.pNext = pNext
  result.versionData = versionData

proc mkCopyAccelerationStructureInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
  pNext: pointer = nil,
  src: AccelerationStructureKHR ,
  dst: AccelerationStructureKHR ,
  mode: CopyAccelerationStructureModeKHR ,
  ) : CopyAccelerationStructureInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkRayTracingPipelineInterfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  maxPayloadSize: uint32 ,
  maxAttributeSize: uint32 ,
  maxCallableSize: uint32 ,
  ) : RayTracingPipelineInterfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.maxPayloadSize = maxPayloadSize
  result.maxAttributeSize = maxAttributeSize
  result.maxCallableSize = maxCallableSize

proc mkDeferredOperationInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR,
  pNext: pointer = nil,
  operationHandle: DeferredOperationKHR ,
  ) : DeferredOperationInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.operationHandle = operationHandle

proc mkPipelineLibraryCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
  pNext: pointer = nil,
  libraryCount: uint32 = 0.uint32,
  pLibraries: ptr Pipeline ,
  ) : PipelineLibraryCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.libraryCount = libraryCount
  result.pLibraries = pLibraries

proc mkRenderPassTransformBeginInfoQCOM*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
  pNext: pointer = nil,
  transform: SurfaceTransformFlagBitsKHR ,
  ) : RenderPassTransformBeginInfoQCOM =
  result.sType = sType
  result.pNext = pNext
  result.transform = transform

proc mkCommandBufferInheritanceRenderPassTransformInfoQCOM*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
  pNext: pointer = nil,
  transform: SurfaceTransformFlagBitsKHR ,
  renderArea: Rect2D ,
  ) : CommandBufferInheritanceRenderPassTransformInfoQCOM =
  result.sType = sType
  result.pNext = pNext
  result.transform = transform
  result.renderArea = renderArea

proc mkPhysicalDevicePortabilitySubsetPropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR,
  pNext: pointer = nil,
  minVertexInputBindingStrideAlignment: uint32 ,
  ) : PhysicalDevicePortabilitySubsetPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.minVertexInputBindingStrideAlignment = minVertexInputBindingStrideAlignment

proc mkDeviceQueueCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
  pNext: pointer = nil,
  flags: DeviceQueueCreateFlags = {},
  queueFamilyIndex: uint32 ,
  queueCount: uint32 ,
  pQueuePriorities: ptr float32 ,
  ) : DeviceQueueCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex
  result.queueCount = queueCount
  result.pQueuePriorities = pQueuePriorities

proc mkInstanceCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
  pNext: pointer = nil,
  flags: InstanceCreateFlags = {},
  pApplicationInfo: ptr ApplicationInfo = nil,
  enabledLayerCount: uint32 = 0.uint32,
  ppEnabledLayerNames: ptr ptr char ,
  enabledExtensionCount: uint32 = 0.uint32,
  ppEnabledExtensionNames: ptr ptr char ,
  ) : InstanceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pApplicationInfo = pApplicationInfo
  result.enabledLayerCount = enabledLayerCount
  result.ppEnabledLayerNames = ppEnabledLayerNames
  result.enabledExtensionCount = enabledExtensionCount
  result.ppEnabledExtensionNames = ppEnabledExtensionNames

proc mkQueueFamilyProperties*(
  queueFlags: QueueFlags = {},
  queueCount: uint32 ,
  timestampValidBits: uint32 ,
  minImageTransferGranularity: Extent3D ,
  ) : QueueFamilyProperties =
  result.queueFlags = queueFlags
  result.queueCount = queueCount
  result.timestampValidBits = timestampValidBits
  result.minImageTransferGranularity = minImageTransferGranularity

proc mkMemoryAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
  pNext: pointer = nil,
  allocationSize: DeviceSize ,
  memoryTypeIndex: uint32 ,
  ) : MemoryAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.allocationSize = allocationSize
  result.memoryTypeIndex = memoryTypeIndex

proc mkMemoryRequirements*(
  size: DeviceSize ,
  alignment: DeviceSize ,
  memoryTypeBits: uint32 ,
  ) : MemoryRequirements =
  result.size = size
  result.alignment = alignment
  result.memoryTypeBits = memoryTypeBits

proc mkSparseImageFormatProperties*(
  aspectMask: ImageAspectFlags = {},
  imageGranularity: Extent3D ,
  flags: SparseImageFormatFlags = {},
  ) : SparseImageFormatProperties =
  result.aspectMask = aspectMask
  result.imageGranularity = imageGranularity
  result.flags = flags

proc mkSparseImageMemoryRequirements*(
  formatProperties: SparseImageFormatProperties ,
  imageMipTailFirstLod: uint32 ,
  imageMipTailSize: DeviceSize ,
  imageMipTailOffset: DeviceSize ,
  imageMipTailStride: DeviceSize ,
  ) : SparseImageMemoryRequirements =
  result.formatProperties = formatProperties
  result.imageMipTailFirstLod = imageMipTailFirstLod
  result.imageMipTailSize = imageMipTailSize
  result.imageMipTailOffset = imageMipTailOffset
  result.imageMipTailStride = imageMipTailStride

proc mkMemoryType*(
  propertyFlags: MemoryPropertyFlags = {},
  heapIndex: uint32 ,
  ) : MemoryType =
  result.propertyFlags = propertyFlags
  result.heapIndex = heapIndex

proc mkMemoryHeap*(
  size: DeviceSize ,
  flags: MemoryHeapFlags = {},
  ) : MemoryHeap =
  result.size = size
  result.flags = flags

proc mkMappedMemoryRange*(
  sType: StructureType = STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
  pNext: pointer = nil,
  memory: DeviceMemory ,
  offset: DeviceSize ,
  size: DeviceSize ,
  ) : MappedMemoryRange =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.offset = offset
  result.size = size

proc mkFormatProperties*(
  linearTilingFeatures: FormatFeatureFlags = {},
  optimalTilingFeatures: FormatFeatureFlags = {},
  bufferFeatures: FormatFeatureFlags = {},
  ) : FormatProperties =
  result.linearTilingFeatures = linearTilingFeatures
  result.optimalTilingFeatures = optimalTilingFeatures
  result.bufferFeatures = bufferFeatures

proc mkImageFormatProperties*(
  maxExtent: Extent3D ,
  maxMipLevels: uint32 ,
  maxArrayLayers: uint32 ,
  sampleCounts: SampleCountFlags = {},
  maxResourceSize: DeviceSize ,
  ) : ImageFormatProperties =
  result.maxExtent = maxExtent
  result.maxMipLevels = maxMipLevels
  result.maxArrayLayers = maxArrayLayers
  result.sampleCounts = sampleCounts
  result.maxResourceSize = maxResourceSize

proc mkDescriptorBufferInfo*(
  buffer: Buffer = Buffer(nil),
  offset: DeviceSize ,
  range: DeviceSize ,
  ) : DescriptorBufferInfo =
  result.buffer = buffer
  result.offset = offset
  result.range = range

proc mkWriteDescriptorSet*(
  sType: StructureType = STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
  pNext: pointer = nil,
  dstSet: DescriptorSet ,
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  descriptorType: DescriptorType ,
  pImageInfo: ptr DescriptorImageInfo ,
  pBufferInfo: ptr DescriptorBufferInfo ,
  pTexelBufferView: ptr BufferView ,
  ) : WriteDescriptorSet =
  result.sType = sType
  result.pNext = pNext
  result.dstSet = dstSet
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount
  result.descriptorType = descriptorType
  result.pImageInfo = pImageInfo
  result.pBufferInfo = pBufferInfo
  result.pTexelBufferView = pTexelBufferView

proc mkBufferCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_CREATE_INFO,
  pNext: pointer = nil,
  flags: BufferCreateFlags = {},
  size: DeviceSize ,
  usage: BufferUsageFlags ,
  sharingMode: SharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  ) : BufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.size = size
  result.usage = usage
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices

proc mkBufferViewCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
  pNext: pointer = nil,
  flags: BufferViewCreateFlags = {},
  buffer: Buffer ,
  format: Format ,
  offset: DeviceSize ,
  range: DeviceSize ,
  ) : BufferViewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.buffer = buffer
  result.format = format
  result.offset = offset
  result.range = range

proc mkImageSubresource*(
  aspectMask: ImageAspectFlags ,
  mipLevel: uint32 ,
  arrayLayer: uint32 ,
  ) : ImageSubresource =
  result.aspectMask = aspectMask
  result.mipLevel = mipLevel
  result.arrayLayer = arrayLayer

proc mkImageSubresourceLayers*(
  aspectMask: ImageAspectFlags ,
  mipLevel: uint32 ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : ImageSubresourceLayers =
  result.aspectMask = aspectMask
  result.mipLevel = mipLevel
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkImageSubresourceRange*(
  aspectMask: ImageAspectFlags ,
  baseMipLevel: uint32 ,
  levelCount: uint32 ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : ImageSubresourceRange =
  result.aspectMask = aspectMask
  result.baseMipLevel = baseMipLevel
  result.levelCount = levelCount
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkMemoryBarrier*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: AccessFlags = {},
  dstAccessMask: AccessFlags = {},
  ) : MemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask

proc mkBufferMemoryBarrier*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: AccessFlags ,
  dstAccessMask: AccessFlags ,
  srcQueueFamilyIndex: uint32 ,
  dstQueueFamilyIndex: uint32 ,
  buffer: Buffer ,
  offset: DeviceSize ,
  size: DeviceSize ,
  ) : BufferMemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.srcQueueFamilyIndex = srcQueueFamilyIndex
  result.dstQueueFamilyIndex = dstQueueFamilyIndex
  result.buffer = buffer
  result.offset = offset
  result.size = size

proc mkImageMemoryBarrier*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: AccessFlags ,
  dstAccessMask: AccessFlags ,
  oldLayout: ImageLayout ,
  newLayout: ImageLayout ,
  srcQueueFamilyIndex: uint32 ,
  dstQueueFamilyIndex: uint32 ,
  image: Image ,
  subresourceRange: ImageSubresourceRange ,
  ) : ImageMemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.oldLayout = oldLayout
  result.newLayout = newLayout
  result.srcQueueFamilyIndex = srcQueueFamilyIndex
  result.dstQueueFamilyIndex = dstQueueFamilyIndex
  result.image = image
  result.subresourceRange = subresourceRange

proc mkImageCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_CREATE_INFO,
  pNext: pointer = nil,
  flags: ImageCreateFlags = {},
  imageType: ImageType ,
  format: Format ,
  extent: Extent3D ,
  mipLevels: uint32 ,
  arrayLayers: uint32 ,
  samples: SampleCountFlagBits ,
  tiling: ImageTiling ,
  usage: ImageUsageFlags ,
  sharingMode: SharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  initialLayout: ImageLayout ,
  ) : ImageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.imageType = imageType
  result.format = format
  result.extent = extent
  result.mipLevels = mipLevels
  result.arrayLayers = arrayLayers
  result.samples = samples
  result.tiling = tiling
  result.usage = usage
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices
  result.initialLayout = initialLayout

proc mkSubresourceLayout*(
  offset: DeviceSize ,
  size: DeviceSize ,
  rowPitch: DeviceSize ,
  arrayPitch: DeviceSize ,
  depthPitch: DeviceSize ,
  ) : SubresourceLayout =
  result.offset = offset
  result.size = size
  result.rowPitch = rowPitch
  result.arrayPitch = arrayPitch
  result.depthPitch = depthPitch

proc mkImageViewCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
  pNext: pointer = nil,
  flags: ImageViewCreateFlags = {},
  image: Image ,
  viewType: ImageViewType ,
  format: Format ,
  components: ComponentMapping ,
  subresourceRange: ImageSubresourceRange ,
  ) : ImageViewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.image = image
  result.viewType = viewType
  result.format = format
  result.components = components
  result.subresourceRange = subresourceRange

proc mkBufferCopy*(
  srcOffset: DeviceSize ,
  dstOffset: DeviceSize ,
  size: DeviceSize ,
  ) : BufferCopy =
  result.srcOffset = srcOffset
  result.dstOffset = dstOffset
  result.size = size

proc mkSparseMemoryBind*(
  resourceOffset: DeviceSize ,
  size: DeviceSize ,
  memory: DeviceMemory = DeviceMemory(nil),
  memoryOffset: DeviceSize ,
  flags: SparseMemoryBindFlags = {},
  ) : SparseMemoryBind =
  result.resourceOffset = resourceOffset
  result.size = size
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.flags = flags

proc mkSparseImageMemoryBind*(
  subresource: ImageSubresource ,
  offset: Offset3D ,
  extent: Extent3D ,
  memory: DeviceMemory = DeviceMemory(nil),
  memoryOffset: DeviceSize ,
  flags: SparseMemoryBindFlags = {},
  ) : SparseImageMemoryBind =
  result.subresource = subresource
  result.offset = offset
  result.extent = extent
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.flags = flags

proc mkSparseBufferMemoryBindInfo*(
  buffer: Buffer ,
  bindCount: uint32 ,
  pBinds: ptr SparseMemoryBind ,
  ) : SparseBufferMemoryBindInfo =
  result.buffer = buffer
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkSparseImageOpaqueMemoryBindInfo*(
  image: Image ,
  bindCount: uint32 ,
  pBinds: ptr SparseMemoryBind ,
  ) : SparseImageOpaqueMemoryBindInfo =
  result.image = image
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkSparseImageMemoryBindInfo*(
  image: Image ,
  bindCount: uint32 ,
  pBinds: ptr SparseImageMemoryBind ,
  ) : SparseImageMemoryBindInfo =
  result.image = image
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkBindSparseInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_SPARSE_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr Semaphore ,
  bufferBindCount: uint32 = 0.uint32,
  pBufferBinds: ptr SparseBufferMemoryBindInfo ,
  imageOpaqueBindCount: uint32 = 0.uint32,
  pImageOpaqueBinds: ptr SparseImageOpaqueMemoryBindInfo ,
  imageBindCount: uint32 = 0.uint32,
  pImageBinds: ptr SparseImageMemoryBindInfo ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphores: ptr Semaphore ,
  ) : BindSparseInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.bufferBindCount = bufferBindCount
  result.pBufferBinds = pBufferBinds
  result.imageOpaqueBindCount = imageOpaqueBindCount
  result.pImageOpaqueBinds = pImageOpaqueBinds
  result.imageBindCount = imageBindCount
  result.pImageBinds = pImageBinds
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphores = pSignalSemaphores

proc mkImageCopy*(
  srcSubresource: ImageSubresourceLayers ,
  srcOffset: Offset3D ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffset: Offset3D ,
  extent: Extent3D ,
  ) : ImageCopy =
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkImageBlit*(
  srcSubresource: ImageSubresourceLayers ,
  srcOffsets: array[2,Offset3D] ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffsets: array[2,Offset3D] ,
  ) : ImageBlit =
  result.srcSubresource = srcSubresource
  result.srcOffsets = srcOffsets
  result.dstSubresource = dstSubresource
  result.dstOffsets = dstOffsets

proc mkBufferImageCopy*(
  bufferOffset: DeviceSize ,
  bufferRowLength: uint32 ,
  bufferImageHeight: uint32 ,
  imageSubresource: ImageSubresourceLayers ,
  imageOffset: Offset3D ,
  imageExtent: Extent3D ,
  ) : BufferImageCopy =
  result.bufferOffset = bufferOffset
  result.bufferRowLength = bufferRowLength
  result.bufferImageHeight = bufferImageHeight
  result.imageSubresource = imageSubresource
  result.imageOffset = imageOffset
  result.imageExtent = imageExtent

proc mkImageResolve*(
  srcSubresource: ImageSubresourceLayers ,
  srcOffset: Offset3D ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffset: Offset3D ,
  extent: Extent3D ,
  ) : ImageResolve =
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkShaderModuleCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
  pNext: pointer = nil,
  flags: ShaderModuleCreateFlags = {},
  codeSize: uint ,
  pCode: ptr uint32 ,
  ) : ShaderModuleCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.codeSize = codeSize
  result.pCode = pCode

proc mkDescriptorSetLayoutBinding*(
  binding: uint32 ,
  descriptorType: DescriptorType ,
  descriptorCount: uint32 = 0.uint32,
  stageFlags: ShaderStageFlags ,
  pImmutableSamplers: ptr Sampler = nil,
  ) : DescriptorSetLayoutBinding =
  result.binding = binding
  result.descriptorType = descriptorType
  result.descriptorCount = descriptorCount
  result.stageFlags = stageFlags
  result.pImmutableSamplers = pImmutableSamplers

proc mkDescriptorSetLayoutCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
  pNext: pointer = nil,
  flags: DescriptorSetLayoutCreateFlags = {},
  bindingCount: uint32 = 0.uint32,
  pBindings: ptr DescriptorSetLayoutBinding ,
  ) : DescriptorSetLayoutCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.bindingCount = bindingCount
  result.pBindings = pBindings

proc mkDescriptorPoolCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: DescriptorPoolCreateFlags = {},
  maxSets: uint32 ,
  poolSizeCount: uint32 ,
  pPoolSizes: ptr DescriptorPoolSize ,
  ) : DescriptorPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.maxSets = maxSets
  result.poolSizeCount = poolSizeCount
  result.pPoolSizes = pPoolSizes

proc mkPipelineShaderStageCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineShaderStageCreateFlags = {},
  stage: ShaderStageFlagBits ,
  module: ShaderModule ,
  pName: cstring ,
  pSpecializationInfo: ptr SpecializationInfo = nil,
  ) : PipelineShaderStageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stage = stage
  result.module = module
  result.pName = pName
  result.pSpecializationInfo = pSpecializationInfo

proc mkComputePipelineCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineCreateFlags = {},
  stage: PipelineShaderStageCreateInfo ,
  layout: PipelineLayout ,
  basePipelineHandle: Pipeline = Pipeline(nil),
  basePipelineIndex: int32 ,
  ) : ComputePipelineCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stage = stage
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkPipelineVertexInputStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineVertexInputStateCreateFlags = {},
  vertexBindingDescriptionCount: uint32 = 0.uint32,
  pVertexBindingDescriptions: ptr VertexInputBindingDescription ,
  vertexAttributeDescriptionCount: uint32 = 0.uint32,
  pVertexAttributeDescriptions: ptr VertexInputAttributeDescription ,
  ) : PipelineVertexInputStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.vertexBindingDescriptionCount = vertexBindingDescriptionCount
  result.pVertexBindingDescriptions = pVertexBindingDescriptions
  result.vertexAttributeDescriptionCount = vertexAttributeDescriptionCount
  result.pVertexAttributeDescriptions = pVertexAttributeDescriptions

proc mkPipelineInputAssemblyStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineInputAssemblyStateCreateFlags = {},
  topology: PrimitiveTopology ,
  primitiveRestartEnable: Bool32 ,
  ) : PipelineInputAssemblyStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.topology = topology
  result.primitiveRestartEnable = primitiveRestartEnable

proc mkPipelineTessellationStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineTessellationStateCreateFlags = {},
  patchControlPoints: uint32 ,
  ) : PipelineTessellationStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.patchControlPoints = patchControlPoints

proc mkPipelineViewportStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineViewportStateCreateFlags = {},
  viewportCount: uint32 = 0.uint32,
  pViewports: ptr Viewport = nil,
  scissorCount: uint32 = 0.uint32,
  pScissors: ptr Rect2D = nil,
  ) : PipelineViewportStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.viewportCount = viewportCount
  result.pViewports = pViewports
  result.scissorCount = scissorCount
  result.pScissors = pScissors

proc mkPipelineRasterizationStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineRasterizationStateCreateFlags = {},
  depthClampEnable: Bool32 ,
  rasterizerDiscardEnable: Bool32 ,
  polygonMode: PolygonMode ,
  cullMode: CullModeFlags = {},
  frontFace: FrontFace ,
  depthBiasEnable: Bool32 ,
  depthBiasConstantFactor: float32 ,
  depthBiasClamp: float32 ,
  depthBiasSlopeFactor: float32 ,
  lineWidth: float32 ,
  ) : PipelineRasterizationStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthClampEnable = depthClampEnable
  result.rasterizerDiscardEnable = rasterizerDiscardEnable
  result.polygonMode = polygonMode
  result.cullMode = cullMode
  result.frontFace = frontFace
  result.depthBiasEnable = depthBiasEnable
  result.depthBiasConstantFactor = depthBiasConstantFactor
  result.depthBiasClamp = depthBiasClamp
  result.depthBiasSlopeFactor = depthBiasSlopeFactor
  result.lineWidth = lineWidth

proc mkPipelineMultisampleStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineMultisampleStateCreateFlags = {},
  rasterizationSamples: SampleCountFlagBits ,
  sampleShadingEnable: Bool32 ,
  minSampleShading: float32 ,
  pSampleMask: ptr SampleMask = nil,
  alphaToCoverageEnable: Bool32 ,
  alphaToOneEnable: Bool32 ,
  ) : PipelineMultisampleStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.rasterizationSamples = rasterizationSamples
  result.sampleShadingEnable = sampleShadingEnable
  result.minSampleShading = minSampleShading
  result.pSampleMask = pSampleMask
  result.alphaToCoverageEnable = alphaToCoverageEnable
  result.alphaToOneEnable = alphaToOneEnable

proc mkPipelineColorBlendAttachmentState*(
  blendEnable: Bool32 ,
  srcColorBlendFactor: BlendFactor ,
  dstColorBlendFactor: BlendFactor ,
  colorBlendOp: BlendOp ,
  srcAlphaBlendFactor: BlendFactor ,
  dstAlphaBlendFactor: BlendFactor ,
  alphaBlendOp: BlendOp ,
  colorWriteMask: ColorComponentFlags = {},
  ) : PipelineColorBlendAttachmentState =
  result.blendEnable = blendEnable
  result.srcColorBlendFactor = srcColorBlendFactor
  result.dstColorBlendFactor = dstColorBlendFactor
  result.colorBlendOp = colorBlendOp
  result.srcAlphaBlendFactor = srcAlphaBlendFactor
  result.dstAlphaBlendFactor = dstAlphaBlendFactor
  result.alphaBlendOp = alphaBlendOp
  result.colorWriteMask = colorWriteMask

proc mkPipelineColorBlendStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineColorBlendStateCreateFlags = {},
  logicOpEnable: Bool32 ,
  logicOp: LogicOp ,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr PipelineColorBlendAttachmentState ,
  blendConstants: array[4,float32] ,
  ) : PipelineColorBlendStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.logicOpEnable = logicOpEnable
  result.logicOp = logicOp
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.blendConstants = blendConstants

proc mkPipelineDynamicStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineDynamicStateCreateFlags = {},
  dynamicStateCount: uint32 = 0.uint32,
  pDynamicStates: ptr DynamicState ,
  ) : PipelineDynamicStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dynamicStateCount = dynamicStateCount
  result.pDynamicStates = pDynamicStates

proc mkPipelineDepthStencilStateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineDepthStencilStateCreateFlags = {},
  depthTestEnable: Bool32 ,
  depthWriteEnable: Bool32 ,
  depthCompareOp: CompareOp ,
  depthBoundsTestEnable: Bool32 ,
  stencilTestEnable: Bool32 ,
  front: StencilOpState ,
  back: StencilOpState ,
  minDepthBounds: float32 ,
  maxDepthBounds: float32 ,
  ) : PipelineDepthStencilStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthTestEnable = depthTestEnable
  result.depthWriteEnable = depthWriteEnable
  result.depthCompareOp = depthCompareOp
  result.depthBoundsTestEnable = depthBoundsTestEnable
  result.stencilTestEnable = stencilTestEnable
  result.front = front
  result.back = back
  result.minDepthBounds = minDepthBounds
  result.maxDepthBounds = maxDepthBounds

proc mkGraphicsPipelineCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineCreateFlags = {},
  stageCount: uint32 ,
  pStages: ptr PipelineShaderStageCreateInfo ,
  pVertexInputState: ptr PipelineVertexInputStateCreateInfo = nil,
  pInputAssemblyState: ptr PipelineInputAssemblyStateCreateInfo = nil,
  pTessellationState: ptr PipelineTessellationStateCreateInfo = nil,
  pViewportState: ptr PipelineViewportStateCreateInfo = nil,
  pRasterizationState: ptr PipelineRasterizationStateCreateInfo ,
  pMultisampleState: ptr PipelineMultisampleStateCreateInfo = nil,
  pDepthStencilState: ptr PipelineDepthStencilStateCreateInfo = nil,
  pColorBlendState: ptr PipelineColorBlendStateCreateInfo = nil,
  pDynamicState: ptr PipelineDynamicStateCreateInfo = nil,
  layout: PipelineLayout ,
  renderPass: RenderPass ,
  subpass: uint32 ,
  basePipelineHandle: Pipeline = Pipeline(nil),
  basePipelineIndex: int32 ,
  ) : GraphicsPipelineCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.pVertexInputState = pVertexInputState
  result.pInputAssemblyState = pInputAssemblyState
  result.pTessellationState = pTessellationState
  result.pViewportState = pViewportState
  result.pRasterizationState = pRasterizationState
  result.pMultisampleState = pMultisampleState
  result.pDepthStencilState = pDepthStencilState
  result.pColorBlendState = pColorBlendState
  result.pDynamicState = pDynamicState
  result.layout = layout
  result.renderPass = renderPass
  result.subpass = subpass
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkPipelineCacheCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineCacheCreateFlags = {},
  initialDataSize: uint = 0.uint,
  pInitialData: pointer ,
  ) : PipelineCacheCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.initialDataSize = initialDataSize
  result.pInitialData = pInitialData

proc mkPushConstantRange*(
  stageFlags: ShaderStageFlags ,
  offset: uint32 ,
  size: uint32 ,
  ) : PushConstantRange =
  result.stageFlags = stageFlags
  result.offset = offset
  result.size = size

proc mkPipelineLayoutCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
  pNext: pointer = nil,
  flags: PipelineLayoutCreateFlags = {},
  setLayoutCount: uint32 = 0.uint32,
  pSetLayouts: ptr DescriptorSetLayout ,
  pushConstantRangeCount: uint32 = 0.uint32,
  pPushConstantRanges: ptr PushConstantRange ,
  ) : PipelineLayoutCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.setLayoutCount = setLayoutCount
  result.pSetLayouts = pSetLayouts
  result.pushConstantRangeCount = pushConstantRangeCount
  result.pPushConstantRanges = pPushConstantRanges

proc mkSamplerCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
  pNext: pointer = nil,
  flags: SamplerCreateFlags = {},
  magFilter: Filter ,
  minFilter: Filter ,
  mipmapMode: SamplerMipmapMode ,
  addressModeU: SamplerAddressMode ,
  addressModeV: SamplerAddressMode ,
  addressModeW: SamplerAddressMode ,
  mipLodBias: float32 ,
  anisotropyEnable: Bool32 ,
  maxAnisotropy: float32 ,
  compareEnable: Bool32 ,
  compareOp: CompareOp ,
  minLod: float32 ,
  maxLod: float32 ,
  borderColor: BorderColor ,
  unnormalizedCoordinates: Bool32 ,
  ) : SamplerCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.magFilter = magFilter
  result.minFilter = minFilter
  result.mipmapMode = mipmapMode
  result.addressModeU = addressModeU
  result.addressModeV = addressModeV
  result.addressModeW = addressModeW
  result.mipLodBias = mipLodBias
  result.anisotropyEnable = anisotropyEnable
  result.maxAnisotropy = maxAnisotropy
  result.compareEnable = compareEnable
  result.compareOp = compareOp
  result.minLod = minLod
  result.maxLod = maxLod
  result.borderColor = borderColor
  result.unnormalizedCoordinates = unnormalizedCoordinates

proc mkCommandPoolCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: CommandPoolCreateFlags = {},
  queueFamilyIndex: uint32 ,
  ) : CommandPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex

proc mkCommandBufferInheritanceInfo*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
  pNext: pointer = nil,
  renderPass: RenderPass = RenderPass(nil),
  subpass: uint32 ,
  framebuffer: Framebuffer = Framebuffer(nil),
  occlusionQueryEnable: Bool32 ,
  queryFlags: QueryControlFlags = {},
  pipelineStatistics: QueryPipelineStatisticFlags = {},
  ) : CommandBufferInheritanceInfo =
  result.sType = sType
  result.pNext = pNext
  result.renderPass = renderPass
  result.subpass = subpass
  result.framebuffer = framebuffer
  result.occlusionQueryEnable = occlusionQueryEnable
  result.queryFlags = queryFlags
  result.pipelineStatistics = pipelineStatistics

proc mkCommandBufferBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
  pNext: pointer = nil,
  flags: CommandBufferUsageFlags = {},
  pInheritanceInfo: ptr CommandBufferInheritanceInfo = nil,
  ) : CommandBufferBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pInheritanceInfo = pInheritanceInfo

proc mkRenderPassBeginInfo*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
  pNext: pointer = nil,
  renderPass: RenderPass ,
  framebuffer: Framebuffer ,
  renderArea: Rect2D ,
  clearValueCount: uint32 = 0.uint32,
  pClearValues: ptr ClearValue ,
  ) : RenderPassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.renderPass = renderPass
  result.framebuffer = framebuffer
  result.renderArea = renderArea
  result.clearValueCount = clearValueCount
  result.pClearValues = pClearValues

proc mkClearAttachment*(
  aspectMask: ImageAspectFlags ,
  colorAttachment: uint32 ,
  clearValue: ClearValue ,
  ) : ClearAttachment =
  result.aspectMask = aspectMask
  result.colorAttachment = colorAttachment
  result.clearValue = clearValue

proc mkAttachmentDescription*(
  flags: AttachmentDescriptionFlags = {},
  format: Format ,
  samples: SampleCountFlagBits ,
  loadOp: AttachmentLoadOp ,
  storeOp: AttachmentStoreOp ,
  stencilLoadOp: AttachmentLoadOp ,
  stencilStoreOp: AttachmentStoreOp ,
  initialLayout: ImageLayout ,
  finalLayout: ImageLayout ,
  ) : AttachmentDescription =
  result.flags = flags
  result.format = format
  result.samples = samples
  result.loadOp = loadOp
  result.storeOp = storeOp
  result.stencilLoadOp = stencilLoadOp
  result.stencilStoreOp = stencilStoreOp
  result.initialLayout = initialLayout
  result.finalLayout = finalLayout

proc mkSubpassDescription*(
  flags: SubpassDescriptionFlags = {},
  pipelineBindPoint: PipelineBindPoint ,
  inputAttachmentCount: uint32 = 0.uint32,
  pInputAttachments: ptr AttachmentReference ,
  colorAttachmentCount: uint32 = 0.uint32,
  pColorAttachments: ptr AttachmentReference ,
  pResolveAttachments: ptr AttachmentReference = nil,
  pDepthStencilAttachment: ptr AttachmentReference = nil,
  preserveAttachmentCount: uint32 = 0.uint32,
  pPreserveAttachments: ptr uint32 ,
  ) : SubpassDescription =
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.inputAttachmentCount = inputAttachmentCount
  result.pInputAttachments = pInputAttachments
  result.colorAttachmentCount = colorAttachmentCount
  result.pColorAttachments = pColorAttachments
  result.pResolveAttachments = pResolveAttachments
  result.pDepthStencilAttachment = pDepthStencilAttachment
  result.preserveAttachmentCount = preserveAttachmentCount
  result.pPreserveAttachments = pPreserveAttachments

proc mkSubpassDependency*(
  srcSubpass: uint32 ,
  dstSubpass: uint32 ,
  srcStageMask: PipelineStageFlags ,
  dstStageMask: PipelineStageFlags ,
  srcAccessMask: AccessFlags = {},
  dstAccessMask: AccessFlags = {},
  dependencyFlags: DependencyFlags = {},
  ) : SubpassDependency =
  result.srcSubpass = srcSubpass
  result.dstSubpass = dstSubpass
  result.srcStageMask = srcStageMask
  result.dstStageMask = dstStageMask
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.dependencyFlags = dependencyFlags

proc mkRenderPassCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
  pNext: pointer = nil,
  flags: RenderPassCreateFlags = {},
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr AttachmentDescription ,
  subpassCount: uint32 ,
  pSubpasses: ptr SubpassDescription ,
  dependencyCount: uint32 = 0.uint32,
  pDependencies: ptr SubpassDependency ,
  ) : RenderPassCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.subpassCount = subpassCount
  result.pSubpasses = pSubpasses
  result.dependencyCount = dependencyCount
  result.pDependencies = pDependencies

proc mkEventCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EVENT_CREATE_INFO,
  pNext: pointer = nil,
  flags: EventCreateFlags = {},
  ) : EventCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkFenceCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_FENCE_CREATE_INFO,
  pNext: pointer = nil,
  flags: FenceCreateFlags = {},
  ) : FenceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkPhysicalDeviceFeatures*(
  robustBufferAccess: Bool32 ,
  fullDrawIndexUint32: Bool32 ,
  imageCubeArray: Bool32 ,
  independentBlend: Bool32 ,
  geometryShader: Bool32 ,
  tessellationShader: Bool32 ,
  sampleRateShading: Bool32 ,
  dualSrcBlend: Bool32 ,
  logicOp: Bool32 ,
  multiDrawIndirect: Bool32 ,
  drawIndirectFirstInstance: Bool32 ,
  depthClamp: Bool32 ,
  depthBiasClamp: Bool32 ,
  fillModeNonSolid: Bool32 ,
  depthBounds: Bool32 ,
  wideLines: Bool32 ,
  largePoints: Bool32 ,
  alphaToOne: Bool32 ,
  multiViewport: Bool32 ,
  samplerAnisotropy: Bool32 ,
  textureCompressionETC2: Bool32 ,
  textureCompressionASTC_LDR: Bool32 ,
  textureCompressionBC: Bool32 ,
  occlusionQueryPrecise: Bool32 ,
  pipelineStatisticsQuery: Bool32 ,
  vertexPipelineStoresAndAtomics: Bool32 ,
  fragmentStoresAndAtomics: Bool32 ,
  shaderTessellationAndGeometryPointSize: Bool32 ,
  shaderImageGatherExtended: Bool32 ,
  shaderStorageImageExtendedFormats: Bool32 ,
  shaderStorageImageMultisample: Bool32 ,
  shaderStorageImageReadWithoutFormat: Bool32 ,
  shaderStorageImageWriteWithoutFormat: Bool32 ,
  shaderUniformBufferArrayDynamicIndexing: Bool32 ,
  shaderSampledImageArrayDynamicIndexing: Bool32 ,
  shaderStorageBufferArrayDynamicIndexing: Bool32 ,
  shaderStorageImageArrayDynamicIndexing: Bool32 ,
  shaderClipDistance: Bool32 ,
  shaderCullDistance: Bool32 ,
  shaderFloat64: Bool32 ,
  shaderInt64: Bool32 ,
  shaderInt16: Bool32 ,
  shaderResourceResidency: Bool32 ,
  shaderResourceMinLod: Bool32 ,
  sparseBinding: Bool32 ,
  sparseResidencyBuffer: Bool32 ,
  sparseResidencyImage2D: Bool32 ,
  sparseResidencyImage3D: Bool32 ,
  sparseResidency2Samples: Bool32 ,
  sparseResidency4Samples: Bool32 ,
  sparseResidency8Samples: Bool32 ,
  sparseResidency16Samples: Bool32 ,
  sparseResidencyAliased: Bool32 ,
  variableMultisampleRate: Bool32 ,
  inheritedQueries: Bool32 ,
  ) : PhysicalDeviceFeatures =
  result.robustBufferAccess = robustBufferAccess
  result.fullDrawIndexUint32 = fullDrawIndexUint32
  result.imageCubeArray = imageCubeArray
  result.independentBlend = independentBlend
  result.geometryShader = geometryShader
  result.tessellationShader = tessellationShader
  result.sampleRateShading = sampleRateShading
  result.dualSrcBlend = dualSrcBlend
  result.logicOp = logicOp
  result.multiDrawIndirect = multiDrawIndirect
  result.drawIndirectFirstInstance = drawIndirectFirstInstance
  result.depthClamp = depthClamp
  result.depthBiasClamp = depthBiasClamp
  result.fillModeNonSolid = fillModeNonSolid
  result.depthBounds = depthBounds
  result.wideLines = wideLines
  result.largePoints = largePoints
  result.alphaToOne = alphaToOne
  result.multiViewport = multiViewport
  result.samplerAnisotropy = samplerAnisotropy
  result.textureCompressionETC2 = textureCompressionETC2
  result.textureCompressionASTC_LDR = textureCompressionASTC_LDR
  result.textureCompressionBC = textureCompressionBC
  result.occlusionQueryPrecise = occlusionQueryPrecise
  result.pipelineStatisticsQuery = pipelineStatisticsQuery
  result.vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics
  result.fragmentStoresAndAtomics = fragmentStoresAndAtomics
  result.shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize
  result.shaderImageGatherExtended = shaderImageGatherExtended
  result.shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats
  result.shaderStorageImageMultisample = shaderStorageImageMultisample
  result.shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat
  result.shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat
  result.shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing
  result.shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing
  result.shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing
  result.shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing
  result.shaderClipDistance = shaderClipDistance
  result.shaderCullDistance = shaderCullDistance
  result.shaderFloat64 = shaderFloat64
  result.shaderInt64 = shaderInt64
  result.shaderInt16 = shaderInt16
  result.shaderResourceResidency = shaderResourceResidency
  result.shaderResourceMinLod = shaderResourceMinLod
  result.sparseBinding = sparseBinding
  result.sparseResidencyBuffer = sparseResidencyBuffer
  result.sparseResidencyImage2D = sparseResidencyImage2D
  result.sparseResidencyImage3D = sparseResidencyImage3D
  result.sparseResidency2Samples = sparseResidency2Samples
  result.sparseResidency4Samples = sparseResidency4Samples
  result.sparseResidency8Samples = sparseResidency8Samples
  result.sparseResidency16Samples = sparseResidency16Samples
  result.sparseResidencyAliased = sparseResidencyAliased
  result.variableMultisampleRate = variableMultisampleRate
  result.inheritedQueries = inheritedQueries

proc mkPhysicalDeviceSparseProperties*(
  residencyStandard2DBlockShape: Bool32 ,
  residencyStandard2DMultisampleBlockShape: Bool32 ,
  residencyStandard3DBlockShape: Bool32 ,
  residencyAlignedMipSize: Bool32 ,
  residencyNonResidentStrict: Bool32 ,
  ) : PhysicalDeviceSparseProperties =
  result.residencyStandard2DBlockShape = residencyStandard2DBlockShape
  result.residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape
  result.residencyStandard3DBlockShape = residencyStandard3DBlockShape
  result.residencyAlignedMipSize = residencyAlignedMipSize
  result.residencyNonResidentStrict = residencyNonResidentStrict

proc mkPhysicalDeviceLimits*(
  maxImageDimension1D: uint32 ,
  maxImageDimension2D: uint32 ,
  maxImageDimension3D: uint32 ,
  maxImageDimensionCube: uint32 ,
  maxImageArrayLayers: uint32 ,
  maxTexelBufferElements: uint32 ,
  maxUniformBufferRange: uint32 ,
  maxStorageBufferRange: uint32 ,
  maxPushConstantsSize: uint32 ,
  maxMemoryAllocationCount: uint32 ,
  maxSamplerAllocationCount: uint32 ,
  bufferImageGranularity: DeviceSize ,
  sparseAddressSpaceSize: DeviceSize ,
  maxBoundDescriptorSets: uint32 ,
  maxPerStageDescriptorSamplers: uint32 ,
  maxPerStageDescriptorUniformBuffers: uint32 ,
  maxPerStageDescriptorStorageBuffers: uint32 ,
  maxPerStageDescriptorSampledImages: uint32 ,
  maxPerStageDescriptorStorageImages: uint32 ,
  maxPerStageDescriptorInputAttachments: uint32 ,
  maxPerStageResources: uint32 ,
  maxDescriptorSetSamplers: uint32 ,
  maxDescriptorSetUniformBuffers: uint32 ,
  maxDescriptorSetUniformBuffersDynamic: uint32 ,
  maxDescriptorSetStorageBuffers: uint32 ,
  maxDescriptorSetStorageBuffersDynamic: uint32 ,
  maxDescriptorSetSampledImages: uint32 ,
  maxDescriptorSetStorageImages: uint32 ,
  maxDescriptorSetInputAttachments: uint32 ,
  maxVertexInputAttributes: uint32 ,
  maxVertexInputBindings: uint32 ,
  maxVertexInputAttributeOffset: uint32 ,
  maxVertexInputBindingStride: uint32 ,
  maxVertexOutputComponents: uint32 ,
  maxTessellationGenerationLevel: uint32 ,
  maxTessellationPatchSize: uint32 ,
  maxTessellationControlPerVertexInputComponents: uint32 ,
  maxTessellationControlPerVertexOutputComponents: uint32 ,
  maxTessellationControlPerPatchOutputComponents: uint32 ,
  maxTessellationControlTotalOutputComponents: uint32 ,
  maxTessellationEvaluationInputComponents: uint32 ,
  maxTessellationEvaluationOutputComponents: uint32 ,
  maxGeometryShaderInvocations: uint32 ,
  maxGeometryInputComponents: uint32 ,
  maxGeometryOutputComponents: uint32 ,
  maxGeometryOutputVertices: uint32 ,
  maxGeometryTotalOutputComponents: uint32 ,
  maxFragmentInputComponents: uint32 ,
  maxFragmentOutputAttachments: uint32 ,
  maxFragmentDualSrcAttachments: uint32 ,
  maxFragmentCombinedOutputResources: uint32 ,
  maxComputeSharedMemorySize: uint32 ,
  maxComputeWorkGroupCount: array[3,uint32] ,
  maxComputeWorkGroupInvocations: uint32 ,
  maxComputeWorkGroupSize: array[3,uint32] ,
  subPixelPrecisionBits: uint32 ,
  subTexelPrecisionBits: uint32 ,
  mipmapPrecisionBits: uint32 ,
  maxDrawIndexedIndexValue: uint32 ,
  maxDrawIndirectCount: uint32 ,
  maxSamplerLodBias: float32 ,
  maxSamplerAnisotropy: float32 ,
  maxViewports: uint32 ,
  maxViewportDimensions: array[2,uint32] ,
  viewportBoundsRange: array[2,float32] ,
  viewportSubPixelBits: uint32 ,
  minMemoryMapAlignment: uint ,
  minTexelBufferOffsetAlignment: DeviceSize ,
  minUniformBufferOffsetAlignment: DeviceSize ,
  minStorageBufferOffsetAlignment: DeviceSize ,
  minTexelOffset: int32 ,
  maxTexelOffset: uint32 ,
  minTexelGatherOffset: int32 ,
  maxTexelGatherOffset: uint32 ,
  minInterpolationOffset: float32 ,
  maxInterpolationOffset: float32 ,
  subPixelInterpolationOffsetBits: uint32 ,
  maxFramebufferWidth: uint32 ,
  maxFramebufferHeight: uint32 ,
  maxFramebufferLayers: uint32 ,
  framebufferColorSampleCounts: SampleCountFlags = {},
  framebufferDepthSampleCounts: SampleCountFlags = {},
  framebufferStencilSampleCounts: SampleCountFlags = {},
  framebufferNoAttachmentsSampleCounts: SampleCountFlags = {},
  maxColorAttachments: uint32 ,
  sampledImageColorSampleCounts: SampleCountFlags = {},
  sampledImageIntegerSampleCounts: SampleCountFlags = {},
  sampledImageDepthSampleCounts: SampleCountFlags = {},
  sampledImageStencilSampleCounts: SampleCountFlags = {},
  storageImageSampleCounts: SampleCountFlags = {},
  maxSampleMaskWords: uint32 ,
  timestampComputeAndGraphics: Bool32 ,
  timestampPeriod: float32 ,
  maxClipDistances: uint32 ,
  maxCullDistances: uint32 ,
  maxCombinedClipAndCullDistances: uint32 ,
  discreteQueuePriorities: uint32 ,
  pointSizeRange: array[2,float32] ,
  lineWidthRange: array[2,float32] ,
  pointSizeGranularity: float32 ,
  lineWidthGranularity: float32 ,
  strictLines: Bool32 ,
  standardSampleLocations: Bool32 ,
  optimalBufferCopyOffsetAlignment: DeviceSize ,
  optimalBufferCopyRowPitchAlignment: DeviceSize ,
  nonCoherentAtomSize: DeviceSize ,
  ) : PhysicalDeviceLimits =
  result.maxImageDimension1D = maxImageDimension1D
  result.maxImageDimension2D = maxImageDimension2D
  result.maxImageDimension3D = maxImageDimension3D
  result.maxImageDimensionCube = maxImageDimensionCube
  result.maxImageArrayLayers = maxImageArrayLayers
  result.maxTexelBufferElements = maxTexelBufferElements
  result.maxUniformBufferRange = maxUniformBufferRange
  result.maxStorageBufferRange = maxStorageBufferRange
  result.maxPushConstantsSize = maxPushConstantsSize
  result.maxMemoryAllocationCount = maxMemoryAllocationCount
  result.maxSamplerAllocationCount = maxSamplerAllocationCount
  result.bufferImageGranularity = bufferImageGranularity
  result.sparseAddressSpaceSize = sparseAddressSpaceSize
  result.maxBoundDescriptorSets = maxBoundDescriptorSets
  result.maxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers
  result.maxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers
  result.maxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers
  result.maxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages
  result.maxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages
  result.maxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments
  result.maxPerStageResources = maxPerStageResources
  result.maxDescriptorSetSamplers = maxDescriptorSetSamplers
  result.maxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers
  result.maxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic
  result.maxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers
  result.maxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic
  result.maxDescriptorSetSampledImages = maxDescriptorSetSampledImages
  result.maxDescriptorSetStorageImages = maxDescriptorSetStorageImages
  result.maxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments
  result.maxVertexInputAttributes = maxVertexInputAttributes
  result.maxVertexInputBindings = maxVertexInputBindings
  result.maxVertexInputAttributeOffset = maxVertexInputAttributeOffset
  result.maxVertexInputBindingStride = maxVertexInputBindingStride
  result.maxVertexOutputComponents = maxVertexOutputComponents
  result.maxTessellationGenerationLevel = maxTessellationGenerationLevel
  result.maxTessellationPatchSize = maxTessellationPatchSize
  result.maxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents
  result.maxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents
  result.maxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents
  result.maxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents
  result.maxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents
  result.maxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents
  result.maxGeometryShaderInvocations = maxGeometryShaderInvocations
  result.maxGeometryInputComponents = maxGeometryInputComponents
  result.maxGeometryOutputComponents = maxGeometryOutputComponents
  result.maxGeometryOutputVertices = maxGeometryOutputVertices
  result.maxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents
  result.maxFragmentInputComponents = maxFragmentInputComponents
  result.maxFragmentOutputAttachments = maxFragmentOutputAttachments
  result.maxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments
  result.maxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources
  result.maxComputeSharedMemorySize = maxComputeSharedMemorySize
  result.maxComputeWorkGroupCount = maxComputeWorkGroupCount
  result.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations
  result.maxComputeWorkGroupSize = maxComputeWorkGroupSize
  result.subPixelPrecisionBits = subPixelPrecisionBits
  result.subTexelPrecisionBits = subTexelPrecisionBits
  result.mipmapPrecisionBits = mipmapPrecisionBits
  result.maxDrawIndexedIndexValue = maxDrawIndexedIndexValue
  result.maxDrawIndirectCount = maxDrawIndirectCount
  result.maxSamplerLodBias = maxSamplerLodBias
  result.maxSamplerAnisotropy = maxSamplerAnisotropy
  result.maxViewports = maxViewports
  result.maxViewportDimensions = maxViewportDimensions
  result.viewportBoundsRange = viewportBoundsRange
  result.viewportSubPixelBits = viewportSubPixelBits
  result.minMemoryMapAlignment = minMemoryMapAlignment
  result.minTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment
  result.minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment
  result.minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment
  result.minTexelOffset = minTexelOffset
  result.maxTexelOffset = maxTexelOffset
  result.minTexelGatherOffset = minTexelGatherOffset
  result.maxTexelGatherOffset = maxTexelGatherOffset
  result.minInterpolationOffset = minInterpolationOffset
  result.maxInterpolationOffset = maxInterpolationOffset
  result.subPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits
  result.maxFramebufferWidth = maxFramebufferWidth
  result.maxFramebufferHeight = maxFramebufferHeight
  result.maxFramebufferLayers = maxFramebufferLayers
  result.framebufferColorSampleCounts = framebufferColorSampleCounts
  result.framebufferDepthSampleCounts = framebufferDepthSampleCounts
  result.framebufferStencilSampleCounts = framebufferStencilSampleCounts
  result.framebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts
  result.maxColorAttachments = maxColorAttachments
  result.sampledImageColorSampleCounts = sampledImageColorSampleCounts
  result.sampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts
  result.sampledImageDepthSampleCounts = sampledImageDepthSampleCounts
  result.sampledImageStencilSampleCounts = sampledImageStencilSampleCounts
  result.storageImageSampleCounts = storageImageSampleCounts
  result.maxSampleMaskWords = maxSampleMaskWords
  result.timestampComputeAndGraphics = timestampComputeAndGraphics
  result.timestampPeriod = timestampPeriod
  result.maxClipDistances = maxClipDistances
  result.maxCullDistances = maxCullDistances
  result.maxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances
  result.discreteQueuePriorities = discreteQueuePriorities
  result.pointSizeRange = pointSizeRange
  result.lineWidthRange = lineWidthRange
  result.pointSizeGranularity = pointSizeGranularity
  result.lineWidthGranularity = lineWidthGranularity
  result.strictLines = strictLines
  result.standardSampleLocations = standardSampleLocations
  result.optimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment
  result.optimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment
  result.nonCoherentAtomSize = nonCoherentAtomSize

proc mkSemaphoreCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
  pNext: pointer = nil,
  flags: SemaphoreCreateFlags = {},
  ) : SemaphoreCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkQueryPoolCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: QueryPoolCreateFlags = {},
  queryType: QueryType ,
  queryCount: uint32 ,
  pipelineStatistics: QueryPipelineStatisticFlags = {},
  ) : QueryPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queryType = queryType
  result.queryCount = queryCount
  result.pipelineStatistics = pipelineStatistics

proc mkFramebufferCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
  pNext: pointer = nil,
  flags: FramebufferCreateFlags = {},
  renderPass: RenderPass ,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr ImageView ,
  width: uint32 ,
  height: uint32 ,
  layers: uint32 ,
  ) : FramebufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.renderPass = renderPass
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.width = width
  result.height = height
  result.layers = layers

proc mkSubmitInfo*(
  sType: StructureType = STRUCTURE_TYPE_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr Semaphore ,
  pWaitDstStageMask: ptr PipelineStageFlags ,
  commandBufferCount: uint32 = 0.uint32,
  pCommandBuffers: ptr CommandBuffer ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphores: ptr Semaphore ,
  ) : SubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.pWaitDstStageMask = pWaitDstStageMask
  result.commandBufferCount = commandBufferCount
  result.pCommandBuffers = pCommandBuffers
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphores = pSignalSemaphores

proc mkDisplayPropertiesKHR*(
  display: DisplayKHR ,
  displayName: cstring ,
  physicalDimensions: Extent2D ,
  physicalResolution: Extent2D ,
  supportedTransforms: SurfaceTransformFlagsKHR = {},
  planeReorderPossible: Bool32 ,
  persistentContent: Bool32 ,
  ) : DisplayPropertiesKHR =
  result.display = display
  result.displayName = displayName
  result.physicalDimensions = physicalDimensions
  result.physicalResolution = physicalResolution
  result.supportedTransforms = supportedTransforms
  result.planeReorderPossible = planeReorderPossible
  result.persistentContent = persistentContent

proc mkDisplayModeCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: DisplayModeCreateFlagsKHR = {},
  parameters: DisplayModeParametersKHR ,
  ) : DisplayModeCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.parameters = parameters

proc mkDisplayPlaneCapabilitiesKHR*(
  supportedAlpha: DisplayPlaneAlphaFlagsKHR = {},
  minSrcPosition: Offset2D ,
  maxSrcPosition: Offset2D ,
  minSrcExtent: Extent2D ,
  maxSrcExtent: Extent2D ,
  minDstPosition: Offset2D ,
  maxDstPosition: Offset2D ,
  minDstExtent: Extent2D ,
  maxDstExtent: Extent2D ,
  ) : DisplayPlaneCapabilitiesKHR =
  result.supportedAlpha = supportedAlpha
  result.minSrcPosition = minSrcPosition
  result.maxSrcPosition = maxSrcPosition
  result.minSrcExtent = minSrcExtent
  result.maxSrcExtent = maxSrcExtent
  result.minDstPosition = minDstPosition
  result.maxDstPosition = maxDstPosition
  result.minDstExtent = minDstExtent
  result.maxDstExtent = maxDstExtent

proc mkDisplaySurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: DisplaySurfaceCreateFlagsKHR = {},
  displayMode: DisplayModeKHR ,
  planeIndex: uint32 ,
  planeStackIndex: uint32 ,
  transform: SurfaceTransformFlagBitsKHR ,
  globalAlpha: float32 ,
  alphaMode: DisplayPlaneAlphaFlagBitsKHR ,
  imageExtent: Extent2D ,
  ) : DisplaySurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.displayMode = displayMode
  result.planeIndex = planeIndex
  result.planeStackIndex = planeStackIndex
  result.transform = transform
  result.globalAlpha = globalAlpha
  result.alphaMode = alphaMode
  result.imageExtent = imageExtent

proc mkDisplayPresentInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  srcRect: Rect2D ,
  dstRect: Rect2D ,
  persistent: Bool32 ,
  ) : DisplayPresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.srcRect = srcRect
  result.dstRect = dstRect
  result.persistent = persistent

proc mkSurfaceCapabilitiesKHR*(
  minImageCount: uint32 ,
  maxImageCount: uint32 ,
  currentExtent: Extent2D ,
  minImageExtent: Extent2D ,
  maxImageExtent: Extent2D ,
  maxImageArrayLayers: uint32 ,
  supportedTransforms: SurfaceTransformFlagsKHR = {},
  currentTransform: SurfaceTransformFlagBitsKHR ,
  supportedCompositeAlpha: CompositeAlphaFlagsKHR = {},
  supportedUsageFlags: ImageUsageFlags = {},
  ) : SurfaceCapabilitiesKHR =
  result.minImageCount = minImageCount
  result.maxImageCount = maxImageCount
  result.currentExtent = currentExtent
  result.minImageExtent = minImageExtent
  result.maxImageExtent = maxImageExtent
  result.maxImageArrayLayers = maxImageArrayLayers
  result.supportedTransforms = supportedTransforms
  result.currentTransform = currentTransform
  result.supportedCompositeAlpha = supportedCompositeAlpha
  result.supportedUsageFlags = supportedUsageFlags

proc mkAndroidSurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: AndroidSurfaceCreateFlagsKHR = {},
  window: ptr ANativeWindow ,
  ) : AndroidSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.window = window

proc mkViSurfaceCreateInfoNN*(
  sType: StructureType = STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
  pNext: pointer = nil,
  flags: ViSurfaceCreateFlagsNN = {},
  window: pointer ,
  ) : ViSurfaceCreateInfoNN =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.window = window

proc mkWaylandSurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: WaylandSurfaceCreateFlagsKHR = {},
  display: ptr wl_display ,
  surface: ptr wl_surface ,
  ) : WaylandSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.display = display
  result.surface = surface

proc mkWin32SurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: Win32SurfaceCreateFlagsKHR = {},
  hinstance: HINSTANCE ,
  hwnd: HWND ,
  ) : Win32SurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.hinstance = hinstance
  result.hwnd = hwnd

proc mkXlibSurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: XlibSurfaceCreateFlagsKHR = {},
  dpy: ptr Display ,
  window: Window ,
  ) : XlibSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dpy = dpy
  result.window = window

proc mkXcbSurfaceCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: XcbSurfaceCreateFlagsKHR = {},
  connection: ptr xcb_connection_t ,
  window: xcb_window_t ,
  ) : XcbSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.connection = connection
  result.window = window

proc mkDirectFBSurfaceCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: DirectFBSurfaceCreateFlagsEXT = {},
  dfb: ptr IDirectFB ,
  surface: ptr IDirectFBSurface ,
  ) : DirectFBSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dfb = dfb
  result.surface = surface

proc mkImagePipeSurfaceCreateInfoFUCHSIA*(
  sType: StructureType = STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
  pNext: pointer = nil,
  flags: ImagePipeSurfaceCreateFlagsFUCHSIA = {},
  imagePipeHandle: zx_handle_t ,
  ) : ImagePipeSurfaceCreateInfoFUCHSIA =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.imagePipeHandle = imagePipeHandle

proc mkStreamDescriptorSurfaceCreateInfoGGP*(
  sType: StructureType = STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
  pNext: pointer = nil,
  flags: StreamDescriptorSurfaceCreateFlagsGGP = {},
  streamDescriptor: GgpStreamDescriptor ,
  ) : StreamDescriptorSurfaceCreateInfoGGP =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.streamDescriptor = streamDescriptor

proc mkSwapchainCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: SwapchainCreateFlagsKHR = {},
  surface: SurfaceKHR ,
  minImageCount: uint32 ,
  imageFormat: Format ,
  imageColorSpace: ColorSpaceKHR ,
  imageExtent: Extent2D ,
  imageArrayLayers: uint32 ,
  imageUsage: ImageUsageFlags ,
  imageSharingMode: SharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  preTransform: SurfaceTransformFlagBitsKHR ,
  compositeAlpha: CompositeAlphaFlagBitsKHR ,
  presentMode: PresentModeKHR ,
  clipped: Bool32 ,
  oldSwapchain: SwapchainKHR = SwapchainKHR(nil),
  ) : SwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.surface = surface
  result.minImageCount = minImageCount
  result.imageFormat = imageFormat
  result.imageColorSpace = imageColorSpace
  result.imageExtent = imageExtent
  result.imageArrayLayers = imageArrayLayers
  result.imageUsage = imageUsage
  result.imageSharingMode = imageSharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices
  result.preTransform = preTransform
  result.compositeAlpha = compositeAlpha
  result.presentMode = presentMode
  result.clipped = clipped
  result.oldSwapchain = oldSwapchain

proc mkDebugReportCallbackCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: DebugReportFlagsEXT = {},
  pfnCallback: PFN_vkDebugReportCallbackEXT ,
  pUserData: pointer = nil,
  ) : DebugReportCallbackCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pfnCallback = pfnCallback
  result.pUserData = pUserData

proc mkDedicatedAllocationImageCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
  pNext: pointer = nil,
  dedicatedAllocation: Bool32 ,
  ) : DedicatedAllocationImageCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocation = dedicatedAllocation

proc mkDedicatedAllocationBufferCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
  pNext: pointer = nil,
  dedicatedAllocation: Bool32 ,
  ) : DedicatedAllocationBufferCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocation = dedicatedAllocation

proc mkExternalImageFormatPropertiesNV*(
  imageFormatProperties: ImageFormatProperties ,
  externalMemoryFeatures: ExternalMemoryFeatureFlagsNV = {},
  exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlagsNV = {},
  compatibleHandleTypes: ExternalMemoryHandleTypeFlagsNV = {},
  ) : ExternalImageFormatPropertiesNV =
  result.imageFormatProperties = imageFormatProperties
  result.externalMemoryFeatures = externalMemoryFeatures
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes

proc mkExternalMemoryImageCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
  pNext: pointer = nil,
  handleTypes: ExternalMemoryHandleTypeFlagsNV = {},
  ) : ExternalMemoryImageCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkExportMemoryAllocateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
  pNext: pointer = nil,
  handleTypes: ExternalMemoryHandleTypeFlagsNV = {},
  ) : ExportMemoryAllocateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkImportMemoryWin32HandleInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  pNext: pointer = nil,
  handleType: ExternalMemoryHandleTypeFlagsNV = {},
  handle: HANDLE = nil,
  ) : ImportMemoryWin32HandleInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.handle = handle

proc mkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
  pNext: pointer = nil,
  deviceGeneratedCommands: Bool32 ,
  ) : PhysicalDeviceDeviceGeneratedCommandsFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.deviceGeneratedCommands = deviceGeneratedCommands

proc mkPrivateDataSlotCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: PrivateDataSlotCreateFlagsEXT ,
  ) : PrivateDataSlotCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkPhysicalDevicePrivateDataFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
  pNext: pointer = nil,
  privateData: Bool32 ,
  ) : PhysicalDevicePrivateDataFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.privateData = privateData

proc mkGraphicsShaderGroupCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
  pNext: pointer = nil,
  stageCount: uint32 ,
  pStages: ptr PipelineShaderStageCreateInfo ,
  pVertexInputState: ptr PipelineVertexInputStateCreateInfo = nil,
  pTessellationState: ptr PipelineTessellationStateCreateInfo = nil,
  ) : GraphicsShaderGroupCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.stageCount = stageCount
  result.pStages = pStages
  result.pVertexInputState = pVertexInputState
  result.pTessellationState = pTessellationState

proc mkGraphicsPipelineShaderGroupsCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
  pNext: pointer = nil,
  groupCount: uint32 ,
  pGroups: ptr GraphicsShaderGroupCreateInfoNV ,
  pipelineCount: uint32 = 0.uint32,
  pPipelines: ptr Pipeline ,
  ) : GraphicsPipelineShaderGroupsCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.pipelineCount = pipelineCount
  result.pPipelines = pPipelines

proc mkBindIndexBufferIndirectCommandNV*(
  bufferAddress: DeviceAddress ,
  size: uint32 ,
  indexType: IndexType ,
  ) : BindIndexBufferIndirectCommandNV =
  result.bufferAddress = bufferAddress
  result.size = size
  result.indexType = indexType

proc mkBindVertexBufferIndirectCommandNV*(
  bufferAddress: DeviceAddress ,
  size: uint32 ,
  stride: uint32 ,
  ) : BindVertexBufferIndirectCommandNV =
  result.bufferAddress = bufferAddress
  result.size = size
  result.stride = stride

proc mkIndirectCommandsStreamNV*(
  buffer: Buffer ,
  offset: DeviceSize ,
  ) : IndirectCommandsStreamNV =
  result.buffer = buffer
  result.offset = offset

proc mkIndirectCommandsLayoutTokenNV*(
  sType: StructureType = STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
  pNext: pointer = nil,
  tokenType: IndirectCommandsTokenTypeNV ,
  stream: uint32 ,
  offset: uint32 ,
  vertexBindingUnit: uint32 ,
  vertexDynamicStride: Bool32 ,
  pushconstantPipelineLayout: PipelineLayout = PipelineLayout(nil),
  pushconstantShaderStageFlags: ShaderStageFlags = {},
  pushconstantOffset: uint32 ,
  pushconstantSize: uint32 ,
  indirectStateFlags: IndirectStateFlagsNV = {},
  indexTypeCount: uint32 = 0.uint32,
  pIndexTypes: ptr IndexType ,
  pIndexTypeValues: ptr uint32 ,
  ) : IndirectCommandsLayoutTokenNV =
  result.sType = sType
  result.pNext = pNext
  result.tokenType = tokenType
  result.stream = stream
  result.offset = offset
  result.vertexBindingUnit = vertexBindingUnit
  result.vertexDynamicStride = vertexDynamicStride
  result.pushconstantPipelineLayout = pushconstantPipelineLayout
  result.pushconstantShaderStageFlags = pushconstantShaderStageFlags
  result.pushconstantOffset = pushconstantOffset
  result.pushconstantSize = pushconstantSize
  result.indirectStateFlags = indirectStateFlags
  result.indexTypeCount = indexTypeCount
  result.pIndexTypes = pIndexTypes
  result.pIndexTypeValues = pIndexTypeValues

proc mkIndirectCommandsLayoutCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: IndirectCommandsLayoutUsageFlagsNV ,
  pipelineBindPoint: PipelineBindPoint ,
  tokenCount: uint32 ,
  pTokens: ptr IndirectCommandsLayoutTokenNV ,
  streamCount: uint32 ,
  pStreamStrides: ptr uint32 ,
  ) : IndirectCommandsLayoutCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.tokenCount = tokenCount
  result.pTokens = pTokens
  result.streamCount = streamCount
  result.pStreamStrides = pStreamStrides

proc mkGeneratedCommandsInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
  pNext: pointer = nil,
  pipelineBindPoint: PipelineBindPoint ,
  pipeline: Pipeline ,
  indirectCommandsLayout: IndirectCommandsLayoutNV ,
  streamCount: uint32 ,
  pStreams: ptr IndirectCommandsStreamNV ,
  sequencesCount: uint32 ,
  preprocessBuffer: Buffer ,
  preprocessOffset: DeviceSize ,
  preprocessSize: DeviceSize ,
  sequencesCountBuffer: Buffer = Buffer(nil),
  sequencesCountOffset: DeviceSize = 0.DeviceSize,
  sequencesIndexBuffer: Buffer = Buffer(nil),
  sequencesIndexOffset: DeviceSize = 0.DeviceSize,
  ) : GeneratedCommandsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pipelineBindPoint = pipelineBindPoint
  result.pipeline = pipeline
  result.indirectCommandsLayout = indirectCommandsLayout
  result.streamCount = streamCount
  result.pStreams = pStreams
  result.sequencesCount = sequencesCount
  result.preprocessBuffer = preprocessBuffer
  result.preprocessOffset = preprocessOffset
  result.preprocessSize = preprocessSize
  result.sequencesCountBuffer = sequencesCountBuffer
  result.sequencesCountOffset = sequencesCountOffset
  result.sequencesIndexBuffer = sequencesIndexBuffer
  result.sequencesIndexOffset = sequencesIndexOffset

proc mkPhysicalDeviceFeatures2*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
  pNext: pointer = nil,
  features: PhysicalDeviceFeatures ,
  ) : PhysicalDeviceFeatures2 =
  result.sType = sType
  result.pNext = pNext
  result.features = features

proc mkFormatProperties2*(
  sType: StructureType = STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  formatProperties: FormatProperties ,
  ) : FormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.formatProperties = formatProperties

proc mkImageFormatProperties2*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  imageFormatProperties: ImageFormatProperties ,
  ) : ImageFormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.imageFormatProperties = imageFormatProperties

proc mkPhysicalDeviceImageFormatInfo2*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
  pNext: pointer = nil,
  format: Format ,
  `type`: ImageType ,
  tiling: ImageTiling ,
  usage: ImageUsageFlags ,
  flags: ImageCreateFlags = {},
  ) : PhysicalDeviceImageFormatInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.`type` = `type`
  result.tiling = tiling
  result.usage = usage
  result.flags = flags

proc mkQueueFamilyProperties2*(
  sType: StructureType = STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
  pNext: pointer = nil,
  queueFamilyProperties: QueueFamilyProperties ,
  ) : QueueFamilyProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.queueFamilyProperties = queueFamilyProperties

proc mkSparseImageFormatProperties2*(
  sType: StructureType = STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  properties: SparseImageFormatProperties ,
  ) : SparseImageFormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.properties = properties

proc mkPhysicalDeviceSparseImageFormatInfo2*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
  pNext: pointer = nil,
  format: Format ,
  `type`: ImageType ,
  samples: SampleCountFlagBits ,
  usage: ImageUsageFlags ,
  tiling: ImageTiling ,
  ) : PhysicalDeviceSparseImageFormatInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.`type` = `type`
  result.samples = samples
  result.usage = usage
  result.tiling = tiling

proc mkPresentRegionKHR*(
  rectangleCount: uint32 = 0.uint32,
  pRectangles: ptr RectLayerKHR = nil,
  ) : PresentRegionKHR =
  result.rectangleCount = rectangleCount
  result.pRectangles = pRectangles

proc mkPhysicalDeviceVariablePointersFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
  pNext: pointer = nil,
  variablePointersStorageBuffer: Bool32 ,
  variablePointers: Bool32 ,
  ) : PhysicalDeviceVariablePointersFeatures =
  result.sType = sType
  result.pNext = pNext
  result.variablePointersStorageBuffer = variablePointersStorageBuffer
  result.variablePointers = variablePointers

proc mkExternalMemoryProperties*(
  externalMemoryFeatures: ExternalMemoryFeatureFlags ,
  exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlags = {},
  compatibleHandleTypes: ExternalMemoryHandleTypeFlags ,
  ) : ExternalMemoryProperties =
  result.externalMemoryFeatures = externalMemoryFeatures
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes

proc mkExternalImageFormatProperties*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
  pNext: pointer = nil,
  externalMemoryProperties: ExternalMemoryProperties ,
  ) : ExternalImageFormatProperties =
  result.sType = sType
  result.pNext = pNext
  result.externalMemoryProperties = externalMemoryProperties

proc mkPhysicalDeviceExternalBufferInfo*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
  pNext: pointer = nil,
  flags: BufferCreateFlags = {},
  usage: BufferUsageFlags ,
  handleType: ExternalMemoryHandleTypeFlagBits ,
  ) : PhysicalDeviceExternalBufferInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.usage = usage
  result.handleType = handleType

proc mkExternalBufferProperties*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
  pNext: pointer = nil,
  externalMemoryProperties: ExternalMemoryProperties ,
  ) : ExternalBufferProperties =
  result.sType = sType
  result.pNext = pNext
  result.externalMemoryProperties = externalMemoryProperties

proc mkPhysicalDeviceIDProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
  pNext: pointer = nil,
  deviceUUID: array[UUID_SIZE,uint8] ,
  driverUUID: array[UUID_SIZE,uint8] ,
  deviceLUID: array[LUID_SIZE,uint8] ,
  deviceNodeMask: uint32 ,
  deviceLUIDValid: Bool32 ,
  ) : PhysicalDeviceIDProperties =
  result.sType = sType
  result.pNext = pNext
  result.deviceUUID = deviceUUID
  result.driverUUID = driverUUID
  result.deviceLUID = deviceLUID
  result.deviceNodeMask = deviceNodeMask
  result.deviceLUIDValid = deviceLUIDValid

proc mkExternalMemoryImageCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: ExternalMemoryHandleTypeFlags ,
  ) : ExternalMemoryImageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkExternalMemoryBufferCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: ExternalMemoryHandleTypeFlags = {},
  ) : ExternalMemoryBufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkExportMemoryAllocateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
  pNext: pointer = nil,
  handleTypes: ExternalMemoryHandleTypeFlags = {},
  ) : ExportMemoryAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkExternalSemaphoreProperties*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
  pNext: pointer = nil,
  exportFromImportedHandleTypes: ExternalSemaphoreHandleTypeFlags ,
  compatibleHandleTypes: ExternalSemaphoreHandleTypeFlags ,
  externalSemaphoreFeatures: ExternalSemaphoreFeatureFlags = {},
  ) : ExternalSemaphoreProperties =
  result.sType = sType
  result.pNext = pNext
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes
  result.externalSemaphoreFeatures = externalSemaphoreFeatures

proc mkExportSemaphoreCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: ExternalSemaphoreHandleTypeFlags = {},
  ) : ExportSemaphoreCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkImportSemaphoreWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  semaphore: Semaphore ,
  flags: SemaphoreImportFlags = {},
  handleType: ExternalSemaphoreHandleTypeFlagBits = 0.ExternalSemaphoreHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : ImportSemaphoreWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.flags = flags
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkImportSemaphoreFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
  pNext: pointer = nil,
  semaphore: Semaphore ,
  flags: SemaphoreImportFlags = {},
  handleType: ExternalSemaphoreHandleTypeFlagBits ,
  fd: cint ,
  ) : ImportSemaphoreFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.flags = flags
  result.handleType = handleType
  result.fd = fd

proc mkExternalFenceProperties*(
  sType: StructureType = STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
  pNext: pointer = nil,
  exportFromImportedHandleTypes: ExternalFenceHandleTypeFlags ,
  compatibleHandleTypes: ExternalFenceHandleTypeFlags ,
  externalFenceFeatures: ExternalFenceFeatureFlags = {},
  ) : ExternalFenceProperties =
  result.sType = sType
  result.pNext = pNext
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes
  result.externalFenceFeatures = externalFenceFeatures

proc mkExportFenceCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: ExternalFenceHandleTypeFlags = {},
  ) : ExportFenceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkImportFenceWin32HandleInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  fence: Fence ,
  flags: FenceImportFlags = {},
  handleType: ExternalFenceHandleTypeFlagBits = 0.ExternalFenceHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : ImportFenceWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.flags = flags
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkImportFenceFdInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
  pNext: pointer = nil,
  fence: Fence ,
  flags: FenceImportFlags = {},
  handleType: ExternalFenceHandleTypeFlagBits ,
  fd: cint ,
  ) : ImportFenceFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.flags = flags
  result.handleType = handleType
  result.fd = fd

proc mkPhysicalDeviceMultiviewFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
  pNext: pointer = nil,
  multiview: Bool32 ,
  multiviewGeometryShader: Bool32 ,
  multiviewTessellationShader: Bool32 ,
  ) : PhysicalDeviceMultiviewFeatures =
  result.sType = sType
  result.pNext = pNext
  result.multiview = multiview
  result.multiviewGeometryShader = multiviewGeometryShader
  result.multiviewTessellationShader = multiviewTessellationShader

proc mkSurfaceCapabilities2EXT*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
  pNext: pointer = nil,
  minImageCount: uint32 ,
  maxImageCount: uint32 ,
  currentExtent: Extent2D ,
  minImageExtent: Extent2D ,
  maxImageExtent: Extent2D ,
  maxImageArrayLayers: uint32 ,
  supportedTransforms: SurfaceTransformFlagsKHR = {},
  currentTransform: SurfaceTransformFlagBitsKHR ,
  supportedCompositeAlpha: CompositeAlphaFlagsKHR = {},
  supportedUsageFlags: ImageUsageFlags = {},
  supportedSurfaceCounters: SurfaceCounterFlagsEXT = {},
  ) : SurfaceCapabilities2EXT =
  result.sType = sType
  result.pNext = pNext
  result.minImageCount = minImageCount
  result.maxImageCount = maxImageCount
  result.currentExtent = currentExtent
  result.minImageExtent = minImageExtent
  result.maxImageExtent = maxImageExtent
  result.maxImageArrayLayers = maxImageArrayLayers
  result.supportedTransforms = supportedTransforms
  result.currentTransform = currentTransform
  result.supportedCompositeAlpha = supportedCompositeAlpha
  result.supportedUsageFlags = supportedUsageFlags
  result.supportedSurfaceCounters = supportedSurfaceCounters

proc mkSwapchainCounterCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
  pNext: pointer = nil,
  surfaceCounters: SurfaceCounterFlagsEXT = {},
  ) : SwapchainCounterCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.surfaceCounters = surfaceCounters

proc mkPhysicalDeviceGroupProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
  pNext: pointer = nil,
  physicalDeviceCount: uint32 ,
  physicalDevices: array[MAX_DEVICE_GROUP_SIZE,PhysicalDevice] ,
  subsetAllocation: Bool32 ,
  ) : PhysicalDeviceGroupProperties =
  result.sType = sType
  result.pNext = pNext
  result.physicalDeviceCount = physicalDeviceCount
  result.physicalDevices = physicalDevices
  result.subsetAllocation = subsetAllocation

proc mkMemoryAllocateFlagsInfo*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
  pNext: pointer = nil,
  flags: MemoryAllocateFlags = {},
  deviceMask: uint32 ,
  ) : MemoryAllocateFlagsInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.deviceMask = deviceMask

proc mkBindBufferMemoryInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
  pNext: pointer = nil,
  buffer: Buffer ,
  memory: DeviceMemory ,
  memoryOffset: DeviceSize ,
  ) : BindBufferMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer
  result.memory = memory
  result.memoryOffset = memoryOffset

proc mkBindImageMemoryInfo*(
  sType: StructureType = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
  pNext: pointer = nil,
  image: Image ,
  memory: DeviceMemory ,
  memoryOffset: DeviceSize ,
  ) : BindImageMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.memory = memory
  result.memoryOffset = memoryOffset

proc mkDeviceGroupPresentCapabilitiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
  pNext: pointer = nil,
  presentMask: array[MAX_DEVICE_GROUP_SIZE,uint32] ,
  modes: DeviceGroupPresentModeFlagsKHR ,
  ) : DeviceGroupPresentCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.presentMask = presentMask
  result.modes = modes

proc mkDeviceGroupSwapchainCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  modes: DeviceGroupPresentModeFlagsKHR ,
  ) : DeviceGroupSwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.modes = modes

proc mkDescriptorUpdateTemplateCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: DescriptorUpdateTemplateCreateFlags = {},
  descriptorUpdateEntryCount: uint32 ,
  pDescriptorUpdateEntries: ptr DescriptorUpdateTemplateEntry ,
  templateType: DescriptorUpdateTemplateType ,
  descriptorSetLayout: DescriptorSetLayout ,
  pipelineBindPoint: PipelineBindPoint ,
  pipelineLayout: PipelineLayout ,
  set: uint32 ,
  ) : DescriptorUpdateTemplateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.descriptorUpdateEntryCount = descriptorUpdateEntryCount
  result.pDescriptorUpdateEntries = pDescriptorUpdateEntries
  result.templateType = templateType
  result.descriptorSetLayout = descriptorSetLayout
  result.pipelineBindPoint = pipelineBindPoint
  result.pipelineLayout = pipelineLayout
  result.set = set

proc mkDisplayNativeHdrSurfaceCapabilitiesAMD*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
  pNext: pointer = nil,
  localDimmingSupport: Bool32 ,
  ) : DisplayNativeHdrSurfaceCapabilitiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.localDimmingSupport = localDimmingSupport

proc mkSwapchainDisplayNativeHdrCreateInfoAMD*(
  sType: StructureType = STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
  pNext: pointer = nil,
  localDimmingEnable: Bool32 ,
  ) : SwapchainDisplayNativeHdrCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.localDimmingEnable = localDimmingEnable

proc mkPresentTimesInfoGOOGLE*(
  sType: StructureType = STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
  pNext: pointer = nil,
  swapchainCount: uint32 ,
  pTimes: ptr PresentTimeGOOGLE = nil,
  ) : PresentTimesInfoGOOGLE =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pTimes = pTimes

proc mkIOSSurfaceCreateInfoMVK*(
  sType: StructureType = STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
  pNext: pointer = nil,
  flags: IOSSurfaceCreateFlagsMVK = {},
  pView: pointer ,
  ) : IOSSurfaceCreateInfoMVK =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pView = pView

proc mkMacOSSurfaceCreateInfoMVK*(
  sType: StructureType = STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
  pNext: pointer = nil,
  flags: MacOSSurfaceCreateFlagsMVK = {},
  pView: pointer ,
  ) : MacOSSurfaceCreateInfoMVK =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pView = pView

proc mkMetalSurfaceCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: MetalSurfaceCreateFlagsEXT = {},
  pLayer: ptr CAMetalLayer ,
  ) : MetalSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pLayer = pLayer

proc mkPipelineViewportWScalingStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  viewportWScalingEnable: Bool32 ,
  viewportCount: uint32 ,
  pViewportWScalings: ptr ViewportWScalingNV = nil,
  ) : PipelineViewportWScalingStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.viewportWScalingEnable = viewportWScalingEnable
  result.viewportCount = viewportCount
  result.pViewportWScalings = pViewportWScalings

proc mkPipelineViewportSwizzleStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: PipelineViewportSwizzleStateCreateFlagsNV = {},
  viewportCount: uint32 ,
  pViewportSwizzles: ptr ViewportSwizzleNV ,
  ) : PipelineViewportSwizzleStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.viewportCount = viewportCount
  result.pViewportSwizzles = pViewportSwizzles

proc mkPipelineDiscardRectangleStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: PipelineDiscardRectangleStateCreateFlagsEXT = {},
  discardRectangleMode: DiscardRectangleModeEXT ,
  discardRectangleCount: uint32 = 0.uint32,
  pDiscardRectangles: ptr Rect2D ,
  ) : PipelineDiscardRectangleStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.discardRectangleMode = discardRectangleMode
  result.discardRectangleCount = discardRectangleCount
  result.pDiscardRectangles = pDiscardRectangles

proc mkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
  pNext: pointer = nil,
  perViewPositionAllComponents: Bool32 ,
  ) : PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
  result.sType = sType
  result.pNext = pNext
  result.perViewPositionAllComponents = perViewPositionAllComponents

proc mkInputAttachmentAspectReference*(
  subpass: uint32 ,
  inputAttachmentIndex: uint32 ,
  aspectMask: ImageAspectFlags ,
  ) : InputAttachmentAspectReference =
  result.subpass = subpass
  result.inputAttachmentIndex = inputAttachmentIndex
  result.aspectMask = aspectMask

proc mkRenderPassInputAttachmentAspectCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
  pNext: pointer = nil,
  aspectReferenceCount: uint32 ,
  pAspectReferences: ptr InputAttachmentAspectReference ,
  ) : RenderPassInputAttachmentAspectCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.aspectReferenceCount = aspectReferenceCount
  result.pAspectReferences = pAspectReferences

proc mkSurfaceCapabilities2KHR*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
  pNext: pointer = nil,
  surfaceCapabilities: SurfaceCapabilitiesKHR ,
  ) : SurfaceCapabilities2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surfaceCapabilities = surfaceCapabilities

proc mkDisplayProperties2KHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayProperties: DisplayPropertiesKHR ,
  ) : DisplayProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayProperties = displayProperties

proc mkDisplayPlaneCapabilities2KHR*(
  sType: StructureType = STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
  pNext: pointer = nil,
  capabilities: DisplayPlaneCapabilitiesKHR ,
  ) : DisplayPlaneCapabilities2KHR =
  result.sType = sType
  result.pNext = pNext
  result.capabilities = capabilities

proc mkSharedPresentSurfaceCapabilitiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
  pNext: pointer = nil,
  sharedPresentSupportedUsageFlags: ImageUsageFlags = {},
  ) : SharedPresentSurfaceCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.sharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags

proc mkPhysicalDevice16BitStorageFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
  pNext: pointer = nil,
  storageBuffer16BitAccess: Bool32 ,
  uniformAndStorageBuffer16BitAccess: Bool32 ,
  storagePushConstant16: Bool32 ,
  storageInputOutput16: Bool32 ,
  ) : PhysicalDevice16BitStorageFeatures =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer16BitAccess = storageBuffer16BitAccess
  result.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
  result.storagePushConstant16 = storagePushConstant16
  result.storageInputOutput16 = storageInputOutput16

proc mkPhysicalDeviceSubgroupProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
  pNext: pointer = nil,
  subgroupSize: uint32 ,
  supportedStages: ShaderStageFlags ,
  supportedOperations: SubgroupFeatureFlags ,
  quadOperationsInAllStages: Bool32 ,
  ) : PhysicalDeviceSubgroupProperties =
  result.sType = sType
  result.pNext = pNext
  result.subgroupSize = subgroupSize
  result.supportedStages = supportedStages
  result.supportedOperations = supportedOperations
  result.quadOperationsInAllStages = quadOperationsInAllStages

proc mkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
  pNext: pointer = nil,
  shaderSubgroupExtendedTypes: Bool32 ,
  ) : PhysicalDeviceShaderSubgroupExtendedTypesFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes

proc mkMemoryRequirements2*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
  pNext: pointer = nil,
  memoryRequirements: MemoryRequirements ,
  ) : MemoryRequirements2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryRequirements = memoryRequirements

proc mkSparseImageMemoryRequirements2*(
  sType: StructureType = STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
  pNext: pointer = nil,
  memoryRequirements: SparseImageMemoryRequirements ,
  ) : SparseImageMemoryRequirements2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryRequirements = memoryRequirements

proc mkMemoryDedicatedRequirements*(
  sType: StructureType = STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
  pNext: pointer = nil,
  prefersDedicatedAllocation: Bool32 ,
  requiresDedicatedAllocation: Bool32 ,
  ) : MemoryDedicatedRequirements =
  result.sType = sType
  result.pNext = pNext
  result.prefersDedicatedAllocation = prefersDedicatedAllocation
  result.requiresDedicatedAllocation = requiresDedicatedAllocation

proc mkImageViewUsageCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
  pNext: pointer = nil,
  usage: ImageUsageFlags ,
  ) : ImageViewUsageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.usage = usage

proc mkSamplerYcbcrConversionCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
  pNext: pointer = nil,
  format: Format ,
  ycbcrModel: SamplerYcbcrModelConversion ,
  ycbcrRange: SamplerYcbcrRange ,
  components: ComponentMapping ,
  xChromaOffset: ChromaLocation ,
  yChromaOffset: ChromaLocation ,
  chromaFilter: Filter ,
  forceExplicitReconstruction: Bool32 ,
  ) : SamplerYcbcrConversionCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.ycbcrModel = ycbcrModel
  result.ycbcrRange = ycbcrRange
  result.components = components
  result.xChromaOffset = xChromaOffset
  result.yChromaOffset = yChromaOffset
  result.chromaFilter = chromaFilter
  result.forceExplicitReconstruction = forceExplicitReconstruction

proc mkPhysicalDeviceSamplerYcbcrConversionFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
  pNext: pointer = nil,
  samplerYcbcrConversion: Bool32 ,
  ) : PhysicalDeviceSamplerYcbcrConversionFeatures =
  result.sType = sType
  result.pNext = pNext
  result.samplerYcbcrConversion = samplerYcbcrConversion

proc mkTextureLODGatherFormatPropertiesAMD*(
  sType: StructureType = STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
  pNext: pointer = nil,
  supportsTextureGatherLODBiasAMD: Bool32 ,
  ) : TextureLODGatherFormatPropertiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.supportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD

proc mkConditionalRenderingBeginInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
  pNext: pointer = nil,
  buffer: Buffer ,
  offset: DeviceSize ,
  flags: ConditionalRenderingFlagsEXT = {},
  ) : ConditionalRenderingBeginInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer
  result.offset = offset
  result.flags = flags

proc mkProtectedSubmitInfo*(
  sType: StructureType = STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
  pNext: pointer = nil,
  protectedSubmit: Bool32 ,
  ) : ProtectedSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.protectedSubmit = protectedSubmit

proc mkPhysicalDeviceProtectedMemoryFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
  pNext: pointer = nil,
  protectedMemory: Bool32 ,
  ) : PhysicalDeviceProtectedMemoryFeatures =
  result.sType = sType
  result.pNext = pNext
  result.protectedMemory = protectedMemory

proc mkPhysicalDeviceProtectedMemoryProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
  pNext: pointer = nil,
  protectedNoFault: Bool32 ,
  ) : PhysicalDeviceProtectedMemoryProperties =
  result.sType = sType
  result.pNext = pNext
  result.protectedNoFault = protectedNoFault

proc mkDeviceQueueInfo2*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
  pNext: pointer = nil,
  flags: DeviceQueueCreateFlags = {},
  queueFamilyIndex: uint32 ,
  queueIndex: uint32 ,
  ) : DeviceQueueInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex
  result.queueIndex = queueIndex

proc mkPipelineCoverageToColorStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: PipelineCoverageToColorStateCreateFlagsNV = {},
  coverageToColorEnable: Bool32 ,
  coverageToColorLocation: uint32 = 0.uint32,
  ) : PipelineCoverageToColorStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageToColorEnable = coverageToColorEnable
  result.coverageToColorLocation = coverageToColorLocation

proc mkPhysicalDeviceSamplerFilterMinmaxProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
  pNext: pointer = nil,
  filterMinmaxSingleComponentFormats: Bool32 ,
  filterMinmaxImageComponentMapping: Bool32 ,
  ) : PhysicalDeviceSamplerFilterMinmaxProperties =
  result.sType = sType
  result.pNext = pNext
  result.filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
  result.filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping

proc mkPipelineSampleLocationsStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  sampleLocationsEnable: Bool32 ,
  sampleLocationsInfo: SampleLocationsInfoEXT ,
  ) : PipelineSampleLocationsStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationsEnable = sampleLocationsEnable
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkPhysicalDeviceSampleLocationsPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
  pNext: pointer = nil,
  sampleLocationSampleCounts: SampleCountFlags ,
  maxSampleLocationGridSize: Extent2D ,
  sampleLocationCoordinateRange: array[2,float32] ,
  sampleLocationSubPixelBits: uint32 ,
  variableSampleLocations: Bool32 ,
  ) : PhysicalDeviceSampleLocationsPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationSampleCounts = sampleLocationSampleCounts
  result.maxSampleLocationGridSize = maxSampleLocationGridSize
  result.sampleLocationCoordinateRange = sampleLocationCoordinateRange
  result.sampleLocationSubPixelBits = sampleLocationSubPixelBits
  result.variableSampleLocations = variableSampleLocations

proc mkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
  pNext: pointer = nil,
  advancedBlendCoherentOperations: Bool32 ,
  ) : PhysicalDeviceBlendOperationAdvancedFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.advancedBlendCoherentOperations = advancedBlendCoherentOperations

proc mkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
  pNext: pointer = nil,
  advancedBlendMaxColorAttachments: uint32 ,
  advancedBlendIndependentBlend: Bool32 ,
  advancedBlendNonPremultipliedSrcColor: Bool32 ,
  advancedBlendNonPremultipliedDstColor: Bool32 ,
  advancedBlendCorrelatedOverlap: Bool32 ,
  advancedBlendAllOperations: Bool32 ,
  ) : PhysicalDeviceBlendOperationAdvancedPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.advancedBlendMaxColorAttachments = advancedBlendMaxColorAttachments
  result.advancedBlendIndependentBlend = advancedBlendIndependentBlend
  result.advancedBlendNonPremultipliedSrcColor = advancedBlendNonPremultipliedSrcColor
  result.advancedBlendNonPremultipliedDstColor = advancedBlendNonPremultipliedDstColor
  result.advancedBlendCorrelatedOverlap = advancedBlendCorrelatedOverlap
  result.advancedBlendAllOperations = advancedBlendAllOperations

proc mkPipelineColorBlendAdvancedStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  srcPremultiplied: Bool32 ,
  dstPremultiplied: Bool32 ,
  blendOverlap: BlendOverlapEXT ,
  ) : PipelineColorBlendAdvancedStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.srcPremultiplied = srcPremultiplied
  result.dstPremultiplied = dstPremultiplied
  result.blendOverlap = blendOverlap

proc mkPhysicalDeviceInlineUniformBlockFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
  pNext: pointer = nil,
  inlineUniformBlock: Bool32 ,
  descriptorBindingInlineUniformBlockUpdateAfterBind: Bool32 ,
  ) : PhysicalDeviceInlineUniformBlockFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.inlineUniformBlock = inlineUniformBlock
  result.descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind

proc mkPipelineCoverageModulationStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: PipelineCoverageModulationStateCreateFlagsNV = {},
  coverageModulationMode: CoverageModulationModeNV ,
  coverageModulationTableEnable: Bool32 ,
  coverageModulationTableCount: uint32 = 0.uint32,
  pCoverageModulationTable: ptr float32 = nil,
  ) : PipelineCoverageModulationStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageModulationMode = coverageModulationMode
  result.coverageModulationTableEnable = coverageModulationTableEnable
  result.coverageModulationTableCount = coverageModulationTableCount
  result.pCoverageModulationTable = pCoverageModulationTable

proc mkValidationCacheCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: ValidationCacheCreateFlagsEXT = {},
  initialDataSize: uint = 0.uint,
  pInitialData: pointer ,
  ) : ValidationCacheCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.initialDataSize = initialDataSize
  result.pInitialData = pInitialData

proc mkPhysicalDeviceMaintenance3Properties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
  pNext: pointer = nil,
  maxPerSetDescriptors: uint32 ,
  maxMemoryAllocationSize: DeviceSize ,
  ) : PhysicalDeviceMaintenance3Properties =
  result.sType = sType
  result.pNext = pNext
  result.maxPerSetDescriptors = maxPerSetDescriptors
  result.maxMemoryAllocationSize = maxMemoryAllocationSize

proc mkDescriptorSetLayoutSupport*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
  pNext: pointer = nil,
  supported: Bool32 ,
  ) : DescriptorSetLayoutSupport =
  result.sType = sType
  result.pNext = pNext
  result.supported = supported

proc mkPhysicalDeviceShaderDrawParametersFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
  pNext: pointer = nil,
  shaderDrawParameters: Bool32 ,
  ) : PhysicalDeviceShaderDrawParametersFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderDrawParameters = shaderDrawParameters

proc mkPhysicalDeviceShaderFloat16Int8Features*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
  pNext: pointer = nil,
  shaderFloat16: Bool32 ,
  shaderInt8: Bool32 ,
  ) : PhysicalDeviceShaderFloat16Int8Features =
  result.sType = sType
  result.pNext = pNext
  result.shaderFloat16 = shaderFloat16
  result.shaderInt8 = shaderInt8

proc mkPhysicalDeviceFloatControlsProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
  pNext: pointer = nil,
  denormBehaviorIndependence: ShaderFloatControlsIndependence ,
  roundingModeIndependence: ShaderFloatControlsIndependence ,
  shaderSignedZeroInfNanPreserveFloat16: Bool32 ,
  shaderSignedZeroInfNanPreserveFloat32: Bool32 ,
  shaderSignedZeroInfNanPreserveFloat64: Bool32 ,
  shaderDenormPreserveFloat16: Bool32 ,
  shaderDenormPreserveFloat32: Bool32 ,
  shaderDenormPreserveFloat64: Bool32 ,
  shaderDenormFlushToZeroFloat16: Bool32 ,
  shaderDenormFlushToZeroFloat32: Bool32 ,
  shaderDenormFlushToZeroFloat64: Bool32 ,
  shaderRoundingModeRTEFloat16: Bool32 ,
  shaderRoundingModeRTEFloat32: Bool32 ,
  shaderRoundingModeRTEFloat64: Bool32 ,
  shaderRoundingModeRTZFloat16: Bool32 ,
  shaderRoundingModeRTZFloat32: Bool32 ,
  shaderRoundingModeRTZFloat64: Bool32 ,
  ) : PhysicalDeviceFloatControlsProperties =
  result.sType = sType
  result.pNext = pNext
  result.denormBehaviorIndependence = denormBehaviorIndependence
  result.roundingModeIndependence = roundingModeIndependence
  result.shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
  result.shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
  result.shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
  result.shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
  result.shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
  result.shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
  result.shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
  result.shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
  result.shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
  result.shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
  result.shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
  result.shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
  result.shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
  result.shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
  result.shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64

proc mkPhysicalDeviceHostQueryResetFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
  pNext: pointer = nil,
  hostQueryReset: Bool32 ,
  ) : PhysicalDeviceHostQueryResetFeatures =
  result.sType = sType
  result.pNext = pNext
  result.hostQueryReset = hostQueryReset

proc mkShaderStatisticsInfoAMD*(
  shaderStageMask: ShaderStageFlags ,
  resourceUsage: ShaderResourceUsageAMD ,
  numPhysicalVgprs: uint32 ,
  numPhysicalSgprs: uint32 ,
  numAvailableVgprs: uint32 ,
  numAvailableSgprs: uint32 ,
  computeWorkGroupSize: array[3,uint32] ,
  ) : ShaderStatisticsInfoAMD =
  result.shaderStageMask = shaderStageMask
  result.resourceUsage = resourceUsage
  result.numPhysicalVgprs = numPhysicalVgprs
  result.numPhysicalSgprs = numPhysicalSgprs
  result.numAvailableVgprs = numAvailableVgprs
  result.numAvailableSgprs = numAvailableSgprs
  result.computeWorkGroupSize = computeWorkGroupSize

proc mkDebugUtilsMessengerCallbackDataEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
  pNext: pointer = nil,
  flags: DebugUtilsMessengerCallbackDataFlagsEXT = {},
  pMessageIdName: cstring = nil,
  messageIdNumber: int32 = 0.int32,
  pMessage: cstring ,
  queueLabelCount: uint32 = 0.uint32,
  pQueueLabels: ptr DebugUtilsLabelEXT ,
  cmdBufLabelCount: uint32 = 0.uint32,
  pCmdBufLabels: ptr DebugUtilsLabelEXT ,
  objectCount: uint32 = 0.uint32,
  pObjects: ptr DebugUtilsObjectNameInfoEXT ,
  ) : DebugUtilsMessengerCallbackDataEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pMessageIdName = pMessageIdName
  result.messageIdNumber = messageIdNumber
  result.pMessage = pMessage
  result.queueLabelCount = queueLabelCount
  result.pQueueLabels = pQueueLabels
  result.cmdBufLabelCount = cmdBufLabelCount
  result.pCmdBufLabels = pCmdBufLabels
  result.objectCount = objectCount
  result.pObjects = pObjects

proc mkPhysicalDeviceExternalMemoryHostPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
  pNext: pointer = nil,
  minImportedHostPointerAlignment: DeviceSize ,
  ) : PhysicalDeviceExternalMemoryHostPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minImportedHostPointerAlignment = minImportedHostPointerAlignment

proc mkPhysicalDeviceConservativeRasterizationPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
  pNext: pointer = nil,
  primitiveOverestimationSize: float32 ,
  maxExtraPrimitiveOverestimationSize: float32 ,
  extraPrimitiveOverestimationSizeGranularity: float32 ,
  primitiveUnderestimation: Bool32 ,
  conservativePointAndLineRasterization: Bool32 ,
  degenerateTrianglesRasterized: Bool32 ,
  degenerateLinesRasterized: Bool32 ,
  fullyCoveredFragmentShaderInputVariable: Bool32 ,
  conservativeRasterizationPostDepthCoverage: Bool32 ,
  ) : PhysicalDeviceConservativeRasterizationPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.primitiveOverestimationSize = primitiveOverestimationSize
  result.maxExtraPrimitiveOverestimationSize = maxExtraPrimitiveOverestimationSize
  result.extraPrimitiveOverestimationSizeGranularity = extraPrimitiveOverestimationSizeGranularity
  result.primitiveUnderestimation = primitiveUnderestimation
  result.conservativePointAndLineRasterization = conservativePointAndLineRasterization
  result.degenerateTrianglesRasterized = degenerateTrianglesRasterized
  result.degenerateLinesRasterized = degenerateLinesRasterized
  result.fullyCoveredFragmentShaderInputVariable = fullyCoveredFragmentShaderInputVariable
  result.conservativeRasterizationPostDepthCoverage = conservativeRasterizationPostDepthCoverage

proc mkPhysicalDeviceShaderCoreProperties2AMD*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
  pNext: pointer = nil,
  shaderCoreFeatures: ShaderCorePropertiesFlagsAMD ,
  activeComputeUnitCount: uint32 ,
  ) : PhysicalDeviceShaderCoreProperties2AMD =
  result.sType = sType
  result.pNext = pNext
  result.shaderCoreFeatures = shaderCoreFeatures
  result.activeComputeUnitCount = activeComputeUnitCount

proc mkPipelineRasterizationConservativeStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: PipelineRasterizationConservativeStateCreateFlagsEXT = {},
  conservativeRasterizationMode: ConservativeRasterizationModeEXT ,
  extraPrimitiveOverestimationSize: float32 ,
  ) : PipelineRasterizationConservativeStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.conservativeRasterizationMode = conservativeRasterizationMode
  result.extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize

proc mkPhysicalDeviceDescriptorIndexingFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
  pNext: pointer = nil,
  shaderInputAttachmentArrayDynamicIndexing: Bool32 ,
  shaderUniformTexelBufferArrayDynamicIndexing: Bool32 ,
  shaderStorageTexelBufferArrayDynamicIndexing: Bool32 ,
  shaderUniformBufferArrayNonUniformIndexing: Bool32 ,
  shaderSampledImageArrayNonUniformIndexing: Bool32 ,
  shaderStorageBufferArrayNonUniformIndexing: Bool32 ,
  shaderStorageImageArrayNonUniformIndexing: Bool32 ,
  shaderInputAttachmentArrayNonUniformIndexing: Bool32 ,
  shaderUniformTexelBufferArrayNonUniformIndexing: Bool32 ,
  shaderStorageTexelBufferArrayNonUniformIndexing: Bool32 ,
  descriptorBindingUniformBufferUpdateAfterBind: Bool32 ,
  descriptorBindingSampledImageUpdateAfterBind: Bool32 ,
  descriptorBindingStorageImageUpdateAfterBind: Bool32 ,
  descriptorBindingStorageBufferUpdateAfterBind: Bool32 ,
  descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32 ,
  descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32 ,
  descriptorBindingUpdateUnusedWhilePending: Bool32 ,
  descriptorBindingPartiallyBound: Bool32 ,
  descriptorBindingVariableDescriptorCount: Bool32 ,
  runtimeDescriptorArray: Bool32 ,
  ) : PhysicalDeviceDescriptorIndexingFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
  result.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
  result.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
  result.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
  result.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
  result.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
  result.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
  result.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
  result.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
  result.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
  result.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
  result.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
  result.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
  result.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
  result.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
  result.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
  result.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
  result.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
  result.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
  result.runtimeDescriptorArray = runtimeDescriptorArray

proc mkPhysicalDeviceDescriptorIndexingProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
  pNext: pointer = nil,
  maxUpdateAfterBindDescriptorsInAllPools: uint32 ,
  shaderUniformBufferArrayNonUniformIndexingNative: Bool32 ,
  shaderSampledImageArrayNonUniformIndexingNative: Bool32 ,
  shaderStorageBufferArrayNonUniformIndexingNative: Bool32 ,
  shaderStorageImageArrayNonUniformIndexingNative: Bool32 ,
  shaderInputAttachmentArrayNonUniformIndexingNative: Bool32 ,
  robustBufferAccessUpdateAfterBind: Bool32 ,
  quadDivergentImplicitLod: Bool32 ,
  maxPerStageDescriptorUpdateAfterBindSamplers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindSampledImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32 ,
  maxPerStageUpdateAfterBindResources: uint32 ,
  maxDescriptorSetUpdateAfterBindSamplers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindSampledImages: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageImages: uint32 ,
  maxDescriptorSetUpdateAfterBindInputAttachments: uint32 ,
  ) : PhysicalDeviceDescriptorIndexingProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
  result.shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
  result.shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
  result.shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
  result.shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
  result.shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
  result.robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
  result.quadDivergentImplicitLod = quadDivergentImplicitLod
  result.maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
  result.maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
  result.maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
  result.maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
  result.maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
  result.maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
  result.maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
  result.maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
  result.maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
  result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
  result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
  result.maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
  result.maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments

proc mkDescriptorSetLayoutBindingFlagsCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
  pNext: pointer = nil,
  bindingCount: uint32 = 0.uint32,
  pBindingFlags: ptr DescriptorBindingFlags ,
  ) : DescriptorSetLayoutBindingFlagsCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.bindingCount = bindingCount
  result.pBindingFlags = pBindingFlags

proc mkAttachmentDescription2*(
  sType: StructureType = STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
  pNext: pointer = nil,
  flags: AttachmentDescriptionFlags = {},
  format: Format ,
  samples: SampleCountFlagBits ,
  loadOp: AttachmentLoadOp ,
  storeOp: AttachmentStoreOp ,
  stencilLoadOp: AttachmentLoadOp ,
  stencilStoreOp: AttachmentStoreOp ,
  initialLayout: ImageLayout ,
  finalLayout: ImageLayout ,
  ) : AttachmentDescription2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.format = format
  result.samples = samples
  result.loadOp = loadOp
  result.storeOp = storeOp
  result.stencilLoadOp = stencilLoadOp
  result.stencilStoreOp = stencilStoreOp
  result.initialLayout = initialLayout
  result.finalLayout = finalLayout

proc mkAttachmentReference2*(
  sType: StructureType = STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
  pNext: pointer = nil,
  attachment: uint32 ,
  layout: ImageLayout ,
  aspectMask: ImageAspectFlags ,
  ) : AttachmentReference2 =
  result.sType = sType
  result.pNext = pNext
  result.attachment = attachment
  result.layout = layout
  result.aspectMask = aspectMask

proc mkSubpassDescription2*(
  sType: StructureType = STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
  pNext: pointer = nil,
  flags: SubpassDescriptionFlags = {},
  pipelineBindPoint: PipelineBindPoint ,
  viewMask: uint32 ,
  inputAttachmentCount: uint32 = 0.uint32,
  pInputAttachments: ptr AttachmentReference2 ,
  colorAttachmentCount: uint32 = 0.uint32,
  pColorAttachments: ptr AttachmentReference2 ,
  pResolveAttachments: ptr AttachmentReference2 = nil,
  pDepthStencilAttachment: ptr AttachmentReference2 = nil,
  preserveAttachmentCount: uint32 = 0.uint32,
  pPreserveAttachments: ptr uint32 ,
  ) : SubpassDescription2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.viewMask = viewMask
  result.inputAttachmentCount = inputAttachmentCount
  result.pInputAttachments = pInputAttachments
  result.colorAttachmentCount = colorAttachmentCount
  result.pColorAttachments = pColorAttachments
  result.pResolveAttachments = pResolveAttachments
  result.pDepthStencilAttachment = pDepthStencilAttachment
  result.preserveAttachmentCount = preserveAttachmentCount
  result.pPreserveAttachments = pPreserveAttachments

proc mkSubpassDependency2*(
  sType: StructureType = STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
  pNext: pointer = nil,
  srcSubpass: uint32 ,
  dstSubpass: uint32 ,
  srcStageMask: PipelineStageFlags ,
  dstStageMask: PipelineStageFlags ,
  srcAccessMask: AccessFlags = {},
  dstAccessMask: AccessFlags = {},
  dependencyFlags: DependencyFlags = {},
  viewOffset: int32 = 0.int32,
  ) : SubpassDependency2 =
  result.sType = sType
  result.pNext = pNext
  result.srcSubpass = srcSubpass
  result.dstSubpass = dstSubpass
  result.srcStageMask = srcStageMask
  result.dstStageMask = dstStageMask
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.dependencyFlags = dependencyFlags
  result.viewOffset = viewOffset

proc mkRenderPassCreateInfo2*(
  sType: StructureType = STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
  pNext: pointer = nil,
  flags: RenderPassCreateFlags = {},
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr AttachmentDescription2 ,
  subpassCount: uint32 ,
  pSubpasses: ptr SubpassDescription2 ,
  dependencyCount: uint32 = 0.uint32,
  pDependencies: ptr SubpassDependency2 ,
  correlatedViewMaskCount: uint32 = 0.uint32,
  pCorrelatedViewMasks: ptr uint32 ,
  ) : RenderPassCreateInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.subpassCount = subpassCount
  result.pSubpasses = pSubpasses
  result.dependencyCount = dependencyCount
  result.pDependencies = pDependencies
  result.correlatedViewMaskCount = correlatedViewMaskCount
  result.pCorrelatedViewMasks = pCorrelatedViewMasks

proc mkPhysicalDeviceTimelineSemaphoreFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
  pNext: pointer = nil,
  timelineSemaphore: Bool32 ,
  ) : PhysicalDeviceTimelineSemaphoreFeatures =
  result.sType = sType
  result.pNext = pNext
  result.timelineSemaphore = timelineSemaphore

proc mkSemaphoreWaitInfo*(
  sType: StructureType = STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
  pNext: pointer = nil,
  flags: SemaphoreWaitFlags = {},
  semaphoreCount: uint32 ,
  pSemaphores: ptr Semaphore ,
  pValues: ptr uint64 ,
  ) : SemaphoreWaitInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.semaphoreCount = semaphoreCount
  result.pSemaphores = pSemaphores
  result.pValues = pValues

proc mkAndroidHardwareBufferPropertiesANDROID*(
  sType: StructureType = STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
  pNext: pointer = nil,
  allocationSize: DeviceSize ,
  memoryTypeBits: uint32 ,
  ) : AndroidHardwareBufferPropertiesANDROID =
  result.sType = sType
  result.pNext = pNext
  result.allocationSize = allocationSize
  result.memoryTypeBits = memoryTypeBits

proc mkAndroidHardwareBufferFormatPropertiesANDROID*(
  sType: StructureType = STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
  pNext: pointer = nil,
  format: Format ,
  externalFormat: uint64 ,
  formatFeatures: FormatFeatureFlags ,
  samplerYcbcrConversionComponents: ComponentMapping ,
  suggestedYcbcrModel: SamplerYcbcrModelConversion ,
  suggestedYcbcrRange: SamplerYcbcrRange ,
  suggestedXChromaOffset: ChromaLocation ,
  suggestedYChromaOffset: ChromaLocation ,
  ) : AndroidHardwareBufferFormatPropertiesANDROID =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.externalFormat = externalFormat
  result.formatFeatures = formatFeatures
  result.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
  result.suggestedYcbcrModel = suggestedYcbcrModel
  result.suggestedYcbcrRange = suggestedYcbcrRange
  result.suggestedXChromaOffset = suggestedXChromaOffset
  result.suggestedYChromaOffset = suggestedYChromaOffset

proc mkCommandBufferInheritanceConditionalRenderingInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
  pNext: pointer = nil,
  conditionalRenderingEnable: Bool32 ,
  ) : CommandBufferInheritanceConditionalRenderingInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.conditionalRenderingEnable = conditionalRenderingEnable

proc mkPhysicalDevice8BitStorageFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
  pNext: pointer = nil,
  storageBuffer8BitAccess: Bool32 ,
  uniformAndStorageBuffer8BitAccess: Bool32 ,
  storagePushConstant8: Bool32 ,
  ) : PhysicalDevice8BitStorageFeatures =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer8BitAccess = storageBuffer8BitAccess
  result.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
  result.storagePushConstant8 = storagePushConstant8

proc mkPhysicalDeviceConditionalRenderingFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
  pNext: pointer = nil,
  conditionalRendering: Bool32 ,
  inheritedConditionalRendering: Bool32 ,
  ) : PhysicalDeviceConditionalRenderingFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.conditionalRendering = conditionalRendering
  result.inheritedConditionalRendering = inheritedConditionalRendering

proc mkPhysicalDeviceVulkanMemoryModelFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
  pNext: pointer = nil,
  vulkanMemoryModel: Bool32 ,
  vulkanMemoryModelDeviceScope: Bool32 ,
  vulkanMemoryModelAvailabilityVisibilityChains: Bool32 ,
  ) : PhysicalDeviceVulkanMemoryModelFeatures =
  result.sType = sType
  result.pNext = pNext
  result.vulkanMemoryModel = vulkanMemoryModel
  result.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
  result.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains

proc mkPhysicalDeviceShaderAtomicInt64Features*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
  pNext: pointer = nil,
  shaderBufferInt64Atomics: Bool32 ,
  shaderSharedInt64Atomics: Bool32 ,
  ) : PhysicalDeviceShaderAtomicInt64Features =
  result.sType = sType
  result.pNext = pNext
  result.shaderBufferInt64Atomics = shaderBufferInt64Atomics
  result.shaderSharedInt64Atomics = shaderSharedInt64Atomics

proc mkPhysicalDeviceShaderAtomicFloatFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
  pNext: pointer = nil,
  shaderBufferFloat32Atomics: Bool32 ,
  shaderBufferFloat32AtomicAdd: Bool32 ,
  shaderBufferFloat64Atomics: Bool32 ,
  shaderBufferFloat64AtomicAdd: Bool32 ,
  shaderSharedFloat32Atomics: Bool32 ,
  shaderSharedFloat32AtomicAdd: Bool32 ,
  shaderSharedFloat64Atomics: Bool32 ,
  shaderSharedFloat64AtomicAdd: Bool32 ,
  shaderImageFloat32Atomics: Bool32 ,
  shaderImageFloat32AtomicAdd: Bool32 ,
  sparseImageFloat32Atomics: Bool32 ,
  sparseImageFloat32AtomicAdd: Bool32 ,
  ) : PhysicalDeviceShaderAtomicFloatFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.shaderBufferFloat32Atomics = shaderBufferFloat32Atomics
  result.shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd
  result.shaderBufferFloat64Atomics = shaderBufferFloat64Atomics
  result.shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd
  result.shaderSharedFloat32Atomics = shaderSharedFloat32Atomics
  result.shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd
  result.shaderSharedFloat64Atomics = shaderSharedFloat64Atomics
  result.shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd
  result.shaderImageFloat32Atomics = shaderImageFloat32Atomics
  result.shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd
  result.sparseImageFloat32Atomics = sparseImageFloat32Atomics
  result.sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd

proc mkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
  pNext: pointer = nil,
  vertexAttributeInstanceRateDivisor: Bool32 ,
  vertexAttributeInstanceRateZeroDivisor: Bool32 ,
  ) : PhysicalDeviceVertexAttributeDivisorFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor
  result.vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor

proc mkQueueFamilyCheckpointPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
  pNext: pointer = nil,
  checkpointExecutionStageMask: PipelineStageFlags ,
  ) : QueueFamilyCheckpointPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.checkpointExecutionStageMask = checkpointExecutionStageMask

proc mkPhysicalDeviceDepthStencilResolveProperties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
  pNext: pointer = nil,
  supportedDepthResolveModes: ResolveModeFlags ,
  supportedStencilResolveModes: ResolveModeFlags ,
  independentResolveNone: Bool32 ,
  independentResolve: Bool32 ,
  ) : PhysicalDeviceDepthStencilResolveProperties =
  result.sType = sType
  result.pNext = pNext
  result.supportedDepthResolveModes = supportedDepthResolveModes
  result.supportedStencilResolveModes = supportedStencilResolveModes
  result.independentResolveNone = independentResolveNone
  result.independentResolve = independentResolve

proc mkSubpassDescriptionDepthStencilResolve*(
  sType: StructureType = STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
  pNext: pointer = nil,
  depthResolveMode: ResolveModeFlagBits ,
  stencilResolveMode: ResolveModeFlagBits ,
  pDepthStencilResolveAttachment: ptr AttachmentReference2 = nil,
  ) : SubpassDescriptionDepthStencilResolve =
  result.sType = sType
  result.pNext = pNext
  result.depthResolveMode = depthResolveMode
  result.stencilResolveMode = stencilResolveMode
  result.pDepthStencilResolveAttachment = pDepthStencilResolveAttachment

proc mkPhysicalDeviceASTCDecodeFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
  pNext: pointer = nil,
  decodeModeSharedExponent: Bool32 ,
  ) : PhysicalDeviceASTCDecodeFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.decodeModeSharedExponent = decodeModeSharedExponent

proc mkPhysicalDeviceTransformFeedbackFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
  pNext: pointer = nil,
  transformFeedback: Bool32 ,
  geometryStreams: Bool32 ,
  ) : PhysicalDeviceTransformFeedbackFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.transformFeedback = transformFeedback
  result.geometryStreams = geometryStreams

proc mkPhysicalDeviceTransformFeedbackPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxTransformFeedbackStreams: uint32 ,
  maxTransformFeedbackBuffers: uint32 ,
  maxTransformFeedbackBufferSize: DeviceSize ,
  maxTransformFeedbackStreamDataSize: uint32 ,
  maxTransformFeedbackBufferDataSize: uint32 ,
  maxTransformFeedbackBufferDataStride: uint32 ,
  transformFeedbackQueries: Bool32 ,
  transformFeedbackStreamsLinesTriangles: Bool32 ,
  transformFeedbackRasterizationStreamSelect: Bool32 ,
  transformFeedbackDraw: Bool32 ,
  ) : PhysicalDeviceTransformFeedbackPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxTransformFeedbackStreams = maxTransformFeedbackStreams
  result.maxTransformFeedbackBuffers = maxTransformFeedbackBuffers
  result.maxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize
  result.maxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize
  result.maxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize
  result.maxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride
  result.transformFeedbackQueries = transformFeedbackQueries
  result.transformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles
  result.transformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect
  result.transformFeedbackDraw = transformFeedbackDraw

proc mkPipelineRasterizationStateStreamCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: PipelineRasterizationStateStreamCreateFlagsEXT = {},
  rasterizationStream: uint32 ,
  ) : PipelineRasterizationStateStreamCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.rasterizationStream = rasterizationStream

proc mkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
  pNext: pointer = nil,
  representativeFragmentTest: Bool32 ,
  ) : PhysicalDeviceRepresentativeFragmentTestFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.representativeFragmentTest = representativeFragmentTest

proc mkPipelineRepresentativeFragmentTestStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  representativeFragmentTestEnable: Bool32 ,
  ) : PipelineRepresentativeFragmentTestStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.representativeFragmentTestEnable = representativeFragmentTestEnable

proc mkPhysicalDeviceExclusiveScissorFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
  pNext: pointer = nil,
  exclusiveScissor: Bool32 ,
  ) : PhysicalDeviceExclusiveScissorFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.exclusiveScissor = exclusiveScissor

proc mkPhysicalDeviceCornerSampledImageFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
  pNext: pointer = nil,
  cornerSampledImage: Bool32 ,
  ) : PhysicalDeviceCornerSampledImageFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.cornerSampledImage = cornerSampledImage

proc mkPhysicalDeviceComputeShaderDerivativesFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
  pNext: pointer = nil,
  computeDerivativeGroupQuads: Bool32 ,
  computeDerivativeGroupLinear: Bool32 ,
  ) : PhysicalDeviceComputeShaderDerivativesFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.computeDerivativeGroupQuads = computeDerivativeGroupQuads
  result.computeDerivativeGroupLinear = computeDerivativeGroupLinear

proc mkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
  pNext: pointer = nil,
  fragmentShaderBarycentric: Bool32 ,
  ) : PhysicalDeviceFragmentShaderBarycentricFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.fragmentShaderBarycentric = fragmentShaderBarycentric

proc mkPhysicalDeviceShaderImageFootprintFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
  pNext: pointer = nil,
  imageFootprint: Bool32 ,
  ) : PhysicalDeviceShaderImageFootprintFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.imageFootprint = imageFootprint

proc mkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
  pNext: pointer = nil,
  dedicatedAllocationImageAliasing: Bool32 ,
  ) : PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing

proc mkPipelineViewportShadingRateImageStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  shadingRateImageEnable: Bool32 ,
  viewportCount: uint32 ,
  pShadingRatePalettes: ptr ShadingRatePaletteNV ,
  ) : PipelineViewportShadingRateImageStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateImageEnable = shadingRateImageEnable
  result.viewportCount = viewportCount
  result.pShadingRatePalettes = pShadingRatePalettes

proc mkPhysicalDeviceShadingRateImageFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
  pNext: pointer = nil,
  shadingRateImage: Bool32 ,
  shadingRateCoarseSampleOrder: Bool32 ,
  ) : PhysicalDeviceShadingRateImageFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateImage = shadingRateImage
  result.shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder

proc mkPhysicalDeviceMeshShaderFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
  pNext: pointer = nil,
  taskShader: Bool32 ,
  meshShader: Bool32 ,
  ) : PhysicalDeviceMeshShaderFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.taskShader = taskShader
  result.meshShader = meshShader

proc mkRayTracingPipelineCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: PipelineCreateFlags = {},
  stageCount: uint32 ,
  pStages: ptr PipelineShaderStageCreateInfo ,
  groupCount: uint32 ,
  pGroups: ptr RayTracingShaderGroupCreateInfoNV ,
  maxRecursionDepth: uint32 ,
  layout: PipelineLayout ,
  basePipelineHandle: Pipeline = Pipeline(nil),
  basePipelineIndex: int32 ,
  ) : RayTracingPipelineCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.maxRecursionDepth = maxRecursionDepth
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkRayTracingPipelineCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: PipelineCreateFlags = {},
  stageCount: uint32 = 0.uint32,
  pStages: ptr PipelineShaderStageCreateInfo ,
  groupCount: uint32 = 0.uint32,
  pGroups: ptr RayTracingShaderGroupCreateInfoKHR ,
  maxRecursionDepth: uint32 ,
  libraries: PipelineLibraryCreateInfoKHR ,
  pLibraryInterface: ptr RayTracingPipelineInterfaceCreateInfoKHR = nil,
  layout: PipelineLayout ,
  basePipelineHandle: Pipeline = Pipeline(nil),
  basePipelineIndex: int32 ,
  ) : RayTracingPipelineCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.maxRecursionDepth = maxRecursionDepth
  result.libraries = libraries
  result.pLibraryInterface = pLibraryInterface
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkGeometryTrianglesNV*(
  sType: StructureType = STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
  pNext: pointer = nil,
  vertexData: Buffer = Buffer(nil),
  vertexOffset: DeviceSize ,
  vertexCount: uint32 ,
  vertexStride: DeviceSize ,
  vertexFormat: Format ,
  indexData: Buffer = Buffer(nil),
  indexOffset: DeviceSize ,
  indexCount: uint32 ,
  indexType: IndexType ,
  transformData: Buffer = Buffer(nil),
  transformOffset: DeviceSize ,
  ) : GeometryTrianglesNV =
  result.sType = sType
  result.pNext = pNext
  result.vertexData = vertexData
  result.vertexOffset = vertexOffset
  result.vertexCount = vertexCount
  result.vertexStride = vertexStride
  result.vertexFormat = vertexFormat
  result.indexData = indexData
  result.indexOffset = indexOffset
  result.indexCount = indexCount
  result.indexType = indexType
  result.transformData = transformData
  result.transformOffset = transformOffset

proc mkGeometryAABBNV*(
  sType: StructureType = STRUCTURE_TYPE_GEOMETRY_AABB_NV,
  pNext: pointer = nil,
  aabbData: Buffer = Buffer(nil),
  numAABBs: uint32 ,
  stride: uint32 ,
  offset: DeviceSize ,
  ) : GeometryAABBNV =
  result.sType = sType
  result.pNext = pNext
  result.aabbData = aabbData
  result.numAABBs = numAABBs
  result.stride = stride
  result.offset = offset

proc mkGeometryDataNV*(
  triangles: GeometryTrianglesNV ,
  aabbs: GeometryAABBNV ,
  ) : GeometryDataNV =
  result.triangles = triangles
  result.aabbs = aabbs

proc mkGeometryNV*(
  sType: StructureType = STRUCTURE_TYPE_GEOMETRY_NV,
  pNext: pointer = nil,
  geometryType: GeometryTypeKHR ,
  geometry: GeometryDataNV ,
  flags: GeometryFlagsKHR = {},
  ) : GeometryNV =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.geometry = geometry
  result.flags = flags

proc mkAccelerationStructureInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
  pNext: pointer = nil,
  `type`: AccelerationStructureTypeNV ,
  flags: BuildAccelerationStructureFlagsNV = {},
  instanceCount: uint32 = 0.uint32,
  geometryCount: uint32 = 0.uint32,
  pGeometries: ptr GeometryNV ,
  ) : AccelerationStructureInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.flags = flags
  result.instanceCount = instanceCount
  result.geometryCount = geometryCount
  result.pGeometries = pGeometries

proc mkAccelerationStructureCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
  pNext: pointer = nil,
  compactedSize: DeviceSize ,
  info: AccelerationStructureInfoNV ,
  ) : AccelerationStructureCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.compactedSize = compactedSize
  result.info = info

proc mkBindAccelerationStructureMemoryInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
  pNext: pointer = nil,
  accelerationStructure: AccelerationStructureKHR ,
  memory: DeviceMemory ,
  memoryOffset: DeviceSize ,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  ) : BindAccelerationStructureMemoryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructure = accelerationStructure
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices

proc mkPhysicalDeviceRayTracingFeaturesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR,
  pNext: pointer = nil,
  rayTracing: Bool32 ,
  rayTracingShaderGroupHandleCaptureReplay: Bool32 ,
  rayTracingShaderGroupHandleCaptureReplayMixed: Bool32 ,
  rayTracingAccelerationStructureCaptureReplay: Bool32 ,
  rayTracingIndirectTraceRays: Bool32 ,
  rayTracingIndirectAccelerationStructureBuild: Bool32 ,
  rayTracingHostAccelerationStructureCommands: Bool32 ,
  rayQuery: Bool32 ,
  rayTracingPrimitiveCulling: Bool32 ,
  ) : PhysicalDeviceRayTracingFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.rayTracing = rayTracing
  result.rayTracingShaderGroupHandleCaptureReplay = rayTracingShaderGroupHandleCaptureReplay
  result.rayTracingShaderGroupHandleCaptureReplayMixed = rayTracingShaderGroupHandleCaptureReplayMixed
  result.rayTracingAccelerationStructureCaptureReplay = rayTracingAccelerationStructureCaptureReplay
  result.rayTracingIndirectTraceRays = rayTracingIndirectTraceRays
  result.rayTracingIndirectAccelerationStructureBuild = rayTracingIndirectAccelerationStructureBuild
  result.rayTracingHostAccelerationStructureCommands = rayTracingHostAccelerationStructureCommands
  result.rayQuery = rayQuery
  result.rayTracingPrimitiveCulling = rayTracingPrimitiveCulling

proc mkStridedBufferRegionKHR*(
  buffer: Buffer = Buffer(nil),
  offset: DeviceSize ,
  stride: DeviceSize ,
  size: DeviceSize ,
  ) : StridedBufferRegionKHR =
  result.buffer = buffer
  result.offset = offset
  result.stride = stride
  result.size = size

proc mkDrmFormatModifierPropertiesEXT*(
  drmFormatModifier: uint64 ,
  drmFormatModifierPlaneCount: uint32 ,
  drmFormatModifierTilingFeatures: FormatFeatureFlags ,
  ) : DrmFormatModifierPropertiesEXT =
  result.drmFormatModifier = drmFormatModifier
  result.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
  result.drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures

proc mkImageDrmFormatModifierExplicitCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  drmFormatModifierPlaneCount: uint32 ,
  pPlaneLayouts: ptr SubresourceLayout ,
  ) : ImageDrmFormatModifierExplicitCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier
  result.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
  result.pPlaneLayouts = pPlaneLayouts

proc mkImageStencilUsageCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
  pNext: pointer = nil,
  stencilUsage: ImageUsageFlags ,
  ) : ImageStencilUsageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.stencilUsage = stencilUsage

proc mkPhysicalDeviceFragmentDensityMapFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentDensityMap: Bool32 ,
  fragmentDensityMapDynamic: Bool32 ,
  fragmentDensityMapNonSubsampledImages: Bool32 ,
  ) : PhysicalDeviceFragmentDensityMapFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMap = fragmentDensityMap
  result.fragmentDensityMapDynamic = fragmentDensityMapDynamic
  result.fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages

proc mkPhysicalDeviceFragmentDensityMap2FeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentDensityMapDeferred: Bool32 ,
  ) : PhysicalDeviceFragmentDensityMap2FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMapDeferred = fragmentDensityMapDeferred

proc mkPhysicalDeviceFragmentDensityMapPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
  pNext: pointer = nil,
  minFragmentDensityTexelSize: Extent2D ,
  maxFragmentDensityTexelSize: Extent2D ,
  fragmentDensityInvocations: Bool32 ,
  ) : PhysicalDeviceFragmentDensityMapPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minFragmentDensityTexelSize = minFragmentDensityTexelSize
  result.maxFragmentDensityTexelSize = maxFragmentDensityTexelSize
  result.fragmentDensityInvocations = fragmentDensityInvocations

proc mkPhysicalDeviceFragmentDensityMap2PropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
  pNext: pointer = nil,
  subsampledLoads: Bool32 ,
  subsampledCoarseReconstructionEarlyAccess: Bool32 ,
  maxSubsampledArrayLayers: uint32 ,
  maxDescriptorSetSubsampledSamplers: uint32 ,
  ) : PhysicalDeviceFragmentDensityMap2PropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.subsampledLoads = subsampledLoads
  result.subsampledCoarseReconstructionEarlyAccess = subsampledCoarseReconstructionEarlyAccess
  result.maxSubsampledArrayLayers = maxSubsampledArrayLayers
  result.maxDescriptorSetSubsampledSamplers = maxDescriptorSetSubsampledSamplers

proc mkPhysicalDeviceScalarBlockLayoutFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
  pNext: pointer = nil,
  scalarBlockLayout: Bool32 ,
  ) : PhysicalDeviceScalarBlockLayoutFeatures =
  result.sType = sType
  result.pNext = pNext
  result.scalarBlockLayout = scalarBlockLayout

proc mkSurfaceProtectedCapabilitiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
  pNext: pointer = nil,
  supportsProtected: Bool32 ,
  ) : SurfaceProtectedCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.supportsProtected = supportsProtected

proc mkPhysicalDeviceUniformBufferStandardLayoutFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
  pNext: pointer = nil,
  uniformBufferStandardLayout: Bool32 ,
  ) : PhysicalDeviceUniformBufferStandardLayoutFeatures =
  result.sType = sType
  result.pNext = pNext
  result.uniformBufferStandardLayout = uniformBufferStandardLayout

proc mkPhysicalDeviceDepthClipEnableFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
  pNext: pointer = nil,
  depthClipEnable: Bool32 ,
  ) : PhysicalDeviceDepthClipEnableFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.depthClipEnable = depthClipEnable

proc mkPipelineRasterizationDepthClipStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: PipelineRasterizationDepthClipStateCreateFlagsEXT = {},
  depthClipEnable: Bool32 ,
  ) : PipelineRasterizationDepthClipStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthClipEnable = depthClipEnable

proc mkPhysicalDeviceMemoryBudgetPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
  pNext: pointer = nil,
  heapBudget: array[MAX_MEMORY_HEAPS,DeviceSize] ,
  heapUsage: array[MAX_MEMORY_HEAPS,DeviceSize] ,
  ) : PhysicalDeviceMemoryBudgetPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.heapBudget = heapBudget
  result.heapUsage = heapUsage

proc mkPhysicalDeviceMemoryPriorityFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
  pNext: pointer = nil,
  memoryPriority: Bool32 ,
  ) : PhysicalDeviceMemoryPriorityFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.memoryPriority = memoryPriority

proc mkPhysicalDeviceBufferDeviceAddressFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
  pNext: pointer = nil,
  bufferDeviceAddress: Bool32 ,
  bufferDeviceAddressCaptureReplay: Bool32 ,
  bufferDeviceAddressMultiDevice: Bool32 ,
  ) : PhysicalDeviceBufferDeviceAddressFeatures =
  result.sType = sType
  result.pNext = pNext
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice

proc mkPhysicalDeviceBufferDeviceAddressFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
  pNext: pointer = nil,
  bufferDeviceAddress: Bool32 ,
  bufferDeviceAddressCaptureReplay: Bool32 ,
  bufferDeviceAddressMultiDevice: Bool32 ,
  ) : PhysicalDeviceBufferDeviceAddressFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice

proc mkBufferDeviceAddressCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
  pNext: pointer = nil,
  deviceAddress: DeviceAddress ,
  ) : BufferDeviceAddressCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.deviceAddress = deviceAddress

proc mkFilterCubicImageViewImageFormatPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
  pNext: pointer = nil,
  filterCubic: Bool32 ,
  filterCubicMinmax: Bool32 ,
  ) : FilterCubicImageViewImageFormatPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.filterCubic = filterCubic
  result.filterCubicMinmax = filterCubicMinmax

proc mkPhysicalDeviceImagelessFramebufferFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
  pNext: pointer = nil,
  imagelessFramebuffer: Bool32 ,
  ) : PhysicalDeviceImagelessFramebufferFeatures =
  result.sType = sType
  result.pNext = pNext
  result.imagelessFramebuffer = imagelessFramebuffer

proc mkFramebufferAttachmentImageInfo*(
  sType: StructureType = STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
  pNext: pointer = nil,
  flags: ImageCreateFlags = {},
  usage: ImageUsageFlags ,
  width: uint32 ,
  height: uint32 ,
  layerCount: uint32 ,
  viewFormatCount: uint32 = 0.uint32,
  pViewFormats: ptr Format ,
  ) : FramebufferAttachmentImageInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.usage = usage
  result.width = width
  result.height = height
  result.layerCount = layerCount
  result.viewFormatCount = viewFormatCount
  result.pViewFormats = pViewFormats

proc mkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
  pNext: pointer = nil,
  textureCompressionASTC_HDR: Bool32 ,
  ) : PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.textureCompressionASTC_HDR = textureCompressionASTC_HDR

proc mkPhysicalDeviceCooperativeMatrixFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
  pNext: pointer = nil,
  cooperativeMatrix: Bool32 ,
  cooperativeMatrixRobustBufferAccess: Bool32 ,
  ) : PhysicalDeviceCooperativeMatrixFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.cooperativeMatrix = cooperativeMatrix
  result.cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess

proc mkPhysicalDeviceCooperativeMatrixPropertiesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  pNext: pointer = nil,
  cooperativeMatrixSupportedStages: ShaderStageFlags ,
  ) : PhysicalDeviceCooperativeMatrixPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages

proc mkPhysicalDeviceYcbcrImageArraysFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
  pNext: pointer = nil,
  ycbcrImageArrays: Bool32 ,
  ) : PhysicalDeviceYcbcrImageArraysFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.ycbcrImageArrays = ycbcrImageArrays

proc mkImageViewAddressPropertiesNVX*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
  pNext: pointer = nil,
  deviceAddress: DeviceAddress ,
  size: DeviceSize ,
  ) : ImageViewAddressPropertiesNVX =
  result.sType = sType
  result.pNext = pNext
  result.deviceAddress = deviceAddress
  result.size = size

proc mkPipelineCreationFeedbackEXT*(
  flags: PipelineCreationFeedbackFlagsEXT ,
  duration: uint64 ,
  ) : PipelineCreationFeedbackEXT =
  result.flags = flags
  result.duration = duration

proc mkPipelineCreationFeedbackCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  pPipelineCreationFeedback: ptr PipelineCreationFeedbackEXT ,
  pipelineStageCreationFeedbackCount: uint32 ,
  pPipelineStageCreationFeedbacks: ptr PipelineCreationFeedbackEXT ,
  ) : PipelineCreationFeedbackCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.pPipelineCreationFeedback = pPipelineCreationFeedback
  result.pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount
  result.pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks

proc mkSurfaceCapabilitiesFullScreenExclusiveEXT*(
  sType: StructureType = STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
  pNext: pointer = nil,
  fullScreenExclusiveSupported: Bool32 ,
  ) : SurfaceCapabilitiesFullScreenExclusiveEXT =
  result.sType = sType
  result.pNext = pNext
  result.fullScreenExclusiveSupported = fullScreenExclusiveSupported

proc mkPhysicalDevicePerformanceQueryFeaturesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
  pNext: pointer = nil,
  performanceCounterQueryPools: Bool32 ,
  performanceCounterMultipleQueryPools: Bool32 ,
  ) : PhysicalDevicePerformanceQueryFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.performanceCounterQueryPools = performanceCounterQueryPools
  result.performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools

proc mkPhysicalDevicePerformanceQueryPropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
  pNext: pointer = nil,
  allowCommandBufferQueryCopies: Bool32 ,
  ) : PhysicalDevicePerformanceQueryPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.allowCommandBufferQueryCopies = allowCommandBufferQueryCopies

proc mkPerformanceCounterDescriptionKHR*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
  pNext: pointer = nil,
  flags: PerformanceCounterDescriptionFlagsKHR = {},
  name: array[MAX_DESCRIPTION_SIZE,char] ,
  category: array[MAX_DESCRIPTION_SIZE,char] ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  ) : PerformanceCounterDescriptionKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.name = name
  result.category = category
  result.description = description

proc mkAcquireProfilingLockInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
  pNext: pointer = nil,
  flags: AcquireProfilingLockFlagsKHR = {},
  timeout: uint64 ,
  ) : AcquireProfilingLockInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.timeout = timeout

proc mkHeadlessSurfaceCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: HeadlessSurfaceCreateFlagsEXT = {},
  ) : HeadlessSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkPhysicalDeviceCoverageReductionModeFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
  pNext: pointer = nil,
  coverageReductionMode: Bool32 ,
  ) : PhysicalDeviceCoverageReductionModeFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.coverageReductionMode = coverageReductionMode

proc mkPipelineCoverageReductionStateCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: PipelineCoverageReductionStateCreateFlagsNV = {},
  coverageReductionMode: CoverageReductionModeNV ,
  ) : PipelineCoverageReductionStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageReductionMode = coverageReductionMode

proc mkFramebufferMixedSamplesCombinationNV*(
  sType: StructureType = STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
  pNext: pointer = nil,
  coverageReductionMode: CoverageReductionModeNV ,
  rasterizationSamples: SampleCountFlagBits ,
  depthStencilSamples: SampleCountFlags ,
  colorSamples: SampleCountFlags ,
  ) : FramebufferMixedSamplesCombinationNV =
  result.sType = sType
  result.pNext = pNext
  result.coverageReductionMode = coverageReductionMode
  result.rasterizationSamples = rasterizationSamples
  result.depthStencilSamples = depthStencilSamples
  result.colorSamples = colorSamples

proc mkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
  pNext: pointer = nil,
  shaderIntegerFunctions2: Bool32 ,
  ) : PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
  result.sType = sType
  result.pNext = pNext
  result.shaderIntegerFunctions2 = shaderIntegerFunctions2

proc mkPerformanceValueINTEL*(
  `type`: PerformanceValueTypeINTEL ,
  data: PerformanceValueDataINTEL ,
  ) : PerformanceValueINTEL =
  result.`type` = `type`
  result.data = data

proc mkPerformanceOverrideInfoINTEL*(
  sType: StructureType = STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
  pNext: pointer = nil,
  `type`: PerformanceOverrideTypeINTEL ,
  enable: Bool32 ,
  parameter: uint64 ,
  ) : PerformanceOverrideInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.enable = enable
  result.parameter = parameter

proc mkPhysicalDeviceShaderClockFeaturesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
  pNext: pointer = nil,
  shaderSubgroupClock: Bool32 ,
  shaderDeviceClock: Bool32 ,
  ) : PhysicalDeviceShaderClockFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.shaderSubgroupClock = shaderSubgroupClock
  result.shaderDeviceClock = shaderDeviceClock

proc mkPhysicalDeviceIndexTypeUint8FeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
  pNext: pointer = nil,
  indexTypeUint8: Bool32 ,
  ) : PhysicalDeviceIndexTypeUint8FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.indexTypeUint8 = indexTypeUint8

proc mkPhysicalDeviceShaderSMBuiltinsFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
  pNext: pointer = nil,
  shaderSMBuiltins: Bool32 ,
  ) : PhysicalDeviceShaderSMBuiltinsFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderSMBuiltins = shaderSMBuiltins

proc mkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentShaderSampleInterlock: Bool32 ,
  fragmentShaderPixelInterlock: Bool32 ,
  fragmentShaderShadingRateInterlock: Bool32 ,
  ) : PhysicalDeviceFragmentShaderInterlockFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentShaderSampleInterlock = fragmentShaderSampleInterlock
  result.fragmentShaderPixelInterlock = fragmentShaderPixelInterlock
  result.fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock

proc mkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
  pNext: pointer = nil,
  separateDepthStencilLayouts: Bool32 ,
  ) : PhysicalDeviceSeparateDepthStencilLayoutsFeatures =
  result.sType = sType
  result.pNext = pNext
  result.separateDepthStencilLayouts = separateDepthStencilLayouts

proc mkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
  pNext: pointer = nil,
  pipelineExecutableInfo: Bool32 ,
  ) : PhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipelineExecutableInfo = pipelineExecutableInfo

proc mkPipelineExecutablePropertiesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
  pNext: pointer = nil,
  stages: ShaderStageFlags ,
  name: array[MAX_DESCRIPTION_SIZE,char] ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  subgroupSize: uint32 ,
  ) : PipelineExecutablePropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.stages = stages
  result.name = name
  result.description = description
  result.subgroupSize = subgroupSize

proc mkPipelineExecutableStatisticKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
  pNext: pointer = nil,
  name: array[MAX_DESCRIPTION_SIZE,char] ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  format: PipelineExecutableStatisticFormatKHR ,
  value: PipelineExecutableStatisticValueKHR ,
  ) : PipelineExecutableStatisticKHR =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.description = description
  result.format = format
  result.value = value

proc mkPipelineExecutableInternalRepresentationKHR*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
  pNext: pointer = nil,
  name: array[MAX_DESCRIPTION_SIZE,char] ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  isText: Bool32 ,
  dataSize: uint = 0.uint,
  pData: pointer = nil,
  ) : PipelineExecutableInternalRepresentationKHR =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.description = description
  result.isText = isText
  result.dataSize = dataSize
  result.pData = pData

proc mkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
  pNext: pointer = nil,
  shaderDemoteToHelperInvocation: Bool32 ,
  ) : PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation

proc mkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
  pNext: pointer = nil,
  texelBufferAlignment: Bool32 ,
  ) : PhysicalDeviceTexelBufferAlignmentFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.texelBufferAlignment = texelBufferAlignment

proc mkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
  pNext: pointer = nil,
  storageTexelBufferOffsetAlignmentBytes: DeviceSize ,
  storageTexelBufferOffsetSingleTexelAlignment: Bool32 ,
  uniformTexelBufferOffsetAlignmentBytes: DeviceSize ,
  uniformTexelBufferOffsetSingleTexelAlignment: Bool32 ,
  ) : PhysicalDeviceTexelBufferAlignmentPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
  result.storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
  result.uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
  result.uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment

proc mkPhysicalDeviceSubgroupSizeControlFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
  pNext: pointer = nil,
  subgroupSizeControl: Bool32 ,
  computeFullSubgroups: Bool32 ,
  ) : PhysicalDeviceSubgroupSizeControlFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.subgroupSizeControl = subgroupSizeControl
  result.computeFullSubgroups = computeFullSubgroups

proc mkPhysicalDeviceSubgroupSizeControlPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
  pNext: pointer = nil,
  minSubgroupSize: uint32 ,
  maxSubgroupSize: uint32 ,
  maxComputeWorkgroupSubgroups: uint32 ,
  requiredSubgroupSizeStages: ShaderStageFlags ,
  ) : PhysicalDeviceSubgroupSizeControlPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minSubgroupSize = minSubgroupSize
  result.maxSubgroupSize = maxSubgroupSize
  result.maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
  result.requiredSubgroupSizeStages = requiredSubgroupSizeStages

proc mkPhysicalDeviceLineRasterizationFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
  pNext: pointer = nil,
  rectangularLines: Bool32 ,
  bresenhamLines: Bool32 ,
  smoothLines: Bool32 ,
  stippledRectangularLines: Bool32 ,
  stippledBresenhamLines: Bool32 ,
  stippledSmoothLines: Bool32 ,
  ) : PhysicalDeviceLineRasterizationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.rectangularLines = rectangularLines
  result.bresenhamLines = bresenhamLines
  result.smoothLines = smoothLines
  result.stippledRectangularLines = stippledRectangularLines
  result.stippledBresenhamLines = stippledBresenhamLines
  result.stippledSmoothLines = stippledSmoothLines

proc mkPipelineRasterizationLineStateCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  lineRasterizationMode: LineRasterizationModeEXT ,
  stippledLineEnable: Bool32 ,
  lineStippleFactor: uint32 = 0.uint32,
  lineStipplePattern: uint16 = 0.uint16,
  ) : PipelineRasterizationLineStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.lineRasterizationMode = lineRasterizationMode
  result.stippledLineEnable = stippledLineEnable
  result.lineStippleFactor = lineStippleFactor
  result.lineStipplePattern = lineStipplePattern

proc mkPhysicalDevicePipelineCreationCacheControlFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
  pNext: pointer = nil,
  pipelineCreationCacheControl: Bool32 ,
  ) : PhysicalDevicePipelineCreationCacheControlFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.pipelineCreationCacheControl = pipelineCreationCacheControl

proc mkPhysicalDeviceVulkan11Features*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
  pNext: pointer = nil,
  storageBuffer16BitAccess: Bool32 ,
  uniformAndStorageBuffer16BitAccess: Bool32 ,
  storagePushConstant16: Bool32 ,
  storageInputOutput16: Bool32 ,
  multiview: Bool32 ,
  multiviewGeometryShader: Bool32 ,
  multiviewTessellationShader: Bool32 ,
  variablePointersStorageBuffer: Bool32 ,
  variablePointers: Bool32 ,
  protectedMemory: Bool32 ,
  samplerYcbcrConversion: Bool32 ,
  shaderDrawParameters: Bool32 ,
  ) : PhysicalDeviceVulkan11Features =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer16BitAccess = storageBuffer16BitAccess
  result.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
  result.storagePushConstant16 = storagePushConstant16
  result.storageInputOutput16 = storageInputOutput16
  result.multiview = multiview
  result.multiviewGeometryShader = multiviewGeometryShader
  result.multiviewTessellationShader = multiviewTessellationShader
  result.variablePointersStorageBuffer = variablePointersStorageBuffer
  result.variablePointers = variablePointers
  result.protectedMemory = protectedMemory
  result.samplerYcbcrConversion = samplerYcbcrConversion
  result.shaderDrawParameters = shaderDrawParameters

proc mkPhysicalDeviceVulkan11Properties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
  pNext: pointer = nil,
  deviceUUID: array[UUID_SIZE,uint8] ,
  driverUUID: array[UUID_SIZE,uint8] ,
  deviceLUID: array[LUID_SIZE,uint8] ,
  deviceNodeMask: uint32 ,
  deviceLUIDValid: Bool32 ,
  subgroupSize: uint32 ,
  subgroupSupportedStages: ShaderStageFlags ,
  subgroupSupportedOperations: SubgroupFeatureFlags ,
  subgroupQuadOperationsInAllStages: Bool32 ,
  pointClippingBehavior: PointClippingBehavior ,
  maxMultiviewViewCount: uint32 ,
  maxMultiviewInstanceIndex: uint32 ,
  protectedNoFault: Bool32 ,
  maxPerSetDescriptors: uint32 ,
  maxMemoryAllocationSize: DeviceSize ,
  ) : PhysicalDeviceVulkan11Properties =
  result.sType = sType
  result.pNext = pNext
  result.deviceUUID = deviceUUID
  result.driverUUID = driverUUID
  result.deviceLUID = deviceLUID
  result.deviceNodeMask = deviceNodeMask
  result.deviceLUIDValid = deviceLUIDValid
  result.subgroupSize = subgroupSize
  result.subgroupSupportedStages = subgroupSupportedStages
  result.subgroupSupportedOperations = subgroupSupportedOperations
  result.subgroupQuadOperationsInAllStages = subgroupQuadOperationsInAllStages
  result.pointClippingBehavior = pointClippingBehavior
  result.maxMultiviewViewCount = maxMultiviewViewCount
  result.maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
  result.protectedNoFault = protectedNoFault
  result.maxPerSetDescriptors = maxPerSetDescriptors
  result.maxMemoryAllocationSize = maxMemoryAllocationSize

proc mkPhysicalDeviceVulkan12Features*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
  pNext: pointer = nil,
  samplerMirrorClampToEdge: Bool32 ,
  drawIndirectCount: Bool32 ,
  storageBuffer8BitAccess: Bool32 ,
  uniformAndStorageBuffer8BitAccess: Bool32 ,
  storagePushConstant8: Bool32 ,
  shaderBufferInt64Atomics: Bool32 ,
  shaderSharedInt64Atomics: Bool32 ,
  shaderFloat16: Bool32 ,
  shaderInt8: Bool32 ,
  descriptorIndexing: Bool32 ,
  shaderInputAttachmentArrayDynamicIndexing: Bool32 ,
  shaderUniformTexelBufferArrayDynamicIndexing: Bool32 ,
  shaderStorageTexelBufferArrayDynamicIndexing: Bool32 ,
  shaderUniformBufferArrayNonUniformIndexing: Bool32 ,
  shaderSampledImageArrayNonUniformIndexing: Bool32 ,
  shaderStorageBufferArrayNonUniformIndexing: Bool32 ,
  shaderStorageImageArrayNonUniformIndexing: Bool32 ,
  shaderInputAttachmentArrayNonUniformIndexing: Bool32 ,
  shaderUniformTexelBufferArrayNonUniformIndexing: Bool32 ,
  shaderStorageTexelBufferArrayNonUniformIndexing: Bool32 ,
  descriptorBindingUniformBufferUpdateAfterBind: Bool32 ,
  descriptorBindingSampledImageUpdateAfterBind: Bool32 ,
  descriptorBindingStorageImageUpdateAfterBind: Bool32 ,
  descriptorBindingStorageBufferUpdateAfterBind: Bool32 ,
  descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32 ,
  descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32 ,
  descriptorBindingUpdateUnusedWhilePending: Bool32 ,
  descriptorBindingPartiallyBound: Bool32 ,
  descriptorBindingVariableDescriptorCount: Bool32 ,
  runtimeDescriptorArray: Bool32 ,
  samplerFilterMinmax: Bool32 ,
  scalarBlockLayout: Bool32 ,
  imagelessFramebuffer: Bool32 ,
  uniformBufferStandardLayout: Bool32 ,
  shaderSubgroupExtendedTypes: Bool32 ,
  separateDepthStencilLayouts: Bool32 ,
  hostQueryReset: Bool32 ,
  timelineSemaphore: Bool32 ,
  bufferDeviceAddress: Bool32 ,
  bufferDeviceAddressCaptureReplay: Bool32 ,
  bufferDeviceAddressMultiDevice: Bool32 ,
  vulkanMemoryModel: Bool32 ,
  vulkanMemoryModelDeviceScope: Bool32 ,
  vulkanMemoryModelAvailabilityVisibilityChains: Bool32 ,
  shaderOutputViewportIndex: Bool32 ,
  shaderOutputLayer: Bool32 ,
  subgroupBroadcastDynamicId: Bool32 ,
  ) : PhysicalDeviceVulkan12Features =
  result.sType = sType
  result.pNext = pNext
  result.samplerMirrorClampToEdge = samplerMirrorClampToEdge
  result.drawIndirectCount = drawIndirectCount
  result.storageBuffer8BitAccess = storageBuffer8BitAccess
  result.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
  result.storagePushConstant8 = storagePushConstant8
  result.shaderBufferInt64Atomics = shaderBufferInt64Atomics
  result.shaderSharedInt64Atomics = shaderSharedInt64Atomics
  result.shaderFloat16 = shaderFloat16
  result.shaderInt8 = shaderInt8
  result.descriptorIndexing = descriptorIndexing
  result.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
  result.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
  result.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
  result.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
  result.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
  result.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
  result.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
  result.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
  result.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
  result.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
  result.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
  result.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
  result.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
  result.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
  result.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
  result.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
  result.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
  result.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
  result.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
  result.runtimeDescriptorArray = runtimeDescriptorArray
  result.samplerFilterMinmax = samplerFilterMinmax
  result.scalarBlockLayout = scalarBlockLayout
  result.imagelessFramebuffer = imagelessFramebuffer
  result.uniformBufferStandardLayout = uniformBufferStandardLayout
  result.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
  result.separateDepthStencilLayouts = separateDepthStencilLayouts
  result.hostQueryReset = hostQueryReset
  result.timelineSemaphore = timelineSemaphore
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
  result.vulkanMemoryModel = vulkanMemoryModel
  result.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
  result.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
  result.shaderOutputViewportIndex = shaderOutputViewportIndex
  result.shaderOutputLayer = shaderOutputLayer
  result.subgroupBroadcastDynamicId = subgroupBroadcastDynamicId

proc mkPhysicalDeviceVulkan12Properties*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
  pNext: pointer = nil,
  driverID: DriverId ,
  driverName: array[MAX_DRIVER_NAME_SIZE,char] ,
  driverInfo: array[MAX_DRIVER_INFO_SIZE,char] ,
  conformanceVersion: ConformanceVersion ,
  denormBehaviorIndependence: ShaderFloatControlsIndependence ,
  roundingModeIndependence: ShaderFloatControlsIndependence ,
  shaderSignedZeroInfNanPreserveFloat16: Bool32 ,
  shaderSignedZeroInfNanPreserveFloat32: Bool32 ,
  shaderSignedZeroInfNanPreserveFloat64: Bool32 ,
  shaderDenormPreserveFloat16: Bool32 ,
  shaderDenormPreserveFloat32: Bool32 ,
  shaderDenormPreserveFloat64: Bool32 ,
  shaderDenormFlushToZeroFloat16: Bool32 ,
  shaderDenormFlushToZeroFloat32: Bool32 ,
  shaderDenormFlushToZeroFloat64: Bool32 ,
  shaderRoundingModeRTEFloat16: Bool32 ,
  shaderRoundingModeRTEFloat32: Bool32 ,
  shaderRoundingModeRTEFloat64: Bool32 ,
  shaderRoundingModeRTZFloat16: Bool32 ,
  shaderRoundingModeRTZFloat32: Bool32 ,
  shaderRoundingModeRTZFloat64: Bool32 ,
  maxUpdateAfterBindDescriptorsInAllPools: uint32 ,
  shaderUniformBufferArrayNonUniformIndexingNative: Bool32 ,
  shaderSampledImageArrayNonUniformIndexingNative: Bool32 ,
  shaderStorageBufferArrayNonUniformIndexingNative: Bool32 ,
  shaderStorageImageArrayNonUniformIndexingNative: Bool32 ,
  shaderInputAttachmentArrayNonUniformIndexingNative: Bool32 ,
  robustBufferAccessUpdateAfterBind: Bool32 ,
  quadDivergentImplicitLod: Bool32 ,
  maxPerStageDescriptorUpdateAfterBindSamplers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindSampledImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32 ,
  maxPerStageUpdateAfterBindResources: uint32 ,
  maxDescriptorSetUpdateAfterBindSamplers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindSampledImages: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageImages: uint32 ,
  maxDescriptorSetUpdateAfterBindInputAttachments: uint32 ,
  supportedDepthResolveModes: ResolveModeFlags ,
  supportedStencilResolveModes: ResolveModeFlags ,
  independentResolveNone: Bool32 ,
  independentResolve: Bool32 ,
  filterMinmaxSingleComponentFormats: Bool32 ,
  filterMinmaxImageComponentMapping: Bool32 ,
  maxTimelineSemaphoreValueDifference: uint64 ,
  framebufferIntegerColorSampleCounts: SampleCountFlags = {},
  ) : PhysicalDeviceVulkan12Properties =
  result.sType = sType
  result.pNext = pNext
  result.driverID = driverID
  result.driverName = driverName
  result.driverInfo = driverInfo
  result.conformanceVersion = conformanceVersion
  result.denormBehaviorIndependence = denormBehaviorIndependence
  result.roundingModeIndependence = roundingModeIndependence
  result.shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
  result.shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
  result.shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
  result.shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
  result.shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
  result.shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
  result.shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
  result.shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
  result.shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
  result.shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
  result.shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
  result.shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
  result.shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
  result.shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
  result.shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
  result.maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
  result.shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
  result.shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
  result.shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
  result.shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
  result.shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
  result.robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
  result.quadDivergentImplicitLod = quadDivergentImplicitLod
  result.maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
  result.maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
  result.maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
  result.maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
  result.maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
  result.maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
  result.maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
  result.maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
  result.maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
  result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
  result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
  result.maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
  result.maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
  result.supportedDepthResolveModes = supportedDepthResolveModes
  result.supportedStencilResolveModes = supportedStencilResolveModes
  result.independentResolveNone = independentResolveNone
  result.independentResolve = independentResolve
  result.filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
  result.filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
  result.maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
  result.framebufferIntegerColorSampleCounts = framebufferIntegerColorSampleCounts

proc mkPipelineCompilerControlCreateInfoAMD*(
  sType: StructureType = STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
  pNext: pointer = nil,
  compilerControlFlags: PipelineCompilerControlFlagsAMD = {},
  ) : PipelineCompilerControlCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.compilerControlFlags = compilerControlFlags

proc mkPhysicalDeviceCoherentMemoryFeaturesAMD*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
  pNext: pointer = nil,
  deviceCoherentMemory: Bool32 ,
  ) : PhysicalDeviceCoherentMemoryFeaturesAMD =
  result.sType = sType
  result.pNext = pNext
  result.deviceCoherentMemory = deviceCoherentMemory

proc mkPhysicalDeviceToolPropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
  pNext: pointer = nil,
  name: array[MAX_EXTENSION_NAME_SIZE,char] ,
  version: array[MAX_EXTENSION_NAME_SIZE,char] ,
  purposes: ToolPurposeFlagsEXT ,
  description: array[MAX_DESCRIPTION_SIZE,char] ,
  layer: array[MAX_EXTENSION_NAME_SIZE,char] ,
  ) : PhysicalDeviceToolPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.version = version
  result.purposes = purposes
  result.description = description
  result.layer = layer

proc mkPhysicalDeviceCustomBorderColorFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
  pNext: pointer = nil,
  customBorderColors: Bool32 ,
  customBorderColorWithoutFormat: Bool32 ,
  ) : PhysicalDeviceCustomBorderColorFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.customBorderColors = customBorderColors
  result.customBorderColorWithoutFormat = customBorderColorWithoutFormat

proc mkAccelerationStructureGeometryTrianglesDataKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
  pNext: pointer = nil,
  vertexFormat: Format ,
  vertexData: DeviceOrHostAddressConstKHR ,
  vertexStride: DeviceSize ,
  indexType: IndexType ,
  indexData: DeviceOrHostAddressConstKHR = DeviceOrHostAddressConstKHR(deviceAddress: 0.DeviceAddress),
  transformData: DeviceOrHostAddressConstKHR = DeviceOrHostAddressConstKHR(deviceAddress: 0.DeviceAddress),
  ) : AccelerationStructureGeometryTrianglesDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.vertexFormat = vertexFormat
  result.vertexData = vertexData
  result.vertexStride = vertexStride
  result.indexType = indexType
  result.indexData = indexData
  result.transformData = transformData

proc mkAccelerationStructureGeometryAabbsDataKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
  pNext: pointer = nil,
  data: DeviceOrHostAddressConstKHR ,
  stride: DeviceSize ,
  ) : AccelerationStructureGeometryAabbsDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.data = data
  result.stride = stride

proc mkAccelerationStructureGeometryInstancesDataKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
  pNext: pointer = nil,
  arrayOfPointers: Bool32 ,
  data: DeviceOrHostAddressConstKHR ,
  ) : AccelerationStructureGeometryInstancesDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.arrayOfPointers = arrayOfPointers
  result.data = data

proc mkAccelerationStructureGeometryKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
  pNext: pointer = nil,
  geometryType: GeometryTypeKHR ,
  geometry: AccelerationStructureGeometryDataKHR ,
  flags: GeometryFlagsKHR = {},
  ) : AccelerationStructureGeometryKHR =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.geometry = geometry
  result.flags = flags

proc mkAccelerationStructureBuildGeometryInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
  pNext: pointer = nil,
  `type`: AccelerationStructureTypeKHR ,
  flags: BuildAccelerationStructureFlagsKHR = {},
  update: Bool32 ,
  srcAccelerationStructure: AccelerationStructureKHR = AccelerationStructureKHR(nil),
  dstAccelerationStructure: AccelerationStructureKHR ,
  geometryArrayOfPointers: Bool32 ,
  geometryCount: uint32 = 0.uint32,
  ppGeometries: ptr ptr AccelerationStructureGeometryKHR ,
  scratchData: DeviceOrHostAddressKHR ,
  ) : AccelerationStructureBuildGeometryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.flags = flags
  result.update = update
  result.srcAccelerationStructure = srcAccelerationStructure
  result.dstAccelerationStructure = dstAccelerationStructure
  result.geometryArrayOfPointers = geometryArrayOfPointers
  result.geometryCount = geometryCount
  result.ppGeometries = ppGeometries
  result.scratchData = scratchData

proc mkAccelerationStructureCreateGeometryTypeInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR,
  pNext: pointer = nil,
  geometryType: GeometryTypeKHR ,
  maxPrimitiveCount: uint32 ,
  indexType: IndexType ,
  maxVertexCount: uint32 = 0.uint32,
  vertexFormat: Format = 0.Format,
  allowsTransforms: Bool32 = 0.Bool32,
  ) : AccelerationStructureCreateGeometryTypeInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.maxPrimitiveCount = maxPrimitiveCount
  result.indexType = indexType
  result.maxVertexCount = maxVertexCount
  result.vertexFormat = vertexFormat
  result.allowsTransforms = allowsTransforms

proc mkAccelerationStructureCreateInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  compactedSize: DeviceSize ,
  `type`: AccelerationStructureTypeKHR ,
  flags: BuildAccelerationStructureFlagsKHR = {},
  maxGeometryCount: uint32 = 0.uint32,
  pGeometryInfos: ptr AccelerationStructureCreateGeometryTypeInfoKHR ,
  deviceAddress: DeviceAddress = 0.DeviceAddress,
  ) : AccelerationStructureCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.compactedSize = compactedSize
  result.`type` = `type`
  result.flags = flags
  result.maxGeometryCount = maxGeometryCount
  result.pGeometryInfos = pGeometryInfos
  result.deviceAddress = deviceAddress

proc mkAccelerationStructureInstanceKHR*(
  transform: TransformMatrixKHR ,
  instanceCustomIndex: uint32 ,
  mask: uint32 ,
  instanceShaderBindingTableRecordOffset: uint32 ,
  flags: GeometryInstanceFlagsKHR = {},
  accelerationStructureReference: uint64 ,
  ) : AccelerationStructureInstanceKHR =
  result.transform = transform
  result.instanceCustomIndex = instanceCustomIndex
  result.mask = mask
  result.instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset
  result.flags = flags
  result.accelerationStructureReference = accelerationStructureReference

proc mkCopyAccelerationStructureToMemoryInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
  pNext: pointer = nil,
  src: AccelerationStructureKHR ,
  dst: DeviceOrHostAddressKHR ,
  mode: CopyAccelerationStructureModeKHR ,
  ) : CopyAccelerationStructureToMemoryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkCopyMemoryToAccelerationStructureInfoKHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
  pNext: pointer = nil,
  src: DeviceOrHostAddressConstKHR ,
  dst: AccelerationStructureKHR ,
  mode: CopyAccelerationStructureModeKHR ,
  ) : CopyMemoryToAccelerationStructureInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkPhysicalDeviceExtendedDynamicStateFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
  pNext: pointer = nil,
  extendedDynamicState: Bool32 ,
  ) : PhysicalDeviceExtendedDynamicStateFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.extendedDynamicState = extendedDynamicState

proc mkPhysicalDeviceDiagnosticsConfigFeaturesNV*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
  pNext: pointer = nil,
  diagnosticsConfig: Bool32 ,
  ) : PhysicalDeviceDiagnosticsConfigFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.diagnosticsConfig = diagnosticsConfig

proc mkDeviceDiagnosticsConfigCreateInfoNV*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: DeviceDiagnosticsConfigFlagsNV = {},
  ) : DeviceDiagnosticsConfigCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkPhysicalDeviceRobustness2FeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
  pNext: pointer = nil,
  robustBufferAccess2: Bool32 ,
  robustImageAccess2: Bool32 ,
  nullDescriptor: Bool32 ,
  ) : PhysicalDeviceRobustness2FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustBufferAccess2 = robustBufferAccess2
  result.robustImageAccess2 = robustImageAccess2
  result.nullDescriptor = nullDescriptor

proc mkPhysicalDeviceRobustness2PropertiesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
  pNext: pointer = nil,
  robustStorageBufferAccessSizeAlignment: DeviceSize ,
  robustUniformBufferAccessSizeAlignment: DeviceSize ,
  ) : PhysicalDeviceRobustness2PropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustStorageBufferAccessSizeAlignment = robustStorageBufferAccessSizeAlignment
  result.robustUniformBufferAccessSizeAlignment = robustUniformBufferAccessSizeAlignment

proc mkPhysicalDeviceImageRobustnessFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
  pNext: pointer = nil,
  robustImageAccess: Bool32 ,
  ) : PhysicalDeviceImageRobustnessFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustImageAccess = robustImageAccess

proc mkPhysicalDevicePortabilitySubsetFeaturesKHR*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR,
  pNext: pointer = nil,
  constantAlphaColorBlendFactors: Bool32 ,
  events: Bool32 ,
  imageViewFormatReinterpretation: Bool32 ,
  imageViewFormatSwizzle: Bool32 ,
  imageView2DOn3DImage: Bool32 ,
  multisampleArrayImage: Bool32 ,
  mutableComparisonSamplers: Bool32 ,
  pointPolygons: Bool32 ,
  samplerMipLodBias: Bool32 ,
  separateStencilMaskRef: Bool32 ,
  shaderSampleRateInterpolationFunctions: Bool32 ,
  tessellationIsolines: Bool32 ,
  tessellationPointMode: Bool32 ,
  triangleFans: Bool32 ,
  vertexAttributeAccessBeyondStride: Bool32 ,
  ) : PhysicalDevicePortabilitySubsetFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.constantAlphaColorBlendFactors = constantAlphaColorBlendFactors
  result.events = events
  result.imageViewFormatReinterpretation = imageViewFormatReinterpretation
  result.imageViewFormatSwizzle = imageViewFormatSwizzle
  result.imageView2DOn3DImage = imageView2DOn3DImage
  result.multisampleArrayImage = multisampleArrayImage
  result.mutableComparisonSamplers = mutableComparisonSamplers
  result.pointPolygons = pointPolygons
  result.samplerMipLodBias = samplerMipLodBias
  result.separateStencilMaskRef = separateStencilMaskRef
  result.shaderSampleRateInterpolationFunctions = shaderSampleRateInterpolationFunctions
  result.tessellationIsolines = tessellationIsolines
  result.tessellationPointMode = tessellationPointMode
  result.triangleFans = triangleFans
  result.vertexAttributeAccessBeyondStride = vertexAttributeAccessBeyondStride

proc mkPhysicalDevice4444FormatsFeaturesEXT*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
  pNext: pointer = nil,
  formatA4R4G4B4: Bool32 ,
  formatA4B4G4R4: Bool32 ,
  ) : PhysicalDevice4444FormatsFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.formatA4R4G4B4 = formatA4R4G4B4
  result.formatA4B4G4R4 = formatA4B4G4R4

proc mkBufferCopy2KHR*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_COPY_2_KHR,
  pNext: pointer = nil,
  srcOffset: DeviceSize ,
  dstOffset: DeviceSize ,
  size: DeviceSize ,
  ) : BufferCopy2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcOffset = srcOffset
  result.dstOffset = dstOffset
  result.size = size

proc mkImageCopy2KHR*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_COPY_2_KHR,
  pNext: pointer = nil,
  srcSubresource: ImageSubresourceLayers ,
  srcOffset: Offset3D ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffset: Offset3D ,
  extent: Extent3D ,
  ) : ImageCopy2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkImageBlit2KHR*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_BLIT_2_KHR,
  pNext: pointer = nil,
  srcSubresource: ImageSubresourceLayers ,
  srcOffsets: array[2,Offset3D] ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffsets: array[2,Offset3D] ,
  ) : ImageBlit2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcSubresource = srcSubresource
  result.srcOffsets = srcOffsets
  result.dstSubresource = dstSubresource
  result.dstOffsets = dstOffsets

proc mkBufferImageCopy2KHR*(
  sType: StructureType = STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR,
  pNext: pointer = nil,
  bufferOffset: DeviceSize ,
  bufferRowLength: uint32 ,
  bufferImageHeight: uint32 ,
  imageSubresource: ImageSubresourceLayers ,
  imageOffset: Offset3D ,
  imageExtent: Extent3D ,
  ) : BufferImageCopy2KHR =
  result.sType = sType
  result.pNext = pNext
  result.bufferOffset = bufferOffset
  result.bufferRowLength = bufferRowLength
  result.bufferImageHeight = bufferImageHeight
  result.imageSubresource = imageSubresource
  result.imageOffset = imageOffset
  result.imageExtent = imageExtent

proc mkImageResolve2KHR*(
  sType: StructureType = STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR,
  pNext: pointer = nil,
  srcSubresource: ImageSubresourceLayers ,
  srcOffset: Offset3D ,
  dstSubresource: ImageSubresourceLayers ,
  dstOffset: Offset3D ,
  extent: Extent3D ,
  ) : ImageResolve2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkCopyBufferInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR,
  pNext: pointer = nil,
  srcBuffer: Buffer ,
  dstBuffer: Buffer ,
  regionCount: uint32 ,
  pRegions: ptr BufferCopy2KHR ,
  ) : CopyBufferInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcBuffer = srcBuffer
  result.dstBuffer = dstBuffer
  result.regionCount = regionCount
  result.pRegions = pRegions

proc mkCopyImageInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR,
  pNext: pointer = nil,
  srcImage: Image ,
  srcImageLayout: ImageLayout ,
  dstImage: Image ,
  dstImageLayout: ImageLayout ,
  regionCount: uint32 ,
  pRegions: ptr ImageCopy2KHR ,
  ) : CopyImageInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcImage = srcImage
  result.srcImageLayout = srcImageLayout
  result.dstImage = dstImage
  result.dstImageLayout = dstImageLayout
  result.regionCount = regionCount
  result.pRegions = pRegions

proc mkBlitImageInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR,
  pNext: pointer = nil,
  srcImage: Image ,
  srcImageLayout: ImageLayout ,
  dstImage: Image ,
  dstImageLayout: ImageLayout ,
  regionCount: uint32 ,
  pRegions: ptr ImageBlit2KHR ,
  filter: Filter ,
  ) : BlitImageInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcImage = srcImage
  result.srcImageLayout = srcImageLayout
  result.dstImage = dstImage
  result.dstImageLayout = dstImageLayout
  result.regionCount = regionCount
  result.pRegions = pRegions
  result.filter = filter

proc mkCopyBufferToImageInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR,
  pNext: pointer = nil,
  srcBuffer: Buffer ,
  dstImage: Image ,
  dstImageLayout: ImageLayout ,
  regionCount: uint32 ,
  pRegions: ptr BufferImageCopy2KHR ,
  ) : CopyBufferToImageInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcBuffer = srcBuffer
  result.dstImage = dstImage
  result.dstImageLayout = dstImageLayout
  result.regionCount = regionCount
  result.pRegions = pRegions

proc mkCopyImageToBufferInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR,
  pNext: pointer = nil,
  srcImage: Image ,
  srcImageLayout: ImageLayout ,
  dstBuffer: Buffer ,
  regionCount: uint32 ,
  pRegions: ptr BufferImageCopy2KHR ,
  ) : CopyImageToBufferInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcImage = srcImage
  result.srcImageLayout = srcImageLayout
  result.dstBuffer = dstBuffer
  result.regionCount = regionCount
  result.pRegions = pRegions

proc mkResolveImageInfo2KHR*(
  sType: StructureType = STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR,
  pNext: pointer = nil,
  srcImage: Image ,
  srcImageLayout: ImageLayout ,
  dstImage: Image ,
  dstImageLayout: ImageLayout ,
  regionCount: uint32 ,
  pRegions: ptr ImageResolve2KHR ,
  ) : ResolveImageInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.srcImage = srcImage
  result.srcImageLayout = srcImageLayout
  result.dstImage = dstImage
  result.dstImageLayout = dstImageLayout
  result.regionCount = regionCount
  result.pRegions = pRegions

proc mkPhysicalDeviceProperties*(
  apiVersion: uint32 ,
  driverVersion: uint32 ,
  vendorID: uint32 ,
  deviceID: uint32 ,
  deviceType: PhysicalDeviceType ,
  deviceName: array[MAX_PHYSICAL_DEVICE_NAME_SIZE,char] ,
  pipelineCacheUUID: array[UUID_SIZE,uint8] ,
  limits: PhysicalDeviceLimits ,
  sparseProperties: PhysicalDeviceSparseProperties ,
  ) : PhysicalDeviceProperties =
  result.apiVersion = apiVersion
  result.driverVersion = driverVersion
  result.vendorID = vendorID
  result.deviceID = deviceID
  result.deviceType = deviceType
  result.deviceName = deviceName
  result.pipelineCacheUUID = pipelineCacheUUID
  result.limits = limits
  result.sparseProperties = sparseProperties

proc mkDeviceCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_DEVICE_CREATE_INFO,
  pNext: pointer = nil,
  flags: DeviceCreateFlags = {},
  queueCreateInfoCount: uint32 ,
  pQueueCreateInfos: ptr DeviceQueueCreateInfo ,
  enabledLayerCount: uint32 = 0.uint32,
  ppEnabledLayerNames: ptr ptr char ,
  enabledExtensionCount: uint32 = 0.uint32,
  ppEnabledExtensionNames: ptr ptr char ,
  pEnabledFeatures: ptr PhysicalDeviceFeatures = nil,
  ) : DeviceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueCreateInfoCount = queueCreateInfoCount
  result.pQueueCreateInfos = pQueueCreateInfos
  result.enabledLayerCount = enabledLayerCount
  result.ppEnabledLayerNames = ppEnabledLayerNames
  result.enabledExtensionCount = enabledExtensionCount
  result.ppEnabledExtensionNames = ppEnabledExtensionNames
  result.pEnabledFeatures = pEnabledFeatures

proc mkPhysicalDeviceMemoryProperties*(
  memoryTypeCount: uint32 ,
  memoryTypes: array[MAX_MEMORY_TYPES,MemoryType] ,
  memoryHeapCount: uint32 ,
  memoryHeaps: array[MAX_MEMORY_HEAPS,MemoryHeap] ,
  ) : PhysicalDeviceMemoryProperties =
  result.memoryTypeCount = memoryTypeCount
  result.memoryTypes = memoryTypes
  result.memoryHeapCount = memoryHeapCount
  result.memoryHeaps = memoryHeaps

proc mkPhysicalDeviceProperties2*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
  pNext: pointer = nil,
  properties: PhysicalDeviceProperties ,
  ) : PhysicalDeviceProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.properties = properties

proc mkPhysicalDeviceMemoryProperties2*(
  sType: StructureType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
  pNext: pointer = nil,
  memoryProperties: PhysicalDeviceMemoryProperties ,
  ) : PhysicalDeviceMemoryProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryProperties = memoryProperties

proc mkPresentRegionsKHR*(
  sType: StructureType = STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
  pNext: pointer = nil,
  swapchainCount: uint32 ,
  pRegions: ptr PresentRegionKHR = nil,
  ) : PresentRegionsKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pRegions = pRegions

proc mkDebugUtilsMessengerCreateInfoEXT*(
  sType: StructureType = STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: DebugUtilsMessengerCreateFlagsEXT = {},
  messageSeverity: DebugUtilsMessageSeverityFlagsEXT ,
  messageType: DebugUtilsMessageTypeFlagsEXT ,
  pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT ,
  pUserData: pointer = nil,
  ) : DebugUtilsMessengerCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.messageSeverity = messageSeverity
  result.messageType = messageType
  result.pfnUserCallback = pfnUserCallback
  result.pUserData = pUserData

proc mkDrmFormatModifierPropertiesListEXT*(
  sType: StructureType = STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
  pNext: pointer = nil,
  drmFormatModifierCount: uint32 = 0.uint32,
  pDrmFormatModifierProperties: ptr DrmFormatModifierPropertiesEXT ,
  ) : DrmFormatModifierPropertiesListEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifierCount = drmFormatModifierCount
  result.pDrmFormatModifierProperties = pDrmFormatModifierProperties

proc mkFramebufferAttachmentsCreateInfo*(
  sType: StructureType = STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
  pNext: pointer = nil,
  attachmentImageInfoCount: uint32 = 0.uint32,
  pAttachmentImageInfos: ptr FramebufferAttachmentImageInfo ,
  ) : FramebufferAttachmentsCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.attachmentImageInfoCount = attachmentImageInfoCount
  result.pAttachmentImageInfos = pAttachmentImageInfos


# Helpers
converter toDeviceSize*(x: int): DeviceSize = x.DeviceSize
func ulen*[N,T](x: array[N,T]): uint32 = x.len.uint32
func ulen*[T](x: seq[T]): uint32 = x.len.uint32

# Loader
var loadProc*: proc(inst: Instance, procName: cstring): pointer

when not defined(vkCustomLoader):
  import dynlib

  when defined(windows):
    const dll = "vulkan-1.dll"
  elif defined(macosx):
    const dll = "libMoltenVK.dylib"
  else:
    const dll = "libvulkan.so.1"

  let handle = loadLib(dll)
  if isNil(handle):
    quit("could not load: " & dll)

  let getProcAddress = cast[proc(inst: Instance, s: cstring): pointer {.stdcall.}](symAddr(handle, "vkGetInstanceProcAddr"))
  if getProcAddress == nil:
    quit("failed to load `vkGetInstanceProcAddr` from " & dll)

  loadProc = proc(inst: Instance, procName: cstring): pointer =
    result = getProcAddress(inst, procName)
    if result != nil:
      return
    result = symAddr(handle, procName)

proc loadProcs*(inst: Instance) =
  AcquireFullScreenExclusiveModeEXT = cast[proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}](loadProc(inst, "vkAcquireFullScreenExclusiveModeEXT"))
  AcquireNextImage2KHR = cast[proc (device: Device, pAcquireInfo: ptr AcquireNextImageInfoKHR, pImageIndex: ptr uint32): Result {.stdcall.}](loadProc(inst, "vkAcquireNextImage2KHR"))
  AcquireNextImageKHR = cast[proc (device: Device, swapchain: SwapchainKHR, timeout: uint64, semaphore: Semaphore, fence: Fence, pImageIndex: ptr uint32): Result {.stdcall.}](loadProc(inst, "vkAcquireNextImageKHR"))
  AcquirePerformanceConfigurationINTEL = cast[proc (device: Device, pAcquireInfo: ptr PerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr PerformanceConfigurationINTEL): Result {.stdcall.}](loadProc(inst, "vkAcquirePerformanceConfigurationINTEL"))
  AcquireProfilingLockKHR = cast[proc (device: Device, pInfo: ptr AcquireProfilingLockInfoKHR): Result {.stdcall.}](loadProc(inst, "vkAcquireProfilingLockKHR"))
  AcquireXlibDisplayEXT = cast[proc (physicalDevice: PhysicalDevice, dpy: ptr Display, display: DisplayKHR): Result {.stdcall.}](loadProc(inst, "vkAcquireXlibDisplayEXT"))
  AllocateCommandBuffers = cast[proc (device: Device, pAllocateInfo: ptr CommandBufferAllocateInfo, pCommandBuffers: ptr CommandBuffer): Result {.stdcall.}](loadProc(inst, "vkAllocateCommandBuffers"))
  AllocateDescriptorSets = cast[proc (device: Device, pAllocateInfo: ptr DescriptorSetAllocateInfo, pDescriptorSets: ptr DescriptorSet): Result {.stdcall.}](loadProc(inst, "vkAllocateDescriptorSets"))
  AllocateMemory = cast[proc (device: Device, pAllocateInfo: ptr MemoryAllocateInfo, pAllocator: ptr AllocationCallbacks, pMemory: ptr DeviceMemory): Result {.stdcall.}](loadProc(inst, "vkAllocateMemory"))
  BeginCommandBuffer = cast[proc (commandBuffer: CommandBuffer, pBeginInfo: ptr CommandBufferBeginInfo): Result {.stdcall.}](loadProc(inst, "vkBeginCommandBuffer"))
  BindAccelerationStructureMemoryKHR = cast[proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindAccelerationStructureMemoryInfoKHR): Result {.stdcall.}](loadProc(inst, "vkBindAccelerationStructureMemoryKHR"))
  BindBufferMemory = cast[proc (device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize): Result {.stdcall.}](loadProc(inst, "vkBindBufferMemory"))
  BindBufferMemory2 = cast[proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindBufferMemoryInfo): Result {.stdcall.}](loadProc(inst, "vkBindBufferMemory2"))
  BindImageMemory = cast[proc (device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize): Result {.stdcall.}](loadProc(inst, "vkBindImageMemory"))
  BindImageMemory2 = cast[proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindImageMemoryInfo): Result {.stdcall.}](loadProc(inst, "vkBindImageMemory2"))
  BuildAccelerationStructureKHR = cast[proc (device: Device, infoCount: uint32, pInfos: ptr AccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr AccelerationStructureBuildOffsetInfoKHR): Result {.stdcall.}](loadProc(inst, "vkBuildAccelerationStructureKHR"))
  CmdBeginConditionalRenderingEXT = cast[proc (commandBuffer: CommandBuffer, pConditionalRenderingBegin: ptr ConditionalRenderingBeginInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdBeginConditionalRenderingEXT"))
  CmdBeginDebugUtilsLabelEXT = cast[proc (commandBuffer: CommandBuffer, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkCmdBeginDebugUtilsLabelEXT"))
  CmdBeginQuery = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, flags: QueryControlFlags): void {.stdcall.}](loadProc(inst, "vkCmdBeginQuery"))
  CmdBeginQueryIndexedEXT = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, flags: QueryControlFlags, index: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBeginQueryIndexedEXT"))
  CmdBeginRenderPass = cast[proc (commandBuffer: CommandBuffer, pRenderPassBegin: ptr RenderPassBeginInfo, contents: SubpassContents): void {.stdcall.}](loadProc(inst, "vkCmdBeginRenderPass"))
  CmdBeginRenderPass2 = cast[proc (commandBuffer: CommandBuffer, pRenderPassBegin: ptr RenderPassBeginInfo, pSubpassBeginInfo: ptr SubpassBeginInfo): void {.stdcall.}](loadProc(inst, "vkCmdBeginRenderPass2"))
  CmdBeginTransformFeedbackEXT = cast[proc (commandBuffer: CommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr Buffer, pCounterBufferOffsets: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBeginTransformFeedbackEXT"))
  CmdBindDescriptorSets = cast[proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr DescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): void {.stdcall.}](loadProc(inst, "vkCmdBindDescriptorSets"))
  CmdBindIndexBuffer = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType): void {.stdcall.}](loadProc(inst, "vkCmdBindIndexBuffer"))
  CmdBindPipeline = cast[proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline): void {.stdcall.}](loadProc(inst, "vkCmdBindPipeline"))
  CmdBindPipelineShaderGroupNV = cast[proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBindPipelineShaderGroupNV"))
  CmdBindShadingRateImageNV = cast[proc (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout): void {.stdcall.}](loadProc(inst, "vkCmdBindShadingRateImageNV"))
  CmdBindTransformFeedbackBuffersEXT = cast[proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize, pSizes: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindTransformFeedbackBuffersEXT"))
  CmdBindVertexBuffers = cast[proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindVertexBuffers"))
  CmdBindVertexBuffers2EXT = cast[proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize, pSizes: ptr DeviceSize, pStrides: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindVertexBuffers2EXT"))
  CmdBlitImage = cast[proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageBlit, filter: Filter): void {.stdcall.}](loadProc(inst, "vkCmdBlitImage"))
  CmdBlitImage2KHR = cast[proc (commandBuffer: CommandBuffer, pBlitImageInfo: ptr BlitImageInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdBlitImage2KHR"))
  CmdBuildAccelerationStructureIndirectKHR = cast[proc (commandBuffer: CommandBuffer, pInfo: ptr AccelerationStructureBuildGeometryInfoKHR, indirectBuffer: Buffer, indirectOffset: DeviceSize, indirectStride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureIndirectKHR"))
  CmdBuildAccelerationStructureKHR = cast[proc (commandBuffer: CommandBuffer, infoCount: uint32, pInfos: ptr AccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr AccelerationStructureBuildOffsetInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureKHR"))
  CmdBuildAccelerationStructureNV = cast[proc (commandBuffer: CommandBuffer, pInfo: ptr AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: Bool32, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, scratch: Buffer, scratchOffset: DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureNV"))
  CmdClearAttachments = cast[proc (commandBuffer: CommandBuffer, attachmentCount: uint32, pAttachments: ptr ClearAttachment, rectCount: uint32, pRects: ptr ClearRect): void {.stdcall.}](loadProc(inst, "vkCmdClearAttachments"))
  CmdClearColorImage = cast[proc (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: ptr ClearColorValue, rangeCount: uint32, pRanges: ptr ImageSubresourceRange): void {.stdcall.}](loadProc(inst, "vkCmdClearColorImage"))
  CmdClearDepthStencilImage = cast[proc (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: ptr ClearDepthStencilValue, rangeCount: uint32, pRanges: ptr ImageSubresourceRange): void {.stdcall.}](loadProc(inst, "vkCmdClearDepthStencilImage"))
  CmdCopyAccelerationStructureKHR = cast[proc (commandBuffer: CommandBuffer, pInfo: ptr CopyAccelerationStructureInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureKHR"))
  CmdCopyAccelerationStructureNV = cast[proc (commandBuffer: CommandBuffer, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, mode: CopyAccelerationStructureModeKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureNV"))
  CmdCopyAccelerationStructureToMemoryKHR = cast[proc (commandBuffer: CommandBuffer, pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureToMemoryKHR"))
  CmdCopyBuffer = cast[proc (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: uint32, pRegions: ptr BufferCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyBuffer"))
  CmdCopyBuffer2KHR = cast[proc (commandBuffer: CommandBuffer, pCopyBufferInfo: ptr CopyBufferInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyBuffer2KHR"))
  CmdCopyBufferToImage = cast[proc (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr BufferImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyBufferToImage"))
  CmdCopyBufferToImage2KHR = cast[proc (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: ptr CopyBufferToImageInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyBufferToImage2KHR"))
  CmdCopyImage = cast[proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyImage"))
  CmdCopyImage2KHR = cast[proc (commandBuffer: CommandBuffer, pCopyImageInfo: ptr CopyImageInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyImage2KHR"))
  CmdCopyImageToBuffer = cast[proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: uint32, pRegions: ptr BufferImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyImageToBuffer"))
  CmdCopyImageToBuffer2KHR = cast[proc (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: ptr CopyImageToBufferInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyImageToBuffer2KHR"))
  CmdCopyMemoryToAccelerationStructureKHR = cast[proc (commandBuffer: CommandBuffer, pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyMemoryToAccelerationStructureKHR"))
  CmdCopyQueryPoolResults = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags): void {.stdcall.}](loadProc(inst, "vkCmdCopyQueryPoolResults"))
  CmdDebugMarkerBeginEXT = cast[proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr DebugMarkerMarkerInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerBeginEXT"))
  CmdDebugMarkerEndEXT = cast[proc (commandBuffer: CommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerEndEXT"))
  CmdDebugMarkerInsertEXT = cast[proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr DebugMarkerMarkerInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerInsertEXT"))
  CmdDispatch = cast[proc (commandBuffer: CommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDispatch"))
  CmdDispatchBase = cast[proc (commandBuffer: CommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDispatchBase"))
  CmdDispatchIndirect = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdDispatchIndirect"))
  CmdDraw = cast[proc (commandBuffer: CommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDraw"))
  CmdDrawIndexed = cast[proc (commandBuffer: CommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexed"))
  CmdDrawIndexedIndirect = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexedIndirect"))
  CmdDrawIndexedIndirectCount = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexedIndirectCount"))
  CmdDrawIndirect = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirect"))
  CmdDrawIndirectByteCountEXT = cast[proc (commandBuffer: CommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: uint32, vertexStride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirectByteCountEXT"))
  CmdDrawIndirectCount = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirectCount"))
  CmdDrawMeshTasksIndirectCountNV = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksIndirectCountNV"))
  CmdDrawMeshTasksIndirectNV = cast[proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksIndirectNV"))
  CmdDrawMeshTasksNV = cast[proc (commandBuffer: CommandBuffer, taskCount: uint32, firstTask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksNV"))
  CmdEndConditionalRenderingEXT = cast[proc (commandBuffer: CommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndConditionalRenderingEXT"))
  CmdEndDebugUtilsLabelEXT = cast[proc (commandBuffer: CommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndDebugUtilsLabelEXT"))
  CmdEndQuery = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32): void {.stdcall.}](loadProc(inst, "vkCmdEndQuery"))
  CmdEndQueryIndexedEXT = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, index: uint32): void {.stdcall.}](loadProc(inst, "vkCmdEndQueryIndexedEXT"))
  CmdEndRenderPass = cast[proc (commandBuffer: CommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndRenderPass"))
  CmdEndRenderPass2 = cast[proc (commandBuffer: CommandBuffer, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}](loadProc(inst, "vkCmdEndRenderPass2"))
  CmdEndTransformFeedbackEXT = cast[proc (commandBuffer: CommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr Buffer, pCounterBufferOffsets: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdEndTransformFeedbackEXT"))
  CmdExecuteCommands = cast[proc (commandBuffer: CommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr CommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdExecuteCommands"))
  CmdExecuteGeneratedCommandsNV = cast[proc (commandBuffer: CommandBuffer, isPreprocessed: Bool32, pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV): void {.stdcall.}](loadProc(inst, "vkCmdExecuteGeneratedCommandsNV"))
  CmdFillBuffer = cast[proc (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: uint32): void {.stdcall.}](loadProc(inst, "vkCmdFillBuffer"))
  CmdInsertDebugUtilsLabelEXT = cast[proc (commandBuffer: CommandBuffer, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkCmdInsertDebugUtilsLabelEXT"))
  CmdNextSubpass = cast[proc (commandBuffer: CommandBuffer, contents: SubpassContents): void {.stdcall.}](loadProc(inst, "vkCmdNextSubpass"))
  CmdNextSubpass2 = cast[proc (commandBuffer: CommandBuffer, pSubpassBeginInfo: ptr SubpassBeginInfo, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}](loadProc(inst, "vkCmdNextSubpass2"))
  CmdPipelineBarrier = cast[proc (commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr MemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr BufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr ImageMemoryBarrier): void {.stdcall.}](loadProc(inst, "vkCmdPipelineBarrier"))
  CmdPreprocessGeneratedCommandsNV = cast[proc (commandBuffer: CommandBuffer, pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV): void {.stdcall.}](loadProc(inst, "vkCmdPreprocessGeneratedCommandsNV"))
  CmdPushConstants = cast[proc (commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: uint32, size: uint32, pValues: pointer): void {.stdcall.}](loadProc(inst, "vkCmdPushConstants"))
  CmdPushDescriptorSetKHR = cast[proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr WriteDescriptorSet): void {.stdcall.}](loadProc(inst, "vkCmdPushDescriptorSetKHR"))
  CmdPushDescriptorSetWithTemplateKHR = cast[proc (commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: uint32, pData: pointer): void {.stdcall.}](loadProc(inst, "vkCmdPushDescriptorSetWithTemplateKHR"))
  CmdResetEvent = cast[proc (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags): void {.stdcall.}](loadProc(inst, "vkCmdResetEvent"))
  CmdResetQueryPool = cast[proc (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](loadProc(inst, "vkCmdResetQueryPool"))
  CmdResolveImage = cast[proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageResolve): void {.stdcall.}](loadProc(inst, "vkCmdResolveImage"))
  CmdResolveImage2KHR = cast[proc (commandBuffer: CommandBuffer, pResolveImageInfo: ptr ResolveImageInfo2KHR): void {.stdcall.}](loadProc(inst, "vkCmdResolveImage2KHR"))
  CmdSetBlendConstants = cast[proc (commandBuffer: CommandBuffer, blendConstants: array[4,float32]): void {.stdcall.}](loadProc(inst, "vkCmdSetBlendConstants"))
  CmdSetCheckpointNV = cast[proc (commandBuffer: CommandBuffer, pCheckpointMarker: pointer): void {.stdcall.}](loadProc(inst, "vkCmdSetCheckpointNV"))
  CmdSetCoarseSampleOrderNV = cast[proc (commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr CoarseSampleOrderCustomNV): void {.stdcall.}](loadProc(inst, "vkCmdSetCoarseSampleOrderNV"))
  CmdSetCullModeEXT = cast[proc (commandBuffer: CommandBuffer, cullMode: CullModeFlags): void {.stdcall.}](loadProc(inst, "vkCmdSetCullModeEXT"))
  CmdSetDepthBias = cast[proc (commandBuffer: CommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBias"))
  CmdSetDepthBounds = cast[proc (commandBuffer: CommandBuffer, minDepthBounds: float32, maxDepthBounds: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBounds"))
  CmdSetDepthBoundsTestEnableEXT = cast[proc (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBoundsTestEnableEXT"))
  CmdSetDepthCompareOpEXT = cast[proc (commandBuffer: CommandBuffer, depthCompareOp: CompareOp): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthCompareOpEXT"))
  CmdSetDepthTestEnableEXT = cast[proc (commandBuffer: CommandBuffer, depthTestEnable: Bool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthTestEnableEXT"))
  CmdSetDepthWriteEnableEXT = cast[proc (commandBuffer: CommandBuffer, depthWriteEnable: Bool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthWriteEnableEXT"))
  CmdSetDeviceMask = cast[proc (commandBuffer: CommandBuffer, deviceMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetDeviceMask"))
  CmdSetDiscardRectangleEXT = cast[proc (commandBuffer: CommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr Rect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetDiscardRectangleEXT"))
  CmdSetEvent = cast[proc (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags): void {.stdcall.}](loadProc(inst, "vkCmdSetEvent"))
  CmdSetExclusiveScissorNV = cast[proc (commandBuffer: CommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr Rect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetExclusiveScissorNV"))
  CmdSetFrontFaceEXT = cast[proc (commandBuffer: CommandBuffer, frontFace: FrontFace): void {.stdcall.}](loadProc(inst, "vkCmdSetFrontFaceEXT"))
  CmdSetLineStippleEXT = cast[proc (commandBuffer: CommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16): void {.stdcall.}](loadProc(inst, "vkCmdSetLineStippleEXT"))
  CmdSetLineWidth = cast[proc (commandBuffer: CommandBuffer, lineWidth: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetLineWidth"))
  CmdSetPerformanceMarkerINTEL = cast[proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr PerformanceMarkerInfoINTEL): Result {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceMarkerINTEL"))
  CmdSetPerformanceOverrideINTEL = cast[proc (commandBuffer: CommandBuffer, pOverrideInfo: ptr PerformanceOverrideInfoINTEL): Result {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceOverrideINTEL"))
  CmdSetPerformanceStreamMarkerINTEL = cast[proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr PerformanceStreamMarkerInfoINTEL): Result {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceStreamMarkerINTEL"))
  CmdSetPrimitiveTopologyEXT = cast[proc (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology): void {.stdcall.}](loadProc(inst, "vkCmdSetPrimitiveTopologyEXT"))
  CmdSetSampleLocationsEXT = cast[proc (commandBuffer: CommandBuffer, pSampleLocationsInfo: ptr SampleLocationsInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdSetSampleLocationsEXT"))
  CmdSetScissor = cast[proc (commandBuffer: CommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr Rect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetScissor"))
  CmdSetScissorWithCountEXT = cast[proc (commandBuffer: CommandBuffer, scissorCount: uint32, pScissors: ptr Rect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetScissorWithCountEXT"))
  CmdSetStencilCompareMask = cast[proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilCompareMask"))
  CmdSetStencilOpEXT = cast[proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilOpEXT"))
  CmdSetStencilReference = cast[proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilReference"))
  CmdSetStencilTestEnableEXT = cast[proc (commandBuffer: CommandBuffer, stencilTestEnable: Bool32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilTestEnableEXT"))
  CmdSetStencilWriteMask = cast[proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilWriteMask"))
  CmdSetViewport = cast[proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr Viewport): void {.stdcall.}](loadProc(inst, "vkCmdSetViewport"))
  CmdSetViewportShadingRatePaletteNV = cast[proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr ShadingRatePaletteNV): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportShadingRatePaletteNV"))
  CmdSetViewportWScalingNV = cast[proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr ViewportWScalingNV): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportWScalingNV"))
  CmdSetViewportWithCountEXT = cast[proc (commandBuffer: CommandBuffer, viewportCount: uint32, pViewports: ptr Viewport): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportWithCountEXT"))
  CmdTraceRaysIndirectKHR = cast[proc (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ptr StridedBufferRegionKHR, pMissShaderBindingTable: ptr StridedBufferRegionKHR, pHitShaderBindingTable: ptr StridedBufferRegionKHR, pCallableShaderBindingTable: ptr StridedBufferRegionKHR, buffer: Buffer, offset: DeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysIndirectKHR"))
  CmdTraceRaysKHR = cast[proc (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ptr StridedBufferRegionKHR, pMissShaderBindingTable: ptr StridedBufferRegionKHR, pHitShaderBindingTable: ptr StridedBufferRegionKHR, pCallableShaderBindingTable: ptr StridedBufferRegionKHR, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysKHR"))
  CmdTraceRaysNV = cast[proc (commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysNV"))
  CmdUpdateBuffer = cast[proc (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: pointer): void {.stdcall.}](loadProc(inst, "vkCmdUpdateBuffer"))
  CmdWaitEvents = cast[proc (commandBuffer: CommandBuffer, eventCount: uint32, pEvents: ptr Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr MemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr BufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr ImageMemoryBarrier): void {.stdcall.}](loadProc(inst, "vkCmdWaitEvents"))
  CmdWriteAccelerationStructuresPropertiesKHR = cast[proc (commandBuffer: CommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteAccelerationStructuresPropertiesKHR"))
  CmdWriteBufferMarkerAMD = cast[proc (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, dstBuffer: Buffer, dstOffset: DeviceSize, marker: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteBufferMarkerAMD"))
  CmdWriteTimestamp = cast[proc (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, queryPool: QueryPool, query: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteTimestamp"))
  CompileDeferredNV = cast[proc (device: Device, pipeline: Pipeline, shader: uint32): Result {.stdcall.}](loadProc(inst, "vkCompileDeferredNV"))
  CopyAccelerationStructureKHR = cast[proc (device: Device, pInfo: ptr CopyAccelerationStructureInfoKHR): Result {.stdcall.}](loadProc(inst, "vkCopyAccelerationStructureKHR"))
  CopyAccelerationStructureToMemoryKHR = cast[proc (device: Device, pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR): Result {.stdcall.}](loadProc(inst, "vkCopyAccelerationStructureToMemoryKHR"))
  CopyMemoryToAccelerationStructureKHR = cast[proc (device: Device, pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR): Result {.stdcall.}](loadProc(inst, "vkCopyMemoryToAccelerationStructureKHR"))
  CreateAccelerationStructureKHR = cast[proc (device: Device, pCreateInfo: ptr AccelerationStructureCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pAccelerationStructure: ptr AccelerationStructureKHR): Result {.stdcall.}](loadProc(inst, "vkCreateAccelerationStructureKHR"))
  CreateAccelerationStructureNV = cast[proc (device: Device, pCreateInfo: ptr AccelerationStructureCreateInfoNV, pAllocator: ptr AllocationCallbacks, pAccelerationStructure: ptr AccelerationStructureNV): Result {.stdcall.}](loadProc(inst, "vkCreateAccelerationStructureNV"))
  CreateAndroidSurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr AndroidSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateAndroidSurfaceKHR"))
  CreateBuffer = cast[proc (device: Device, pCreateInfo: ptr BufferCreateInfo, pAllocator: ptr AllocationCallbacks, pBuffer: ptr Buffer): Result {.stdcall.}](loadProc(inst, "vkCreateBuffer"))
  CreateBufferView = cast[proc (device: Device, pCreateInfo: ptr BufferViewCreateInfo, pAllocator: ptr AllocationCallbacks, pView: ptr BufferView): Result {.stdcall.}](loadProc(inst, "vkCreateBufferView"))
  CreateCommandPool = cast[proc (device: Device, pCreateInfo: ptr CommandPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pCommandPool: ptr CommandPool): Result {.stdcall.}](loadProc(inst, "vkCreateCommandPool"))
  CreateComputePipelines = cast[proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr ComputePipelineCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}](loadProc(inst, "vkCreateComputePipelines"))
  CreateDebugReportCallbackEXT = cast[proc (instance: Instance, pCreateInfo: ptr DebugReportCallbackCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pCallback: ptr DebugReportCallbackEXT): Result {.stdcall.}](loadProc(inst, "vkCreateDebugReportCallbackEXT"))
  CreateDebugUtilsMessengerEXT = cast[proc (instance: Instance, pCreateInfo: ptr DebugUtilsMessengerCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pMessenger: ptr DebugUtilsMessengerEXT): Result {.stdcall.}](loadProc(inst, "vkCreateDebugUtilsMessengerEXT"))
  CreateDeferredOperationKHR = cast[proc (device: Device, pAllocator: ptr AllocationCallbacks, pDeferredOperation: ptr DeferredOperationKHR): Result {.stdcall.}](loadProc(inst, "vkCreateDeferredOperationKHR"))
  CreateDescriptorPool = cast[proc (device: Device, pCreateInfo: ptr DescriptorPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pDescriptorPool: ptr DescriptorPool): Result {.stdcall.}](loadProc(inst, "vkCreateDescriptorPool"))
  CreateDescriptorSetLayout = cast[proc (device: Device, pCreateInfo: ptr DescriptorSetLayoutCreateInfo, pAllocator: ptr AllocationCallbacks, pSetLayout: ptr DescriptorSetLayout): Result {.stdcall.}](loadProc(inst, "vkCreateDescriptorSetLayout"))
  CreateDescriptorUpdateTemplate = cast[proc (device: Device, pCreateInfo: ptr DescriptorUpdateTemplateCreateInfo, pAllocator: ptr AllocationCallbacks, pDescriptorUpdateTemplate: ptr DescriptorUpdateTemplate): Result {.stdcall.}](loadProc(inst, "vkCreateDescriptorUpdateTemplate"))
  CreateDevice = cast[proc (physicalDevice: PhysicalDevice, pCreateInfo: ptr DeviceCreateInfo, pAllocator: ptr AllocationCallbacks, pDevice: ptr Device): Result {.stdcall.}](loadProc(inst, "vkCreateDevice"))
  CreateDirectFBSurfaceEXT = cast[proc (instance: Instance, pCreateInfo: ptr DirectFBSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateDirectFBSurfaceEXT"))
  CreateDisplayModeKHR = cast[proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: ptr DisplayModeCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pMode: ptr DisplayModeKHR): Result {.stdcall.}](loadProc(inst, "vkCreateDisplayModeKHR"))
  CreateDisplayPlaneSurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr DisplaySurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateDisplayPlaneSurfaceKHR"))
  CreateEvent = cast[proc (device: Device, pCreateInfo: ptr EventCreateInfo, pAllocator: ptr AllocationCallbacks, pEvent: ptr Event): Result {.stdcall.}](loadProc(inst, "vkCreateEvent"))
  CreateFence = cast[proc (device: Device, pCreateInfo: ptr FenceCreateInfo, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}](loadProc(inst, "vkCreateFence"))
  CreateFramebuffer = cast[proc (device: Device, pCreateInfo: ptr FramebufferCreateInfo, pAllocator: ptr AllocationCallbacks, pFramebuffer: ptr Framebuffer): Result {.stdcall.}](loadProc(inst, "vkCreateFramebuffer"))
  CreateGraphicsPipelines = cast[proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr GraphicsPipelineCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}](loadProc(inst, "vkCreateGraphicsPipelines"))
  CreateHeadlessSurfaceEXT = cast[proc (instance: Instance, pCreateInfo: ptr HeadlessSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateHeadlessSurfaceEXT"))
  CreateIOSSurfaceMVK = cast[proc (instance: Instance, pCreateInfo: ptr IOSSurfaceCreateInfoMVK, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateIOSSurfaceMVK"))
  CreateImage = cast[proc (device: Device, pCreateInfo: ptr ImageCreateInfo, pAllocator: ptr AllocationCallbacks, pImage: ptr Image): Result {.stdcall.}](loadProc(inst, "vkCreateImage"))
  CreateImagePipeSurfaceFUCHSIA = cast[proc (instance: Instance, pCreateInfo: ptr ImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateImagePipeSurfaceFUCHSIA"))
  CreateImageView = cast[proc (device: Device, pCreateInfo: ptr ImageViewCreateInfo, pAllocator: ptr AllocationCallbacks, pView: ptr ImageView): Result {.stdcall.}](loadProc(inst, "vkCreateImageView"))
  CreateIndirectCommandsLayoutNV = cast[proc (device: Device, pCreateInfo: ptr IndirectCommandsLayoutCreateInfoNV, pAllocator: ptr AllocationCallbacks, pIndirectCommandsLayout: ptr IndirectCommandsLayoutNV): Result {.stdcall.}](loadProc(inst, "vkCreateIndirectCommandsLayoutNV"))
  CreateInstance = cast[proc (pCreateInfo: ptr InstanceCreateInfo, pAllocator: ptr AllocationCallbacks, pInstance: ptr Instance): Result {.stdcall.}](loadProc(inst, "vkCreateInstance"))
  CreateMacOSSurfaceMVK = cast[proc (instance: Instance, pCreateInfo: ptr MacOSSurfaceCreateInfoMVK, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateMacOSSurfaceMVK"))
  CreateMetalSurfaceEXT = cast[proc (instance: Instance, pCreateInfo: ptr MetalSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateMetalSurfaceEXT"))
  CreatePipelineCache = cast[proc (device: Device, pCreateInfo: ptr PipelineCacheCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelineCache: ptr PipelineCache): Result {.stdcall.}](loadProc(inst, "vkCreatePipelineCache"))
  CreatePipelineLayout = cast[proc (device: Device, pCreateInfo: ptr PipelineLayoutCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelineLayout: ptr PipelineLayout): Result {.stdcall.}](loadProc(inst, "vkCreatePipelineLayout"))
  CreatePrivateDataSlotEXT = cast[proc (device: Device, pCreateInfo: ptr PrivateDataSlotCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pPrivateDataSlot: ptr PrivateDataSlotEXT): Result {.stdcall.}](loadProc(inst, "vkCreatePrivateDataSlotEXT"))
  CreateQueryPool = cast[proc (device: Device, pCreateInfo: ptr QueryPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pQueryPool: ptr QueryPool): Result {.stdcall.}](loadProc(inst, "vkCreateQueryPool"))
  CreateRayTracingPipelinesKHR = cast[proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr RayTracingPipelineCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}](loadProc(inst, "vkCreateRayTracingPipelinesKHR"))
  CreateRayTracingPipelinesNV = cast[proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr RayTracingPipelineCreateInfoNV, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}](loadProc(inst, "vkCreateRayTracingPipelinesNV"))
  CreateRenderPass = cast[proc (device: Device, pCreateInfo: ptr RenderPassCreateInfo, pAllocator: ptr AllocationCallbacks, pRenderPass: ptr RenderPass): Result {.stdcall.}](loadProc(inst, "vkCreateRenderPass"))
  CreateRenderPass2 = cast[proc (device: Device, pCreateInfo: ptr RenderPassCreateInfo2, pAllocator: ptr AllocationCallbacks, pRenderPass: ptr RenderPass): Result {.stdcall.}](loadProc(inst, "vkCreateRenderPass2"))
  CreateSampler = cast[proc (device: Device, pCreateInfo: ptr SamplerCreateInfo, pAllocator: ptr AllocationCallbacks, pSampler: ptr Sampler): Result {.stdcall.}](loadProc(inst, "vkCreateSampler"))
  CreateSamplerYcbcrConversion = cast[proc (device: Device, pCreateInfo: ptr SamplerYcbcrConversionCreateInfo, pAllocator: ptr AllocationCallbacks, pYcbcrConversion: ptr SamplerYcbcrConversion): Result {.stdcall.}](loadProc(inst, "vkCreateSamplerYcbcrConversion"))
  CreateSemaphore = cast[proc (device: Device, pCreateInfo: ptr SemaphoreCreateInfo, pAllocator: ptr AllocationCallbacks, pSemaphore: ptr Semaphore): Result {.stdcall.}](loadProc(inst, "vkCreateSemaphore"))
  CreateShaderModule = cast[proc (device: Device, pCreateInfo: ptr ShaderModuleCreateInfo, pAllocator: ptr AllocationCallbacks, pShaderModule: ptr ShaderModule): Result {.stdcall.}](loadProc(inst, "vkCreateShaderModule"))
  CreateSharedSwapchainsKHR = cast[proc (device: Device, swapchainCount: uint32, pCreateInfos: ptr SwapchainCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSwapchains: ptr SwapchainKHR): Result {.stdcall.}](loadProc(inst, "vkCreateSharedSwapchainsKHR"))
  CreateStreamDescriptorSurfaceGGP = cast[proc (instance: Instance, pCreateInfo: ptr StreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateStreamDescriptorSurfaceGGP"))
  CreateSwapchainKHR = cast[proc (device: Device, pCreateInfo: ptr SwapchainCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSwapchain: ptr SwapchainKHR): Result {.stdcall.}](loadProc(inst, "vkCreateSwapchainKHR"))
  CreateValidationCacheEXT = cast[proc (device: Device, pCreateInfo: ptr ValidationCacheCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pValidationCache: ptr ValidationCacheEXT): Result {.stdcall.}](loadProc(inst, "vkCreateValidationCacheEXT"))
  CreateViSurfaceNN = cast[proc (instance: Instance, pCreateInfo: ptr ViSurfaceCreateInfoNN, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateViSurfaceNN"))
  CreateWaylandSurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr WaylandSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateWaylandSurfaceKHR"))
  CreateWin32SurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr Win32SurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateWin32SurfaceKHR"))
  CreateXcbSurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr XcbSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateXcbSurfaceKHR"))
  CreateXlibSurfaceKHR = cast[proc (instance: Instance, pCreateInfo: ptr XlibSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}](loadProc(inst, "vkCreateXlibSurfaceKHR"))
  DebugMarkerSetObjectNameEXT = cast[proc (device: Device, pNameInfo: ptr DebugMarkerObjectNameInfoEXT): Result {.stdcall.}](loadProc(inst, "vkDebugMarkerSetObjectNameEXT"))
  DebugMarkerSetObjectTagEXT = cast[proc (device: Device, pTagInfo: ptr DebugMarkerObjectTagInfoEXT): Result {.stdcall.}](loadProc(inst, "vkDebugMarkerSetObjectTagEXT"))
  DebugReportMessageEXT = cast[proc (instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring): void {.stdcall.}](loadProc(inst, "vkDebugReportMessageEXT"))
  DeferredOperationJoinKHR = cast[proc (device: Device, operation: DeferredOperationKHR): Result {.stdcall.}](loadProc(inst, "vkDeferredOperationJoinKHR"))
  DestroyAccelerationStructureKHR = cast[proc (device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyAccelerationStructureKHR"))
  DestroyBuffer = cast[proc (device: Device, buffer: Buffer, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyBuffer"))
  DestroyBufferView = cast[proc (device: Device, bufferView: BufferView, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyBufferView"))
  DestroyCommandPool = cast[proc (device: Device, commandPool: CommandPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyCommandPool"))
  DestroyDebugReportCallbackEXT = cast[proc (instance: Instance, callback: DebugReportCallbackEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDebugReportCallbackEXT"))
  DestroyDebugUtilsMessengerEXT = cast[proc (instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDebugUtilsMessengerEXT"))
  DestroyDeferredOperationKHR = cast[proc (device: Device, operation: DeferredOperationKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDeferredOperationKHR"))
  DestroyDescriptorPool = cast[proc (device: Device, descriptorPool: DescriptorPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorPool"))
  DestroyDescriptorSetLayout = cast[proc (device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorSetLayout"))
  DestroyDescriptorUpdateTemplate = cast[proc (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorUpdateTemplate"))
  DestroyDevice = cast[proc (device: Device, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDevice"))
  DestroyEvent = cast[proc (device: Device, event: Event, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyEvent"))
  DestroyFence = cast[proc (device: Device, fence: Fence, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyFence"))
  DestroyFramebuffer = cast[proc (device: Device, framebuffer: Framebuffer, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyFramebuffer"))
  DestroyImage = cast[proc (device: Device, image: Image, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyImage"))
  DestroyImageView = cast[proc (device: Device, imageView: ImageView, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyImageView"))
  DestroyIndirectCommandsLayoutNV = cast[proc (device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyIndirectCommandsLayoutNV"))
  DestroyInstance = cast[proc (instance: Instance, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyInstance"))
  DestroyPipeline = cast[proc (device: Device, pipeline: Pipeline, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipeline"))
  DestroyPipelineCache = cast[proc (device: Device, pipelineCache: PipelineCache, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipelineCache"))
  DestroyPipelineLayout = cast[proc (device: Device, pipelineLayout: PipelineLayout, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipelineLayout"))
  DestroyPrivateDataSlotEXT = cast[proc (device: Device, privateDataSlot: PrivateDataSlotEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPrivateDataSlotEXT"))
  DestroyQueryPool = cast[proc (device: Device, queryPool: QueryPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyQueryPool"))
  DestroyRenderPass = cast[proc (device: Device, renderPass: RenderPass, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyRenderPass"))
  DestroySampler = cast[proc (device: Device, sampler: Sampler, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySampler"))
  DestroySamplerYcbcrConversion = cast[proc (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySamplerYcbcrConversion"))
  DestroySemaphore = cast[proc (device: Device, semaphore: Semaphore, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySemaphore"))
  DestroyShaderModule = cast[proc (device: Device, shaderModule: ShaderModule, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyShaderModule"))
  DestroySurfaceKHR = cast[proc (instance: Instance, surface: SurfaceKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySurfaceKHR"))
  DestroySwapchainKHR = cast[proc (device: Device, swapchain: SwapchainKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySwapchainKHR"))
  DestroyValidationCacheEXT = cast[proc (device: Device, validationCache: ValidationCacheEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyValidationCacheEXT"))
  DeviceWaitIdle = cast[proc (device: Device): Result {.stdcall.}](loadProc(inst, "vkDeviceWaitIdle"))
  DisplayPowerControlEXT = cast[proc (device: Device, display: DisplayKHR, pDisplayPowerInfo: ptr DisplayPowerInfoEXT): Result {.stdcall.}](loadProc(inst, "vkDisplayPowerControlEXT"))
  EndCommandBuffer = cast[proc (commandBuffer: CommandBuffer): Result {.stdcall.}](loadProc(inst, "vkEndCommandBuffer"))
  EnumerateDeviceExtensionProperties = cast[proc (physicalDevice: PhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr ExtensionProperties): Result {.stdcall.}](loadProc(inst, "vkEnumerateDeviceExtensionProperties"))
  EnumerateDeviceLayerProperties = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr LayerProperties): Result {.stdcall.}](loadProc(inst, "vkEnumerateDeviceLayerProperties"))
  EnumerateInstanceExtensionProperties = cast[proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr ExtensionProperties): Result {.stdcall.}](loadProc(inst, "vkEnumerateInstanceExtensionProperties"))
  EnumerateInstanceLayerProperties = cast[proc (pPropertyCount: ptr uint32, pProperties: ptr LayerProperties): Result {.stdcall.}](loadProc(inst, "vkEnumerateInstanceLayerProperties"))
  EnumerateInstanceVersion = cast[proc (pApiVersion: ptr uint32): Result {.stdcall.}](loadProc(inst, "vkEnumerateInstanceVersion"))
  EnumeratePhysicalDeviceGroups = cast[proc (instance: Instance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr PhysicalDeviceGroupProperties): Result {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDeviceGroups"))
  EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr PerformanceCounterKHR, pCounterDescriptions: ptr PerformanceCounterDescriptionKHR): Result {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"))
  EnumeratePhysicalDevices = cast[proc (instance: Instance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr PhysicalDevice): Result {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDevices"))
  FlushMappedMemoryRanges = cast[proc (device: Device, memoryRangeCount: uint32, pMemoryRanges: ptr MappedMemoryRange): Result {.stdcall.}](loadProc(inst, "vkFlushMappedMemoryRanges"))
  FreeCommandBuffers = cast[proc (device: Device, commandPool: CommandPool, commandBufferCount: uint32, pCommandBuffers: ptr CommandBuffer): void {.stdcall.}](loadProc(inst, "vkFreeCommandBuffers"))
  FreeDescriptorSets = cast[proc (device: Device, descriptorPool: DescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr DescriptorSet): Result {.stdcall.}](loadProc(inst, "vkFreeDescriptorSets"))
  FreeMemory = cast[proc (device: Device, memory: DeviceMemory, pAllocator: ptr AllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkFreeMemory"))
  GetAccelerationStructureDeviceAddressKHR = cast[proc (device: Device, pInfo: ptr AccelerationStructureDeviceAddressInfoKHR): DeviceAddress {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureDeviceAddressKHR"))
  GetAccelerationStructureHandleNV = cast[proc (device: Device, accelerationStructure: AccelerationStructureKHR, dataSize: uint, pData: pointer): Result {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureHandleNV"))
  GetAccelerationStructureMemoryRequirementsKHR = cast[proc (device: Device, pInfo: ptr AccelerationStructureMemoryRequirementsInfoKHR, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureMemoryRequirementsKHR"))
  GetAccelerationStructureMemoryRequirementsNV = cast[proc (device: Device, pInfo: ptr AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr MemoryRequirements2KHR): void {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureMemoryRequirementsNV"))
  GetAndroidHardwareBufferPropertiesANDROID = cast[proc (device: Device, buffer: ptr AHardwareBuffer, pProperties: ptr AndroidHardwareBufferPropertiesANDROID): Result {.stdcall.}](loadProc(inst, "vkGetAndroidHardwareBufferPropertiesANDROID"))
  GetBufferDeviceAddress = cast[proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): DeviceAddress {.stdcall.}](loadProc(inst, "vkGetBufferDeviceAddress"))
  GetBufferMemoryRequirements = cast[proc (device: Device, buffer: Buffer, pMemoryRequirements: ptr MemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetBufferMemoryRequirements"))
  GetBufferMemoryRequirements2 = cast[proc (device: Device, pInfo: ptr BufferMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetBufferMemoryRequirements2"))
  GetBufferOpaqueCaptureAddress = cast[proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): uint64 {.stdcall.}](loadProc(inst, "vkGetBufferOpaqueCaptureAddress"))
  GetCalibratedTimestampsEXT = cast[proc (device: Device, timestampCount: uint32, pTimestampInfos: ptr CalibratedTimestampInfoEXT, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): Result {.stdcall.}](loadProc(inst, "vkGetCalibratedTimestampsEXT"))
  GetDeferredOperationMaxConcurrencyKHR = cast[proc (device: Device, operation: DeferredOperationKHR): uint32 {.stdcall.}](loadProc(inst, "vkGetDeferredOperationMaxConcurrencyKHR"))
  GetDeferredOperationResultKHR = cast[proc (device: Device, operation: DeferredOperationKHR): Result {.stdcall.}](loadProc(inst, "vkGetDeferredOperationResultKHR"))
  GetDescriptorSetLayoutSupport = cast[proc (device: Device, pCreateInfo: ptr DescriptorSetLayoutCreateInfo, pSupport: ptr DescriptorSetLayoutSupport): void {.stdcall.}](loadProc(inst, "vkGetDescriptorSetLayoutSupport"))
  GetDeviceAccelerationStructureCompatibilityKHR = cast[proc (device: Device, version: ptr AccelerationStructureVersionKHR): Result {.stdcall.}](loadProc(inst, "vkGetDeviceAccelerationStructureCompatibilityKHR"))
  GetDeviceGroupPeerMemoryFeatures = cast[proc (device: Device, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr PeerMemoryFeatureFlags): void {.stdcall.}](loadProc(inst, "vkGetDeviceGroupPeerMemoryFeatures"))
  GetDeviceGroupPresentCapabilitiesKHR = cast[proc (device: Device, pDeviceGroupPresentCapabilities: ptr DeviceGroupPresentCapabilitiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetDeviceGroupPresentCapabilitiesKHR"))
  GetDeviceGroupSurfacePresentModes2EXT = cast[proc (device: Device, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pModes: ptr DeviceGroupPresentModeFlagsKHR): Result {.stdcall.}](loadProc(inst, "vkGetDeviceGroupSurfacePresentModes2EXT"))
  GetDeviceGroupSurfacePresentModesKHR = cast[proc (device: Device, surface: SurfaceKHR, pModes: ptr DeviceGroupPresentModeFlagsKHR): Result {.stdcall.}](loadProc(inst, "vkGetDeviceGroupSurfacePresentModesKHR"))
  GetDeviceMemoryCommitment = cast[proc (device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: ptr DeviceSize): void {.stdcall.}](loadProc(inst, "vkGetDeviceMemoryCommitment"))
  GetDeviceMemoryOpaqueCaptureAddress = cast[proc (device: Device, pInfo: ptr DeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}](loadProc(inst, "vkGetDeviceMemoryOpaqueCaptureAddress"))
  GetDeviceProcAddr = cast[proc (device: Device, pName: cstring): PFN_vkVoidFunction {.stdcall.}](loadProc(inst, "vkGetDeviceProcAddr"))
  GetDeviceQueue = cast[proc (device: Device, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr Queue): void {.stdcall.}](loadProc(inst, "vkGetDeviceQueue"))
  GetDeviceQueue2 = cast[proc (device: Device, pQueueInfo: ptr DeviceQueueInfo2, pQueue: ptr Queue): void {.stdcall.}](loadProc(inst, "vkGetDeviceQueue2"))
  GetDisplayModeProperties2KHR = cast[proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr DisplayModeProperties2KHR): Result {.stdcall.}](loadProc(inst, "vkGetDisplayModeProperties2KHR"))
  GetDisplayModePropertiesKHR = cast[proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr DisplayModePropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetDisplayModePropertiesKHR"))
  GetDisplayPlaneCapabilities2KHR = cast[proc (physicalDevice: PhysicalDevice, pDisplayPlaneInfo: ptr DisplayPlaneInfo2KHR, pCapabilities: ptr DisplayPlaneCapabilities2KHR): Result {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneCapabilities2KHR"))
  GetDisplayPlaneCapabilitiesKHR = cast[proc (physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: uint32, pCapabilities: ptr DisplayPlaneCapabilitiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneCapabilitiesKHR"))
  GetDisplayPlaneSupportedDisplaysKHR = cast[proc (physicalDevice: PhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr DisplayKHR): Result {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneSupportedDisplaysKHR"))
  GetEventStatus = cast[proc (device: Device, event: Event): Result {.stdcall.}](loadProc(inst, "vkGetEventStatus"))
  GetFenceFdKHR = cast[proc (device: Device, pGetFdInfo: ptr FenceGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}](loadProc(inst, "vkGetFenceFdKHR"))
  GetFenceStatus = cast[proc (device: Device, fence: Fence): Result {.stdcall.}](loadProc(inst, "vkGetFenceStatus"))
  GetFenceWin32HandleKHR = cast[proc (device: Device, pGetWin32HandleInfo: ptr FenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}](loadProc(inst, "vkGetFenceWin32HandleKHR"))
  GetGeneratedCommandsMemoryRequirementsNV = cast[proc (device: Device, pInfo: ptr GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetGeneratedCommandsMemoryRequirementsNV"))
  GetImageDrmFormatModifierPropertiesEXT = cast[proc (device: Device, image: Image, pProperties: ptr ImageDrmFormatModifierPropertiesEXT): Result {.stdcall.}](loadProc(inst, "vkGetImageDrmFormatModifierPropertiesEXT"))
  GetImageMemoryRequirements = cast[proc (device: Device, image: Image, pMemoryRequirements: ptr MemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetImageMemoryRequirements"))
  GetImageMemoryRequirements2 = cast[proc (device: Device, pInfo: ptr ImageMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetImageMemoryRequirements2"))
  GetImageSparseMemoryRequirements = cast[proc (device: Device, image: Image, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr SparseImageMemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetImageSparseMemoryRequirements"))
  GetImageSparseMemoryRequirements2 = cast[proc (device: Device, pInfo: ptr ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr SparseImageMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetImageSparseMemoryRequirements2"))
  GetImageSubresourceLayout = cast[proc (device: Device, image: Image, pSubresource: ptr ImageSubresource, pLayout: ptr SubresourceLayout): void {.stdcall.}](loadProc(inst, "vkGetImageSubresourceLayout"))
  GetImageViewAddressNVX = cast[proc (device: Device, imageView: ImageView, pProperties: ptr ImageViewAddressPropertiesNVX): Result {.stdcall.}](loadProc(inst, "vkGetImageViewAddressNVX"))
  GetImageViewHandleNVX = cast[proc (device: Device, pInfo: ptr ImageViewHandleInfoNVX): uint32 {.stdcall.}](loadProc(inst, "vkGetImageViewHandleNVX"))
  GetInstanceProcAddr = cast[proc (instance: Instance, pName: cstring): PFN_vkVoidFunction {.stdcall.}](loadProc(inst, "vkGetInstanceProcAddr"))
  GetMemoryAndroidHardwareBufferANDROID = cast[proc (device: Device, pInfo: ptr MemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): Result {.stdcall.}](loadProc(inst, "vkGetMemoryAndroidHardwareBufferANDROID"))
  GetMemoryFdKHR = cast[proc (device: Device, pGetFdInfo: ptr MemoryGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}](loadProc(inst, "vkGetMemoryFdKHR"))
  GetMemoryFdPropertiesKHR = cast[proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, fd: cint, pMemoryFdProperties: ptr MemoryFdPropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetMemoryFdPropertiesKHR"))
  GetMemoryHostPointerPropertiesEXT = cast[proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr MemoryHostPointerPropertiesEXT): Result {.stdcall.}](loadProc(inst, "vkGetMemoryHostPointerPropertiesEXT"))
  GetMemoryWin32HandleKHR = cast[proc (device: Device, pGetWin32HandleInfo: ptr MemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandleKHR"))
  GetMemoryWin32HandleNV = cast[proc (device: Device, memory: DeviceMemory, handleType: ExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): Result {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandleNV"))
  GetMemoryWin32HandlePropertiesKHR = cast[proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr MemoryWin32HandlePropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandlePropertiesKHR"))
  GetPastPresentationTimingGOOGLE = cast[proc (device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr PastPresentationTimingGOOGLE): Result {.stdcall.}](loadProc(inst, "vkGetPastPresentationTimingGOOGLE"))
  GetPerformanceParameterINTEL = cast[proc (device: Device, parameter: PerformanceParameterTypeINTEL, pValue: ptr PerformanceValueINTEL): Result {.stdcall.}](loadProc(inst, "vkGetPerformanceParameterINTEL"))
  GetPhysicalDeviceCalibrateableTimeDomainsEXT = cast[proc (physicalDevice: PhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr TimeDomainEXT): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"))
  GetPhysicalDeviceCooperativeMatrixPropertiesNV = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr CooperativeMatrixPropertiesNV): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"))
  GetPhysicalDeviceDirectFBPresentationSupportEXT = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): Bool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"))
  GetPhysicalDeviceDisplayPlaneProperties2KHR = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPlaneProperties2KHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"))
  GetPhysicalDeviceDisplayPlanePropertiesKHR = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPlanePropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
  GetPhysicalDeviceDisplayProperties2KHR = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayProperties2KHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayProperties2KHR"))
  GetPhysicalDeviceDisplayPropertiesKHR = cast[proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPropertiesKHR"))
  GetPhysicalDeviceExternalBufferProperties = cast[proc (physicalDevice: PhysicalDevice, pExternalBufferInfo: ptr PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr ExternalBufferProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalBufferProperties"))
  GetPhysicalDeviceExternalFenceProperties = cast[proc (physicalDevice: PhysicalDevice, pExternalFenceInfo: ptr PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr ExternalFenceProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalFenceProperties"))
  GetPhysicalDeviceExternalImageFormatPropertiesNV = cast[proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr ExternalImageFormatPropertiesNV): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"))
  GetPhysicalDeviceExternalSemaphoreProperties = cast[proc (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ptr PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr ExternalSemaphoreProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalSemaphoreProperties"))
  GetPhysicalDeviceFeatures = cast[proc (physicalDevice: PhysicalDevice, pFeatures: ptr PhysicalDeviceFeatures): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFeatures"))
  GetPhysicalDeviceFeatures2 = cast[proc (physicalDevice: PhysicalDevice, pFeatures: ptr PhysicalDeviceFeatures2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFeatures2"))
  GetPhysicalDeviceFormatProperties = cast[proc (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ptr FormatProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFormatProperties"))
  GetPhysicalDeviceFormatProperties2 = cast[proc (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ptr FormatProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFormatProperties2"))
  GetPhysicalDeviceImageFormatProperties = cast[proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: ptr ImageFormatProperties): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceImageFormatProperties"))
  GetPhysicalDeviceImageFormatProperties2 = cast[proc (physicalDevice: PhysicalDevice, pImageFormatInfo: ptr PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr ImageFormatProperties2): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceImageFormatProperties2"))
  GetPhysicalDeviceMemoryProperties = cast[proc (physicalDevice: PhysicalDevice, pMemoryProperties: ptr PhysicalDeviceMemoryProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMemoryProperties"))
  GetPhysicalDeviceMemoryProperties2 = cast[proc (physicalDevice: PhysicalDevice, pMemoryProperties: ptr PhysicalDeviceMemoryProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMemoryProperties2"))
  GetPhysicalDeviceMultisamplePropertiesEXT = cast[proc (physicalDevice: PhysicalDevice, samples: SampleCountFlagBits, pMultisampleProperties: ptr MultisamplePropertiesEXT): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMultisamplePropertiesEXT"))
  GetPhysicalDevicePresentRectanglesKHR = cast[proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: ptr uint32, pRects: ptr Rect2D): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDevicePresentRectanglesKHR"))
  GetPhysicalDeviceProperties = cast[proc (physicalDevice: PhysicalDevice, pProperties: ptr PhysicalDeviceProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceProperties"))
  GetPhysicalDeviceProperties2 = cast[proc (physicalDevice: PhysicalDevice, pProperties: ptr PhysicalDeviceProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceProperties2"))
  GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = cast[proc (physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: ptr QueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"))
  GetPhysicalDeviceQueueFamilyProperties = cast[proc (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr QueueFamilyProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyProperties"))
  GetPhysicalDeviceQueueFamilyProperties2 = cast[proc (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr QueueFamilyProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2"))
  GetPhysicalDeviceSparseImageFormatProperties = cast[proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, samples: SampleCountFlagBits, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: ptr uint32, pProperties: ptr SparseImageFormatProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties"))
  GetPhysicalDeviceSparseImageFormatProperties2 = cast[proc (physicalDevice: PhysicalDevice, pFormatInfo: ptr PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr SparseImageFormatProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2"))
  GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = cast[proc (physicalDevice: PhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr FramebufferMixedSamplesCombinationNV): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"))
  GetPhysicalDeviceSurfaceCapabilities2EXT = cast[proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ptr SurfaceCapabilities2EXT): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"))
  GetPhysicalDeviceSurfaceCapabilities2KHR = cast[proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr SurfaceCapabilities2KHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"))
  GetPhysicalDeviceSurfaceCapabilitiesKHR = cast[proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ptr SurfaceCapabilitiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
  GetPhysicalDeviceSurfaceFormats2KHR = cast[proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr SurfaceFormat2KHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceFormats2KHR"))
  GetPhysicalDeviceSurfaceFormatsKHR = cast[proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr SurfaceFormatKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceFormatsKHR"))
  GetPhysicalDeviceSurfacePresentModes2EXT = cast[proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr PresentModeKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfacePresentModes2EXT"))
  GetPhysicalDeviceSurfacePresentModesKHR = cast[proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr PresentModeKHR): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfacePresentModesKHR"))
  GetPhysicalDeviceSurfaceSupportKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, surface: SurfaceKHR, pSupported: ptr Bool32): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceSupportKHR"))
  GetPhysicalDeviceToolPropertiesEXT = cast[proc (physicalDevice: PhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr PhysicalDeviceToolPropertiesEXT): Result {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceToolPropertiesEXT"))
  GetPhysicalDeviceWaylandPresentationSupportKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): Bool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"))
  GetPhysicalDeviceWin32PresentationSupportKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32): Bool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceWin32PresentationSupportKHR"))
  GetPhysicalDeviceXcbPresentationSupportKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): Bool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceXcbPresentationSupportKHR"))
  GetPhysicalDeviceXlibPresentationSupportKHR = cast[proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): Bool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceXlibPresentationSupportKHR"))
  GetPipelineCacheData = cast[proc (device: Device, pipelineCache: PipelineCache, pDataSize: ptr uint, pData: pointer): Result {.stdcall.}](loadProc(inst, "vkGetPipelineCacheData"))
  GetPipelineExecutableInternalRepresentationsKHR = cast[proc (device: Device, pExecutableInfo: ptr PipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr PipelineExecutableInternalRepresentationKHR): Result {.stdcall.}](loadProc(inst, "vkGetPipelineExecutableInternalRepresentationsKHR"))
  GetPipelineExecutablePropertiesKHR = cast[proc (device: Device, pPipelineInfo: ptr PipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr PipelineExecutablePropertiesKHR): Result {.stdcall.}](loadProc(inst, "vkGetPipelineExecutablePropertiesKHR"))
  GetPipelineExecutableStatisticsKHR = cast[proc (device: Device, pExecutableInfo: ptr PipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr PipelineExecutableStatisticKHR): Result {.stdcall.}](loadProc(inst, "vkGetPipelineExecutableStatisticsKHR"))
  GetPrivateDataEXT = cast[proc (device: Device, objectType: ObjectType, objectHandle: uint64, privateDataSlot: PrivateDataSlotEXT, pData: ptr uint64): void {.stdcall.}](loadProc(inst, "vkGetPrivateDataEXT"))
  GetQueryPoolResults = cast[proc (device: Device, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: DeviceSize, flags: QueryResultFlags): Result {.stdcall.}](loadProc(inst, "vkGetQueryPoolResults"))
  GetQueueCheckpointDataNV = cast[proc (queue: Queue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr CheckpointDataNV): void {.stdcall.}](loadProc(inst, "vkGetQueueCheckpointDataNV"))
  GetRandROutputDisplayEXT = cast[proc (physicalDevice: PhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr DisplayKHR): Result {.stdcall.}](loadProc(inst, "vkGetRandROutputDisplayEXT"))
  GetRayTracingCaptureReplayShaderGroupHandlesKHR = cast[proc (device: Device, pipeline: Pipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): Result {.stdcall.}](loadProc(inst, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"))
  GetRayTracingShaderGroupHandlesKHR = cast[proc (device: Device, pipeline: Pipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): Result {.stdcall.}](loadProc(inst, "vkGetRayTracingShaderGroupHandlesKHR"))
  GetRefreshCycleDurationGOOGLE = cast[proc (device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: ptr RefreshCycleDurationGOOGLE): Result {.stdcall.}](loadProc(inst, "vkGetRefreshCycleDurationGOOGLE"))
  GetRenderAreaGranularity = cast[proc (device: Device, renderPass: RenderPass, pGranularity: ptr Extent2D): void {.stdcall.}](loadProc(inst, "vkGetRenderAreaGranularity"))
  GetSemaphoreCounterValue = cast[proc (device: Device, semaphore: Semaphore, pValue: ptr uint64): Result {.stdcall.}](loadProc(inst, "vkGetSemaphoreCounterValue"))
  GetSemaphoreFdKHR = cast[proc (device: Device, pGetFdInfo: ptr SemaphoreGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}](loadProc(inst, "vkGetSemaphoreFdKHR"))
  GetSemaphoreWin32HandleKHR = cast[proc (device: Device, pGetWin32HandleInfo: ptr SemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}](loadProc(inst, "vkGetSemaphoreWin32HandleKHR"))
  GetShaderInfoAMD = cast[proc (device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlagBits, infoType: ShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): Result {.stdcall.}](loadProc(inst, "vkGetShaderInfoAMD"))
  GetSwapchainCounterEXT = cast[proc (device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): Result {.stdcall.}](loadProc(inst, "vkGetSwapchainCounterEXT"))
  GetSwapchainImagesKHR = cast[proc (device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr Image): Result {.stdcall.}](loadProc(inst, "vkGetSwapchainImagesKHR"))
  GetSwapchainStatusKHR = cast[proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}](loadProc(inst, "vkGetSwapchainStatusKHR"))
  GetValidationCacheDataEXT = cast[proc (device: Device, validationCache: ValidationCacheEXT, pDataSize: ptr uint, pData: pointer): Result {.stdcall.}](loadProc(inst, "vkGetValidationCacheDataEXT"))
  ImportFenceFdKHR = cast[proc (device: Device, pImportFenceFdInfo: ptr ImportFenceFdInfoKHR): Result {.stdcall.}](loadProc(inst, "vkImportFenceFdKHR"))
  ImportFenceWin32HandleKHR = cast[proc (device: Device, pImportFenceWin32HandleInfo: ptr ImportFenceWin32HandleInfoKHR): Result {.stdcall.}](loadProc(inst, "vkImportFenceWin32HandleKHR"))
  ImportSemaphoreFdKHR = cast[proc (device: Device, pImportSemaphoreFdInfo: ptr ImportSemaphoreFdInfoKHR): Result {.stdcall.}](loadProc(inst, "vkImportSemaphoreFdKHR"))
  ImportSemaphoreWin32HandleKHR = cast[proc (device: Device, pImportSemaphoreWin32HandleInfo: ptr ImportSemaphoreWin32HandleInfoKHR): Result {.stdcall.}](loadProc(inst, "vkImportSemaphoreWin32HandleKHR"))
  InitializePerformanceApiINTEL = cast[proc (device: Device, pInitializeInfo: ptr InitializePerformanceApiInfoINTEL): Result {.stdcall.}](loadProc(inst, "vkInitializePerformanceApiINTEL"))
  InvalidateMappedMemoryRanges = cast[proc (device: Device, memoryRangeCount: uint32, pMemoryRanges: ptr MappedMemoryRange): Result {.stdcall.}](loadProc(inst, "vkInvalidateMappedMemoryRanges"))
  MapMemory = cast[proc (device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: pointer): Result {.stdcall.}](loadProc(inst, "vkMapMemory"))
  MergePipelineCaches = cast[proc (device: Device, dstCache: PipelineCache, srcCacheCount: uint32, pSrcCaches: ptr PipelineCache): Result {.stdcall.}](loadProc(inst, "vkMergePipelineCaches"))
  MergeValidationCachesEXT = cast[proc (device: Device, dstCache: ValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr ValidationCacheEXT): Result {.stdcall.}](loadProc(inst, "vkMergeValidationCachesEXT"))
  QueueBeginDebugUtilsLabelEXT = cast[proc (queue: Queue, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkQueueBeginDebugUtilsLabelEXT"))
  QueueBindSparse = cast[proc (queue: Queue, bindInfoCount: uint32, pBindInfo: ptr BindSparseInfo, fence: Fence): Result {.stdcall.}](loadProc(inst, "vkQueueBindSparse"))
  QueueEndDebugUtilsLabelEXT = cast[proc (queue: Queue): void {.stdcall.}](loadProc(inst, "vkQueueEndDebugUtilsLabelEXT"))
  QueueInsertDebugUtilsLabelEXT = cast[proc (queue: Queue, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkQueueInsertDebugUtilsLabelEXT"))
  QueuePresentKHR = cast[proc (queue: Queue, pPresentInfo: ptr PresentInfoKHR): Result {.stdcall.}](loadProc(inst, "vkQueuePresentKHR"))
  QueueSetPerformanceConfigurationINTEL = cast[proc (queue: Queue, configuration: PerformanceConfigurationINTEL): Result {.stdcall.}](loadProc(inst, "vkQueueSetPerformanceConfigurationINTEL"))
  QueueSubmit = cast[proc (queue: Queue, submitCount: uint32, pSubmits: ptr SubmitInfo, fence: Fence): Result {.stdcall.}](loadProc(inst, "vkQueueSubmit"))
  QueueWaitIdle = cast[proc (queue: Queue): Result {.stdcall.}](loadProc(inst, "vkQueueWaitIdle"))
  RegisterDeviceEventEXT = cast[proc (device: Device, pDeviceEventInfo: ptr DeviceEventInfoEXT, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}](loadProc(inst, "vkRegisterDeviceEventEXT"))
  RegisterDisplayEventEXT = cast[proc (device: Device, display: DisplayKHR, pDisplayEventInfo: ptr DisplayEventInfoEXT, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}](loadProc(inst, "vkRegisterDisplayEventEXT"))
  ReleaseDisplayEXT = cast[proc (physicalDevice: PhysicalDevice, display: DisplayKHR): Result {.stdcall.}](loadProc(inst, "vkReleaseDisplayEXT"))
  ReleaseFullScreenExclusiveModeEXT = cast[proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}](loadProc(inst, "vkReleaseFullScreenExclusiveModeEXT"))
  ReleasePerformanceConfigurationINTEL = cast[proc (device: Device, configuration: PerformanceConfigurationINTEL): Result {.stdcall.}](loadProc(inst, "vkReleasePerformanceConfigurationINTEL"))
  ReleaseProfilingLockKHR = cast[proc (device: Device): void {.stdcall.}](loadProc(inst, "vkReleaseProfilingLockKHR"))
  ResetCommandBuffer = cast[proc (commandBuffer: CommandBuffer, flags: CommandBufferResetFlags): Result {.stdcall.}](loadProc(inst, "vkResetCommandBuffer"))
  ResetCommandPool = cast[proc (device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags): Result {.stdcall.}](loadProc(inst, "vkResetCommandPool"))
  ResetDescriptorPool = cast[proc (device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags): Result {.stdcall.}](loadProc(inst, "vkResetDescriptorPool"))
  ResetEvent = cast[proc (device: Device, event: Event): Result {.stdcall.}](loadProc(inst, "vkResetEvent"))
  ResetFences = cast[proc (device: Device, fenceCount: uint32, pFences: ptr Fence): Result {.stdcall.}](loadProc(inst, "vkResetFences"))
  ResetQueryPool = cast[proc (device: Device, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](loadProc(inst, "vkResetQueryPool"))
  SetDebugUtilsObjectNameEXT = cast[proc (device: Device, pNameInfo: ptr DebugUtilsObjectNameInfoEXT): Result {.stdcall.}](loadProc(inst, "vkSetDebugUtilsObjectNameEXT"))
  SetDebugUtilsObjectTagEXT = cast[proc (device: Device, pTagInfo: ptr DebugUtilsObjectTagInfoEXT): Result {.stdcall.}](loadProc(inst, "vkSetDebugUtilsObjectTagEXT"))
  SetEvent = cast[proc (device: Device, event: Event): Result {.stdcall.}](loadProc(inst, "vkSetEvent"))
  SetHdrMetadataEXT = cast[proc (device: Device, swapchainCount: uint32, pSwapchains: ptr SwapchainKHR, pMetadata: ptr HdrMetadataEXT): void {.stdcall.}](loadProc(inst, "vkSetHdrMetadataEXT"))
  SetLocalDimmingAMD = cast[proc (device: Device, swapChain: SwapchainKHR, localDimmingEnable: Bool32): void {.stdcall.}](loadProc(inst, "vkSetLocalDimmingAMD"))
  SetPrivateDataEXT = cast[proc (device: Device, objectType: ObjectType, objectHandle: uint64, privateDataSlot: PrivateDataSlotEXT, data: uint64): Result {.stdcall.}](loadProc(inst, "vkSetPrivateDataEXT"))
  SignalSemaphore = cast[proc (device: Device, pSignalInfo: ptr SemaphoreSignalInfo): Result {.stdcall.}](loadProc(inst, "vkSignalSemaphore"))
  SubmitDebugUtilsMessageEXT = cast[proc (instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr DebugUtilsMessengerCallbackDataEXT): void {.stdcall.}](loadProc(inst, "vkSubmitDebugUtilsMessageEXT"))
  TrimCommandPool = cast[proc (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags): void {.stdcall.}](loadProc(inst, "vkTrimCommandPool"))
  UninitializePerformanceApiINTEL = cast[proc (device: Device): void {.stdcall.}](loadProc(inst, "vkUninitializePerformanceApiINTEL"))
  UnmapMemory = cast[proc (device: Device, memory: DeviceMemory): void {.stdcall.}](loadProc(inst, "vkUnmapMemory"))
  UpdateDescriptorSetWithTemplate = cast[proc (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: pointer): void {.stdcall.}](loadProc(inst, "vkUpdateDescriptorSetWithTemplate"))
  UpdateDescriptorSets = cast[proc (device: Device, descriptorWriteCount: uint32, pDescriptorWrites: ptr WriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr CopyDescriptorSet): void {.stdcall.}](loadProc(inst, "vkUpdateDescriptorSets"))
  WaitForFences = cast[proc (device: Device, fenceCount: uint32, pFences: ptr Fence, waitAll: Bool32, timeout: uint64): Result {.stdcall.}](loadProc(inst, "vkWaitForFences"))
  WaitSemaphores = cast[proc (device: Device, pWaitInfo: ptr SemaphoreWaitInfo, timeout: uint64): Result {.stdcall.}](loadProc(inst, "vkWaitSemaphores"))
  WriteAccelerationStructuresPropertiesKHR = cast[proc (device: Device, accelerationStructureCount: uint32, pAccelerationStructures: ptr AccelerationStructureKHR, queryType: QueryType, dataSize: uint, pData: pointer, stride: uint): Result {.stdcall.}](loadProc(inst, "vkWriteAccelerationStructuresPropertiesKHR"))

# Enumerations
const
  AMD_BUFFER_MARKER_EXTENSION_NAME* = "VK_AMD_buffer_marker".cstring
  AMD_BUFFER_MARKER_SPEC_VERSION* = 1.cuint
  AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME* = "VK_AMD_device_coherent_memory".cstring
  AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION* = 1.cuint
  AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME* = "VK_AMD_display_native_hdr".cstring
  AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION* = 1.cuint
  AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME* = "VK_AMD_draw_indirect_count".cstring
  AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION* = 2.cuint
  AMD_GCN_SHADER_EXTENSION_NAME* = "VK_AMD_gcn_shader".cstring
  AMD_GCN_SHADER_SPEC_VERSION* = 1.cuint
  AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME* = "VK_AMD_gpu_shader_half_float".cstring
  AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION* = 2.cuint
  AMD_GPU_SHADER_INT16_EXTENSION_NAME* = "VK_AMD_gpu_shader_int16".cstring
  AMD_GPU_SHADER_INT16_SPEC_VERSION* = 2.cuint
  AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME* = "VK_AMD_memory_overallocation_behavior".cstring
  AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION* = 1.cuint
  AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME* = "VK_AMD_mixed_attachment_samples".cstring
  AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION* = 1.cuint
  AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME* = "VK_AMD_negative_viewport_height".cstring
  AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION* = 1.cuint
  AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME* = "VK_AMD_pipeline_compiler_control".cstring
  AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION* = 1.cuint
  AMD_RASTERIZATION_ORDER_EXTENSION_NAME* = "VK_AMD_rasterization_order".cstring
  AMD_RASTERIZATION_ORDER_SPEC_VERSION* = 1.cuint
  AMD_SHADER_BALLOT_EXTENSION_NAME* = "VK_AMD_shader_ballot".cstring
  AMD_SHADER_BALLOT_SPEC_VERSION* = 1.cuint
  AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME* = "VK_AMD_shader_core_properties2".cstring
  AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION* = 1.cuint
  AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME* = "VK_AMD_shader_core_properties".cstring
  AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION* = 2.cuint
  AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME* = "VK_AMD_shader_explicit_vertex_parameter".cstring
  AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION* = 1.cuint
  AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME* = "VK_AMD_shader_fragment_mask".cstring
  AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION* = 1.cuint
  AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME* = "VK_AMD_shader_image_load_store_lod".cstring
  AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION* = 1.cuint
  AMD_SHADER_INFO_EXTENSION_NAME* = "VK_AMD_shader_info".cstring
  AMD_SHADER_INFO_SPEC_VERSION* = 1.cuint
  AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME* = "VK_AMD_shader_trinary_minmax".cstring
  AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION* = 1.cuint
  AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME* = "VK_AMD_texture_gather_bias_lod".cstring
  AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION* = 1.cuint
  ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME* = "VK_ANDROID_external_memory_android_hardware_buffer".cstring
  ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION* = 3.cuint
  ATTACHMENT_UNUSED* = not 0U32.cuint
  EXT_4444_FORMATS_EXTENSION_NAME* = "VK_EXT_4444_formats".cstring
  EXT_4444_FORMATS_SPEC_VERSION* = 1.cuint
  EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME* = "VK_EXT_acquire_xlib_display".cstring
  EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION* = 1.cuint
  EXT_ASTC_DECODE_MODE_EXTENSION_NAME* = "VK_EXT_astc_decode_mode".cstring
  EXT_ASTC_DECODE_MODE_SPEC_VERSION* = 1.cuint
  EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME* = "VK_EXT_blend_operation_advanced".cstring
  EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION* = 2.cuint
  EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME* = "VK_EXT_buffer_device_address".cstring
  EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION* = 2.cuint
  EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME* = "VK_EXT_calibrated_timestamps".cstring
  EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION* = 1.cuint
  EXT_CONDITIONAL_RENDERING_EXTENSION_NAME* = "VK_EXT_conditional_rendering".cstring
  EXT_CONDITIONAL_RENDERING_SPEC_VERSION* = 2.cuint
  EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME* = "VK_EXT_conservative_rasterization".cstring
  EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION* = 1.cuint
  EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME* = "VK_EXT_custom_border_color".cstring
  EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION* = 12.cuint
  EXT_DEBUG_MARKER_EXTENSION_NAME* = "VK_EXT_debug_marker".cstring
  EXT_DEBUG_MARKER_SPEC_VERSION* = 4.cuint
  EXT_DEBUG_REPORT_EXTENSION_NAME* = "VK_EXT_debug_report".cstring
  EXT_DEBUG_REPORT_SPEC_VERSION* = 9.cuint
  EXT_DEBUG_UTILS_EXTENSION_NAME* = "VK_EXT_debug_utils".cstring
  EXT_DEBUG_UTILS_SPEC_VERSION* = 2.cuint
  EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME* = "VK_EXT_depth_clip_enable".cstring
  EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION* = 1.cuint
  EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME* = "VK_EXT_depth_range_unrestricted".cstring
  EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION* = 1.cuint
  EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME* = "VK_EXT_descriptor_indexing".cstring
  EXT_DESCRIPTOR_INDEXING_SPEC_VERSION* = 2.cuint
  EXT_DIRECTFB_SURFACE_EXTENSION_NAME* = "VK_EXT_directfb_surface".cstring
  EXT_DIRECTFB_SURFACE_SPEC_VERSION* = 1.cuint
  EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME* = "VK_EXT_direct_mode_display".cstring
  EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION* = 1.cuint
  EXT_DISCARD_RECTANGLES_EXTENSION_NAME* = "VK_EXT_discard_rectangles".cstring
  EXT_DISCARD_RECTANGLES_SPEC_VERSION* = 1.cuint
  EXT_DISPLAY_CONTROL_EXTENSION_NAME* = "VK_EXT_display_control".cstring
  EXT_DISPLAY_CONTROL_SPEC_VERSION* = 1.cuint
  EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME* = "VK_EXT_display_surface_counter".cstring
  EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION* = 1.cuint
  EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME* = "VK_EXT_extended_dynamic_state".cstring
  EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION* = 1.cuint
  EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME* = "VK_EXT_external_memory_dma_buf".cstring
  EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION* = 1.cuint
  EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME* = "VK_EXT_external_memory_host".cstring
  EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION* = 1.cuint
  EXT_FILTER_CUBIC_EXTENSION_NAME* = "VK_EXT_filter_cubic".cstring
  EXT_FILTER_CUBIC_SPEC_VERSION* = 3.cuint
  EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME* = "VK_EXT_fragment_density_map2".cstring
  EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION* = 1.cuint
  EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME* = "VK_EXT_fragment_density_map".cstring
  EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION* = 1.cuint
  EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME* = "VK_EXT_fragment_shader_interlock".cstring
  EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION* = 1.cuint
  EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME* = "VK_EXT_full_screen_exclusive".cstring
  EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION* = 4.cuint
  EXT_GLOBAL_PRIORITY_EXTENSION_NAME* = "VK_EXT_global_priority".cstring
  EXT_GLOBAL_PRIORITY_SPEC_VERSION* = 2.cuint
  EXT_HDR_METADATA_EXTENSION_NAME* = "VK_EXT_hdr_metadata".cstring
  EXT_HDR_METADATA_SPEC_VERSION* = 2.cuint
  EXT_HEADLESS_SURFACE_EXTENSION_NAME* = "VK_EXT_headless_surface".cstring
  EXT_HEADLESS_SURFACE_SPEC_VERSION* = 1.cuint
  EXT_HOST_QUERY_RESET_EXTENSION_NAME* = "VK_EXT_host_query_reset".cstring
  EXT_HOST_QUERY_RESET_SPEC_VERSION* = 1.cuint
  EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME* = "VK_EXT_image_drm_format_modifier".cstring
  EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION* = 1.cuint
  EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME* = "VK_EXT_image_robustness".cstring
  EXT_IMAGE_ROBUSTNESS_SPEC_VERSION* = 1.cuint
  EXT_INDEX_TYPE_UINT8_EXTENSION_NAME* = "VK_EXT_index_type_uint8".cstring
  EXT_INDEX_TYPE_UINT8_SPEC_VERSION* = 1.cuint
  EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME* = "VK_EXT_inline_uniform_block".cstring
  EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION* = 1.cuint
  EXT_LINE_RASTERIZATION_EXTENSION_NAME* = "VK_EXT_line_rasterization".cstring
  EXT_LINE_RASTERIZATION_SPEC_VERSION* = 1.cuint
  EXT_MEMORY_BUDGET_EXTENSION_NAME* = "VK_EXT_memory_budget".cstring
  EXT_MEMORY_BUDGET_SPEC_VERSION* = 1.cuint
  EXT_MEMORY_PRIORITY_EXTENSION_NAME* = "VK_EXT_memory_priority".cstring
  EXT_MEMORY_PRIORITY_SPEC_VERSION* = 1.cuint
  EXT_METAL_SURFACE_EXTENSION_NAME* = "VK_EXT_metal_surface".cstring
  EXT_METAL_SURFACE_SPEC_VERSION* = 1.cuint
  EXT_PCI_BUS_INFO_EXTENSION_NAME* = "VK_EXT_pci_bus_info".cstring
  EXT_PCI_BUS_INFO_SPEC_VERSION* = 2.cuint
  EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME* = "VK_EXT_pipeline_creation_cache_control".cstring
  EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION* = 3.cuint
  EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME* = "VK_EXT_pipeline_creation_feedback".cstring
  EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION* = 1.cuint
  EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME* = "VK_EXT_post_depth_coverage".cstring
  EXT_POST_DEPTH_COVERAGE_SPEC_VERSION* = 1.cuint
  EXT_PRIVATE_DATA_EXTENSION_NAME* = "VK_EXT_private_data".cstring
  EXT_PRIVATE_DATA_SPEC_VERSION* = 1.cuint
  EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME* = "VK_EXT_queue_family_foreign".cstring
  EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION* = 1.cuint
  EXT_ROBUSTNESS_2_EXTENSION_NAME* = "VK_EXT_robustness2".cstring
  EXT_ROBUSTNESS_2_SPEC_VERSION* = 1.cuint
  EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME* = "VK_EXT_sampler_filter_minmax".cstring
  EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION* = 2.cuint
  EXT_SAMPLE_LOCATIONS_EXTENSION_NAME* = "VK_EXT_sample_locations".cstring
  EXT_SAMPLE_LOCATIONS_SPEC_VERSION* = 1.cuint
  EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME* = "VK_EXT_scalar_block_layout".cstring
  EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION* = 1.cuint
  EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME* = "VK_EXT_separate_stencil_usage".cstring
  EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION* = 1.cuint
  EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME* = "VK_EXT_shader_atomic_float".cstring
  EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION* = 1.cuint
  EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME* = "VK_EXT_shader_demote_to_helper_invocation".cstring
  EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION* = 1.cuint
  EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME* = "VK_EXT_shader_stencil_export".cstring
  EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION* = 1.cuint
  EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME* = "VK_EXT_shader_subgroup_ballot".cstring
  EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION* = 1.cuint
  EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME* = "VK_EXT_shader_subgroup_vote".cstring
  EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION* = 1.cuint
  EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME* = "VK_EXT_shader_viewport_index_layer".cstring
  EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION* = 1.cuint
  EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME* = "VK_EXT_subgroup_size_control".cstring
  EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION* = 2.cuint
  EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME* = "VK_EXT_swapchain_colorspace".cstring
  EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION* = 4.cuint
  EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME* = "VK_EXT_texel_buffer_alignment".cstring
  EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION* = 1.cuint
  EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME* = "VK_EXT_texture_compression_astc_hdr".cstring
  EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION* = 1.cuint
  EXT_TOOLING_INFO_EXTENSION_NAME* = "VK_EXT_tooling_info".cstring
  EXT_TOOLING_INFO_SPEC_VERSION* = 1.cuint
  EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME* = "VK_EXT_transform_feedback".cstring
  EXT_TRANSFORM_FEEDBACK_SPEC_VERSION* = 1.cuint
  EXT_VALIDATION_CACHE_EXTENSION_NAME* = "VK_EXT_validation_cache".cstring
  EXT_VALIDATION_CACHE_SPEC_VERSION* = 1.cuint
  EXT_VALIDATION_FEATURES_EXTENSION_NAME* = "VK_EXT_validation_features".cstring
  EXT_VALIDATION_FEATURES_SPEC_VERSION* = 4.cuint
  EXT_VALIDATION_FLAGS_EXTENSION_NAME* = "VK_EXT_validation_flags".cstring
  EXT_VALIDATION_FLAGS_SPEC_VERSION* = 2.cuint
  EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME* = "VK_EXT_vertex_attribute_divisor".cstring
  EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION* = 3.cuint
  EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME* = "VK_EXT_ycbcr_image_arrays".cstring
  EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION* = 1.cuint
  FALSE* = 0.Bool32
  FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME* = "VK_FUCHSIA_imagepipe_surface".cstring
  FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION* = 1.cuint
  GGP_FRAME_TOKEN_EXTENSION_NAME* = "VK_GGP_frame_token".cstring
  GGP_FRAME_TOKEN_SPEC_VERSION* = 1.cuint
  GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME* = "VK_GGP_stream_descriptor_surface".cstring
  GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION* = 1.cuint
  GOOGLE_DECORATE_STRING_EXTENSION_NAME* = "VK_GOOGLE_decorate_string".cstring
  GOOGLE_DECORATE_STRING_SPEC_VERSION* = 1.cuint
  GOOGLE_DISPLAY_TIMING_EXTENSION_NAME* = "VK_GOOGLE_display_timing".cstring
  GOOGLE_DISPLAY_TIMING_SPEC_VERSION* = 1.cuint
  GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME* = "VK_GOOGLE_hlsl_functionality1".cstring
  GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION* = 1.cuint
  GOOGLE_USER_TYPE_EXTENSION_NAME* = "VK_GOOGLE_user_type".cstring
  GOOGLE_USER_TYPE_SPEC_VERSION* = 1.cuint
  IMG_FILTER_CUBIC_EXTENSION_NAME* = "VK_IMG_filter_cubic".cstring
  IMG_FILTER_CUBIC_SPEC_VERSION* = 1.cuint
  IMG_FORMAT_PVRTC_EXTENSION_NAME* = "VK_IMG_format_pvrtc".cstring
  IMG_FORMAT_PVRTC_SPEC_VERSION* = 1.cuint
  INTEL_PERFORMANCE_QUERY_EXTENSION_NAME* = "VK_INTEL_performance_query".cstring
  INTEL_PERFORMANCE_QUERY_SPEC_VERSION* = 2.cuint
  INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME* = "VK_INTEL_shader_integer_functions2".cstring
  INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION* = 1.cuint
  KHR_16BIT_STORAGE_EXTENSION_NAME* = "VK_KHR_16bit_storage".cstring
  KHR_16BIT_STORAGE_SPEC_VERSION* = 1.cuint
  KHR_8BIT_STORAGE_EXTENSION_NAME* = "VK_KHR_8bit_storage".cstring
  KHR_8BIT_STORAGE_SPEC_VERSION* = 1.cuint
  KHR_ANDROID_SURFACE_EXTENSION_NAME* = "VK_KHR_android_surface".cstring
  KHR_ANDROID_SURFACE_SPEC_VERSION* = 6.cuint
  KHR_BIND_MEMORY_2_EXTENSION_NAME* = "VK_KHR_bind_memory2".cstring
  KHR_BIND_MEMORY_2_SPEC_VERSION* = 1.cuint
  KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME* = "VK_KHR_buffer_device_address".cstring
  KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION* = 1.cuint
  KHR_COPY_COMMANDS_2_EXTENSION_NAME* = "VK_KHR_copy_commands2".cstring
  KHR_COPY_COMMANDS_2_SPEC_VERSION* = 1.cuint
  KHR_CREATE_RENDERPASS_2_EXTENSION_NAME* = "VK_KHR_create_renderpass2".cstring
  KHR_CREATE_RENDERPASS_2_SPEC_VERSION* = 1.cuint
  KHR_DEDICATED_ALLOCATION_EXTENSION_NAME* = "VK_KHR_dedicated_allocation".cstring
  KHR_DEDICATED_ALLOCATION_SPEC_VERSION* = 3.cuint
  KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME* = "VK_KHR_deferred_host_operations".cstring
  KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION* = 3.cuint
  KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME* = "VK_KHR_depth_stencil_resolve".cstring
  KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION* = 1.cuint
  KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME* = "VK_KHR_descriptor_update_template".cstring
  KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION* = 1.cuint
  KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME* = "VK_KHR_device_group_creation".cstring
  KHR_DEVICE_GROUP_CREATION_SPEC_VERSION* = 1.cuint
  KHR_DEVICE_GROUP_EXTENSION_NAME* = "VK_KHR_device_group".cstring
  KHR_DEVICE_GROUP_SPEC_VERSION* = 4.cuint
  KHR_DISPLAY_EXTENSION_NAME* = "VK_KHR_display".cstring
  KHR_DISPLAY_SPEC_VERSION* = 23.cuint
  KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME* = "VK_KHR_display_swapchain".cstring
  KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION* = 10.cuint
  KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME* = "VK_KHR_draw_indirect_count".cstring
  KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION* = 1.cuint
  KHR_DRIVER_PROPERTIES_EXTENSION_NAME* = "VK_KHR_driver_properties".cstring
  KHR_DRIVER_PROPERTIES_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_fence_capabilities".cstring
  KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_FENCE_EXTENSION_NAME* = "VK_KHR_external_fence".cstring
  KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME* = "VK_KHR_external_fence_fd".cstring
  KHR_EXTERNAL_FENCE_FD_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_FENCE_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME* = "VK_KHR_external_fence_win32".cstring
  KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_memory_capabilities".cstring
  KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_MEMORY_EXTENSION_NAME* = "VK_KHR_external_memory".cstring
  KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME* = "VK_KHR_external_memory_fd".cstring
  KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_MEMORY_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME* = "VK_KHR_external_memory_win32".cstring
  KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_semaphore_capabilities".cstring
  KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME* = "VK_KHR_external_semaphore".cstring
  KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME* = "VK_KHR_external_semaphore_fd".cstring
  KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION* = 1.cuint
  KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME* = "VK_KHR_external_semaphore_win32".cstring
  KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION* = 1.cuint
  KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME* = "VK_KHR_get_display_properties2".cstring
  KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION* = 1.cuint
  KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME* = "VK_KHR_get_memory_requirements2".cstring
  KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION* = 1.cuint
  KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME* = "VK_KHR_get_physical_device_properties2".cstring
  KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION* = 2.cuint
  KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME* = "VK_KHR_get_surface_capabilities2".cstring
  KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION* = 1.cuint
  KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME* = "VK_KHR_imageless_framebuffer".cstring
  KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION* = 1.cuint
  KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME* = "VK_KHR_image_format_list".cstring
  KHR_IMAGE_FORMAT_LIST_SPEC_VERSION* = 1.cuint
  KHR_INCREMENTAL_PRESENT_EXTENSION_NAME* = "VK_KHR_incremental_present".cstring
  KHR_INCREMENTAL_PRESENT_SPEC_VERSION* = 1.cuint
  KHR_MAINTENANCE1_EXTENSION_NAME* = "VK_KHR_maintenance1".cstring
  KHR_MAINTENANCE1_SPEC_VERSION* = 2.cuint
  KHR_MAINTENANCE2_EXTENSION_NAME* = "VK_KHR_maintenance2".cstring
  KHR_MAINTENANCE2_SPEC_VERSION* = 1.cuint
  KHR_MAINTENANCE3_EXTENSION_NAME* = "VK_KHR_maintenance3".cstring
  KHR_MAINTENANCE3_SPEC_VERSION* = 1.cuint
  KHR_MULTIVIEW_EXTENSION_NAME* = "VK_KHR_multiview".cstring
  KHR_MULTIVIEW_SPEC_VERSION* = 1.cuint
  KHR_PERFORMANCE_QUERY_EXTENSION_NAME* = "VK_KHR_performance_query".cstring
  KHR_PERFORMANCE_QUERY_SPEC_VERSION* = 1.cuint
  KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME* = "VK_KHR_pipeline_executable_properties".cstring
  KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION* = 1.cuint
  KHR_PIPELINE_LIBRARY_EXTENSION_NAME* = "VK_KHR_pipeline_library".cstring
  KHR_PIPELINE_LIBRARY_SPEC_VERSION* = 1.cuint
  KHR_PORTABILITY_SUBSET_EXTENSION_NAME* = "VK_KHR_portability_subset".cstring
  KHR_PORTABILITY_SUBSET_SPEC_VERSION* = 1.cuint
  KHR_PUSH_DESCRIPTOR_EXTENSION_NAME* = "VK_KHR_push_descriptor".cstring
  KHR_PUSH_DESCRIPTOR_SPEC_VERSION* = 2.cuint
  KHR_RAY_TRACING_EXTENSION_NAME* = "VK_KHR_ray_tracing".cstring
  KHR_RAY_TRACING_SPEC_VERSION* = 8.cuint
  KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME* = "VK_KHR_relaxed_block_layout".cstring
  KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION* = 1.cuint
  KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME* = "VK_KHR_sampler_mirror_clamp_to_edge".cstring
  KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION* = 3.cuint
  KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME* = "VK_KHR_sampler_ycbcr_conversion".cstring
  KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION* = 14.cuint
  KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME* = "VK_KHR_separate_depth_stencil_layouts".cstring
  KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION* = 1.cuint
  KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME* = "VK_KHR_shader_atomic_int64".cstring
  KHR_SHADER_ATOMIC_INT64_SPEC_VERSION* = 1.cuint
  KHR_SHADER_CLOCK_EXTENSION_NAME* = "VK_KHR_shader_clock".cstring
  KHR_SHADER_CLOCK_SPEC_VERSION* = 1.cuint
  KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME* = "VK_KHR_shader_draw_parameters".cstring
  KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION* = 1.cuint
  KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME* = "VK_KHR_shader_float16_int8".cstring
  KHR_SHADER_FLOAT16_INT8_SPEC_VERSION* = 1.cuint
  KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME* = "VK_KHR_shader_float_controls".cstring
  KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION* = 4.cuint
  KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME* = "VK_KHR_shader_non_semantic_info".cstring
  KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION* = 1.cuint
  KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME* = "VK_KHR_shader_subgroup_extended_types".cstring
  KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION* = 1.cuint
  KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME* = "VK_KHR_shared_presentable_image".cstring
  KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION* = 1.cuint
  KHR_SPIRV_1_4_EXTENSION_NAME* = "VK_KHR_spirv_1_4".cstring
  KHR_SPIRV_1_4_SPEC_VERSION* = 1.cuint
  KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME* = "VK_KHR_storage_buffer_storage_class".cstring
  KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION* = 1.cuint
  KHR_SURFACE_EXTENSION_NAME* = "VK_KHR_surface".cstring
  KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_surface_protected_capabilities".cstring
  KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION* = 1.cuint
  KHR_SURFACE_SPEC_VERSION* = 25.cuint
  KHR_SWAPCHAIN_EXTENSION_NAME* = "VK_KHR_swapchain".cstring
  KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME* = "VK_KHR_swapchain_mutable_format".cstring
  KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION* = 1.cuint
  KHR_SWAPCHAIN_SPEC_VERSION* = 70.cuint
  KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME* = "VK_KHR_timeline_semaphore".cstring
  KHR_TIMELINE_SEMAPHORE_SPEC_VERSION* = 2.cuint
  KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME* = "VK_KHR_uniform_buffer_standard_layout".cstring
  KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION* = 1.cuint
  KHR_VARIABLE_POINTERS_EXTENSION_NAME* = "VK_KHR_variable_pointers".cstring
  KHR_VARIABLE_POINTERS_SPEC_VERSION* = 1.cuint
  KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME* = "VK_KHR_vulkan_memory_model".cstring
  KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION* = 3.cuint
  KHR_WAYLAND_SURFACE_EXTENSION_NAME* = "VK_KHR_wayland_surface".cstring
  KHR_WAYLAND_SURFACE_SPEC_VERSION* = 6.cuint
  KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME* = "VK_KHR_win32_keyed_mutex".cstring
  KHR_WIN32_KEYED_MUTEX_SPEC_VERSION* = 1.cuint
  KHR_WIN32_SURFACE_EXTENSION_NAME* = "VK_KHR_win32_surface".cstring
  KHR_WIN32_SURFACE_SPEC_VERSION* = 6.cuint
  KHR_XCB_SURFACE_EXTENSION_NAME* = "VK_KHR_xcb_surface".cstring
  KHR_XCB_SURFACE_SPEC_VERSION* = 6.cuint
  KHR_XLIB_SURFACE_EXTENSION_NAME* = "VK_KHR_xlib_surface".cstring
  KHR_XLIB_SURFACE_SPEC_VERSION* = 6.cuint
  LOD_CLAMP_NONE* = 1000.0f.float32
  LUID_SIZE* = 8.cuint
  LUID_SIZE_KHR* = 8.cuint
  MAX_DESCRIPTION_SIZE* = 256.cuint
  MAX_DEVICE_GROUP_SIZE* = 32.cuint
  MAX_DEVICE_GROUP_SIZE_KHR* = 32.cuint
  MAX_DRIVER_INFO_SIZE* = 256.cuint
  MAX_DRIVER_INFO_SIZE_KHR* = 256.cuint
  MAX_DRIVER_NAME_SIZE* = 256.cuint
  MAX_DRIVER_NAME_SIZE_KHR* = 256.cuint
  MAX_EXTENSION_NAME_SIZE* = 256.cuint
  MAX_MEMORY_HEAPS* = 16.cuint
  MAX_MEMORY_TYPES* = 32.cuint
  MAX_PHYSICAL_DEVICE_NAME_SIZE* = 256.cuint
  MVK_IOS_SURFACE_EXTENSION_NAME* = "VK_MVK_ios_surface".cstring
  MVK_IOS_SURFACE_SPEC_VERSION* = 3.cuint
  MVK_MACOS_SURFACE_EXTENSION_NAME* = "VK_MVK_macos_surface".cstring
  MVK_MACOS_SURFACE_SPEC_VERSION* = 3.cuint
  NN_VI_SURFACE_EXTENSION_NAME* = "VK_NN_vi_surface".cstring
  NN_VI_SURFACE_SPEC_VERSION* = 1.cuint
  NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME* = "VK_NVX_image_view_handle".cstring
  NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION* = 2.cuint
  NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME* = "VK_NVX_multiview_per_view_attributes".cstring
  NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION* = 1.cuint
  NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME* = "VK_NV_clip_space_w_scaling".cstring
  NV_CLIP_SPACE_W_SCALING_SPEC_VERSION* = 1.cuint
  NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME* = "VK_NV_compute_shader_derivatives".cstring
  NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION* = 1.cuint
  NV_COOPERATIVE_MATRIX_EXTENSION_NAME* = "VK_NV_cooperative_matrix".cstring
  NV_COOPERATIVE_MATRIX_SPEC_VERSION* = 1.cuint
  NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME* = "VK_NV_corner_sampled_image".cstring
  NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION* = 2.cuint
  NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME* = "VK_NV_coverage_reduction_mode".cstring
  NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION* = 1.cuint
  NV_DEDICATED_ALLOCATION_EXTENSION_NAME* = "VK_NV_dedicated_allocation".cstring
  NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME* = "VK_NV_dedicated_allocation_image_aliasing".cstring
  NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION* = 1.cuint
  NV_DEDICATED_ALLOCATION_SPEC_VERSION* = 1.cuint
  NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME* = "VK_NV_device_diagnostics_config".cstring
  NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION* = 1.cuint
  NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME* = "VK_NV_device_diagnostic_checkpoints".cstring
  NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION* = 2.cuint
  NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME* = "VK_NV_device_generated_commands".cstring
  NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION* = 3.cuint
  NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME* = "VK_NV_external_memory_capabilities".cstring
  NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION* = 1.cuint
  NV_EXTERNAL_MEMORY_EXTENSION_NAME* = "VK_NV_external_memory".cstring
  NV_EXTERNAL_MEMORY_SPEC_VERSION* = 1.cuint
  NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME* = "VK_NV_external_memory_win32".cstring
  NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION* = 1.cuint
  NV_FILL_RECTANGLE_EXTENSION_NAME* = "VK_NV_fill_rectangle".cstring
  NV_FILL_RECTANGLE_SPEC_VERSION* = 1.cuint
  NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME* = "VK_NV_fragment_coverage_to_color".cstring
  NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION* = 1.cuint
  NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME* = "VK_NV_fragment_shader_barycentric".cstring
  NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION* = 1.cuint
  NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME* = "VK_NV_framebuffer_mixed_samples".cstring
  NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION* = 1.cuint
  NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME* = "VK_NV_geometry_shader_passthrough".cstring
  NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION* = 1.cuint
  NV_GLSL_SHADER_EXTENSION_NAME* = "VK_NV_glsl_shader".cstring
  NV_GLSL_SHADER_SPEC_VERSION* = 1.cuint
  NV_MESH_SHADER_EXTENSION_NAME* = "VK_NV_mesh_shader".cstring
  NV_MESH_SHADER_SPEC_VERSION* = 1.cuint
  NV_RAY_TRACING_EXTENSION_NAME* = "VK_NV_ray_tracing".cstring
  NV_RAY_TRACING_SPEC_VERSION* = 3.cuint
  NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME* = "VK_NV_representative_fragment_test".cstring
  NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION* = 2.cuint
  NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME* = "VK_NV_sample_mask_override_coverage".cstring
  NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION* = 1.cuint
  NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME* = "VK_NV_scissor_exclusive".cstring
  NV_SCISSOR_EXCLUSIVE_SPEC_VERSION* = 1.cuint
  NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME* = "VK_NV_shader_image_footprint".cstring
  NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION* = 2.cuint
  NV_SHADER_SM_BUILTINS_EXTENSION_NAME* = "VK_NV_shader_sm_builtins".cstring
  NV_SHADER_SM_BUILTINS_SPEC_VERSION* = 1.cuint
  NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME* = "VK_NV_shader_subgroup_partitioned".cstring
  NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION* = 1.cuint
  NV_SHADING_RATE_IMAGE_EXTENSION_NAME* = "VK_NV_shading_rate_image".cstring
  NV_SHADING_RATE_IMAGE_SPEC_VERSION* = 3.cuint
  NV_VIEWPORT_ARRAY2_EXTENSION_NAME* = "VK_NV_viewport_array2".cstring
  NV_VIEWPORT_ARRAY2_SPEC_VERSION* = 1.cuint
  NV_VIEWPORT_SWIZZLE_EXTENSION_NAME* = "VK_NV_viewport_swizzle".cstring
  NV_VIEWPORT_SWIZZLE_SPEC_VERSION* = 1.cuint
  NV_WIN32_KEYED_MUTEX_EXTENSION_NAME* = "VK_NV_win32_keyed_mutex".cstring
  NV_WIN32_KEYED_MUTEX_SPEC_VERSION* = 2.cuint
  QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME* = "VK_QCOM_render_pass_shader_resolve".cstring
  QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION* = 4.cuint
  QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME* = "VK_QCOM_render_pass_transform".cstring
  QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION* = 1.cuint
  QCOM_render_pass_store_ops_EXTENSION_NAME* = "VK_QCOM_render_pass_store_ops".cstring
  QCOM_render_pass_store_ops_SPEC_VERSION* = 2.cuint
  QUEUE_FAMILY_EXTERNAL* = not 0U32-1.cuint
  QUEUE_FAMILY_EXTERNAL_KHR* = not 0U32-1.cuint
  QUEUE_FAMILY_FOREIGN_EXT* = not 0U32-2.cuint
  QUEUE_FAMILY_IGNORED* = not 0U32.cuint
  REMAINING_ARRAY_LAYERS* = not 0U32.cuint
  REMAINING_MIP_LEVELS* = not 0U32.cuint
  SHADER_UNUSED_KHR* = not 0U32.cuint
  SHADER_UNUSED_NV* = not 0U32.cuint
  SUBPASS_EXTERNAL* = not 0U32.cuint
  TRUE* = 1.Bool32
  UUID_SIZE* = 16.cuint
  WHOLE_SIZE* = not 0U32.cuint

# Functions
var
  AcquireFullScreenExclusiveModeEXT*: proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}
  AcquireNextImage2KHR*: proc (device: Device, pAcquireInfo: ptr AcquireNextImageInfoKHR, pImageIndex: ptr uint32): Result {.stdcall.}
  AcquireNextImageKHR*: proc (device: Device, swapchain: SwapchainKHR, timeout: uint64, semaphore: Semaphore, fence: Fence, pImageIndex: ptr uint32): Result {.stdcall.}
  AcquirePerformanceConfigurationINTEL*: proc (device: Device, pAcquireInfo: ptr PerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr PerformanceConfigurationINTEL): Result {.stdcall.}
  AcquireProfilingLockKHR*: proc (device: Device, pInfo: ptr AcquireProfilingLockInfoKHR): Result {.stdcall.}
  AcquireXlibDisplayEXT*: proc (physicalDevice: PhysicalDevice, dpy: ptr Display, display: DisplayKHR): Result {.stdcall.}
  AllocateCommandBuffers*: proc (device: Device, pAllocateInfo: ptr CommandBufferAllocateInfo, pCommandBuffers: ptr CommandBuffer): Result {.stdcall.}
  AllocateDescriptorSets*: proc (device: Device, pAllocateInfo: ptr DescriptorSetAllocateInfo, pDescriptorSets: ptr DescriptorSet): Result {.stdcall.}
  AllocateMemory*: proc (device: Device, pAllocateInfo: ptr MemoryAllocateInfo, pAllocator: ptr AllocationCallbacks, pMemory: ptr DeviceMemory): Result {.stdcall.}
  BeginCommandBuffer*: proc (commandBuffer: CommandBuffer, pBeginInfo: ptr CommandBufferBeginInfo): Result {.stdcall.}
  BindAccelerationStructureMemoryKHR*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindAccelerationStructureMemoryInfoKHR): Result {.stdcall.}
  BindAccelerationStructureMemoryNV*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindAccelerationStructureMemoryInfoKHR): Result {.stdcall.}
  BindBufferMemory*: proc (device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize): Result {.stdcall.}
  BindBufferMemory2*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindBufferMemoryInfo): Result {.stdcall.}
  BindBufferMemory2KHR*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindBufferMemoryInfo): Result {.stdcall.}
  BindImageMemory*: proc (device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize): Result {.stdcall.}
  BindImageMemory2*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindImageMemoryInfo): Result {.stdcall.}
  BindImageMemory2KHR*: proc (device: Device, bindInfoCount: uint32, pBindInfos: ptr BindImageMemoryInfo): Result {.stdcall.}
  BuildAccelerationStructureKHR*: proc (device: Device, infoCount: uint32, pInfos: ptr AccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr AccelerationStructureBuildOffsetInfoKHR): Result {.stdcall.}
  CmdBeginConditionalRenderingEXT*: proc (commandBuffer: CommandBuffer, pConditionalRenderingBegin: ptr ConditionalRenderingBeginInfoEXT): void {.stdcall.}
  CmdBeginDebugUtilsLabelEXT*: proc (commandBuffer: CommandBuffer, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}
  CmdBeginQuery*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, flags: QueryControlFlags): void {.stdcall.}
  CmdBeginQueryIndexedEXT*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, flags: QueryControlFlags, index: uint32): void {.stdcall.}
  CmdBeginRenderPass*: proc (commandBuffer: CommandBuffer, pRenderPassBegin: ptr RenderPassBeginInfo, contents: SubpassContents): void {.stdcall.}
  CmdBeginRenderPass2*: proc (commandBuffer: CommandBuffer, pRenderPassBegin: ptr RenderPassBeginInfo, pSubpassBeginInfo: ptr SubpassBeginInfo): void {.stdcall.}
  CmdBeginRenderPass2KHR*: proc (commandBuffer: CommandBuffer, pRenderPassBegin: ptr RenderPassBeginInfo, pSubpassBeginInfo: ptr SubpassBeginInfo): void {.stdcall.}
  CmdBeginTransformFeedbackEXT*: proc (commandBuffer: CommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr Buffer, pCounterBufferOffsets: ptr DeviceSize): void {.stdcall.}
  CmdBindDescriptorSets*: proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr DescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): void {.stdcall.}
  CmdBindIndexBuffer*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType): void {.stdcall.}
  CmdBindPipeline*: proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline): void {.stdcall.}
  CmdBindPipelineShaderGroupNV*: proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: uint32): void {.stdcall.}
  CmdBindShadingRateImageNV*: proc (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout): void {.stdcall.}
  CmdBindTransformFeedbackBuffersEXT*: proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize, pSizes: ptr DeviceSize): void {.stdcall.}
  CmdBindVertexBuffers*: proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize): void {.stdcall.}
  CmdBindVertexBuffers2EXT*: proc (commandBuffer: CommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr Buffer, pOffsets: ptr DeviceSize, pSizes: ptr DeviceSize, pStrides: ptr DeviceSize): void {.stdcall.}
  CmdBlitImage*: proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageBlit, filter: Filter): void {.stdcall.}
  CmdBlitImage2KHR*: proc (commandBuffer: CommandBuffer, pBlitImageInfo: ptr BlitImageInfo2KHR): void {.stdcall.}
  CmdBuildAccelerationStructureIndirectKHR*: proc (commandBuffer: CommandBuffer, pInfo: ptr AccelerationStructureBuildGeometryInfoKHR, indirectBuffer: Buffer, indirectOffset: DeviceSize, indirectStride: uint32): void {.stdcall.}
  CmdBuildAccelerationStructureKHR*: proc (commandBuffer: CommandBuffer, infoCount: uint32, pInfos: ptr AccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr AccelerationStructureBuildOffsetInfoKHR): void {.stdcall.}
  CmdBuildAccelerationStructureNV*: proc (commandBuffer: CommandBuffer, pInfo: ptr AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: Bool32, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, scratch: Buffer, scratchOffset: DeviceSize): void {.stdcall.}
  CmdClearAttachments*: proc (commandBuffer: CommandBuffer, attachmentCount: uint32, pAttachments: ptr ClearAttachment, rectCount: uint32, pRects: ptr ClearRect): void {.stdcall.}
  CmdClearColorImage*: proc (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: ptr ClearColorValue, rangeCount: uint32, pRanges: ptr ImageSubresourceRange): void {.stdcall.}
  CmdClearDepthStencilImage*: proc (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: ptr ClearDepthStencilValue, rangeCount: uint32, pRanges: ptr ImageSubresourceRange): void {.stdcall.}
  CmdCopyAccelerationStructureKHR*: proc (commandBuffer: CommandBuffer, pInfo: ptr CopyAccelerationStructureInfoKHR): void {.stdcall.}
  CmdCopyAccelerationStructureNV*: proc (commandBuffer: CommandBuffer, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, mode: CopyAccelerationStructureModeKHR): void {.stdcall.}
  CmdCopyAccelerationStructureToMemoryKHR*: proc (commandBuffer: CommandBuffer, pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR): void {.stdcall.}
  CmdCopyBuffer*: proc (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: uint32, pRegions: ptr BufferCopy): void {.stdcall.}
  CmdCopyBuffer2KHR*: proc (commandBuffer: CommandBuffer, pCopyBufferInfo: ptr CopyBufferInfo2KHR): void {.stdcall.}
  CmdCopyBufferToImage*: proc (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr BufferImageCopy): void {.stdcall.}
  CmdCopyBufferToImage2KHR*: proc (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: ptr CopyBufferToImageInfo2KHR): void {.stdcall.}
  CmdCopyImage*: proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageCopy): void {.stdcall.}
  CmdCopyImage2KHR*: proc (commandBuffer: CommandBuffer, pCopyImageInfo: ptr CopyImageInfo2KHR): void {.stdcall.}
  CmdCopyImageToBuffer*: proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: uint32, pRegions: ptr BufferImageCopy): void {.stdcall.}
  CmdCopyImageToBuffer2KHR*: proc (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: ptr CopyImageToBufferInfo2KHR): void {.stdcall.}
  CmdCopyMemoryToAccelerationStructureKHR*: proc (commandBuffer: CommandBuffer, pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR): void {.stdcall.}
  CmdCopyQueryPoolResults*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags): void {.stdcall.}
  CmdDebugMarkerBeginEXT*: proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr DebugMarkerMarkerInfoEXT): void {.stdcall.}
  CmdDebugMarkerEndEXT*: proc (commandBuffer: CommandBuffer): void {.stdcall.}
  CmdDebugMarkerInsertEXT*: proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr DebugMarkerMarkerInfoEXT): void {.stdcall.}
  CmdDispatch*: proc (commandBuffer: CommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  CmdDispatchBase*: proc (commandBuffer: CommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  CmdDispatchBaseKHR*: proc (commandBuffer: CommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  CmdDispatchIndirect*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize): void {.stdcall.}
  CmdDraw*: proc (commandBuffer: CommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): void {.stdcall.}
  CmdDrawIndexed*: proc (commandBuffer: CommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): void {.stdcall.}
  CmdDrawIndexedIndirect*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndexedIndirectCount*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndexedIndirectCountAMD*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndexedIndirectCountKHR*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndirect*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndirectByteCountEXT*: proc (commandBuffer: CommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: uint32, vertexStride: uint32): void {.stdcall.}
  CmdDrawIndirectCount*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndirectCountAMD*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawIndirectCountKHR*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawMeshTasksIndirectCountNV*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawMeshTasksIndirectNV*: proc (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  CmdDrawMeshTasksNV*: proc (commandBuffer: CommandBuffer, taskCount: uint32, firstTask: uint32): void {.stdcall.}
  CmdEndConditionalRenderingEXT*: proc (commandBuffer: CommandBuffer): void {.stdcall.}
  CmdEndDebugUtilsLabelEXT*: proc (commandBuffer: CommandBuffer): void {.stdcall.}
  CmdEndQuery*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32): void {.stdcall.}
  CmdEndQueryIndexedEXT*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, query: uint32, index: uint32): void {.stdcall.}
  CmdEndRenderPass*: proc (commandBuffer: CommandBuffer): void {.stdcall.}
  CmdEndRenderPass2*: proc (commandBuffer: CommandBuffer, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}
  CmdEndRenderPass2KHR*: proc (commandBuffer: CommandBuffer, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}
  CmdEndTransformFeedbackEXT*: proc (commandBuffer: CommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr Buffer, pCounterBufferOffsets: ptr DeviceSize): void {.stdcall.}
  CmdExecuteCommands*: proc (commandBuffer: CommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr CommandBuffer): void {.stdcall.}
  CmdExecuteGeneratedCommandsNV*: proc (commandBuffer: CommandBuffer, isPreprocessed: Bool32, pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV): void {.stdcall.}
  CmdFillBuffer*: proc (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: uint32): void {.stdcall.}
  CmdInsertDebugUtilsLabelEXT*: proc (commandBuffer: CommandBuffer, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}
  CmdNextSubpass*: proc (commandBuffer: CommandBuffer, contents: SubpassContents): void {.stdcall.}
  CmdNextSubpass2*: proc (commandBuffer: CommandBuffer, pSubpassBeginInfo: ptr SubpassBeginInfo, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}
  CmdNextSubpass2KHR*: proc (commandBuffer: CommandBuffer, pSubpassBeginInfo: ptr SubpassBeginInfo, pSubpassEndInfo: ptr SubpassEndInfo): void {.stdcall.}
  CmdPipelineBarrier*: proc (commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr MemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr BufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr ImageMemoryBarrier): void {.stdcall.}
  CmdPreprocessGeneratedCommandsNV*: proc (commandBuffer: CommandBuffer, pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV): void {.stdcall.}
  CmdPushConstants*: proc (commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: uint32, size: uint32, pValues: pointer): void {.stdcall.}
  CmdPushDescriptorSetKHR*: proc (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr WriteDescriptorSet): void {.stdcall.}
  CmdPushDescriptorSetWithTemplateKHR*: proc (commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: uint32, pData: pointer): void {.stdcall.}
  CmdResetEvent*: proc (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags): void {.stdcall.}
  CmdResetQueryPool*: proc (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  CmdResolveImage*: proc (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: uint32, pRegions: ptr ImageResolve): void {.stdcall.}
  CmdResolveImage2KHR*: proc (commandBuffer: CommandBuffer, pResolveImageInfo: ptr ResolveImageInfo2KHR): void {.stdcall.}
  CmdSetBlendConstants*: proc (commandBuffer: CommandBuffer, blendConstants: array[4,float32]): void {.stdcall.}
  CmdSetCheckpointNV*: proc (commandBuffer: CommandBuffer, pCheckpointMarker: pointer): void {.stdcall.}
  CmdSetCoarseSampleOrderNV*: proc (commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr CoarseSampleOrderCustomNV): void {.stdcall.}
  CmdSetCullModeEXT*: proc (commandBuffer: CommandBuffer, cullMode: CullModeFlags): void {.stdcall.}
  CmdSetDepthBias*: proc (commandBuffer: CommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): void {.stdcall.}
  CmdSetDepthBounds*: proc (commandBuffer: CommandBuffer, minDepthBounds: float32, maxDepthBounds: float32): void {.stdcall.}
  CmdSetDepthBoundsTestEnableEXT*: proc (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32): void {.stdcall.}
  CmdSetDepthCompareOpEXT*: proc (commandBuffer: CommandBuffer, depthCompareOp: CompareOp): void {.stdcall.}
  CmdSetDepthTestEnableEXT*: proc (commandBuffer: CommandBuffer, depthTestEnable: Bool32): void {.stdcall.}
  CmdSetDepthWriteEnableEXT*: proc (commandBuffer: CommandBuffer, depthWriteEnable: Bool32): void {.stdcall.}
  CmdSetDeviceMask*: proc (commandBuffer: CommandBuffer, deviceMask: uint32): void {.stdcall.}
  CmdSetDeviceMaskKHR*: proc (commandBuffer: CommandBuffer, deviceMask: uint32): void {.stdcall.}
  CmdSetDiscardRectangleEXT*: proc (commandBuffer: CommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr Rect2D): void {.stdcall.}
  CmdSetEvent*: proc (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags): void {.stdcall.}
  CmdSetExclusiveScissorNV*: proc (commandBuffer: CommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr Rect2D): void {.stdcall.}
  CmdSetFrontFaceEXT*: proc (commandBuffer: CommandBuffer, frontFace: FrontFace): void {.stdcall.}
  CmdSetLineStippleEXT*: proc (commandBuffer: CommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16): void {.stdcall.}
  CmdSetLineWidth*: proc (commandBuffer: CommandBuffer, lineWidth: float32): void {.stdcall.}
  CmdSetPerformanceMarkerINTEL*: proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr PerformanceMarkerInfoINTEL): Result {.stdcall.}
  CmdSetPerformanceOverrideINTEL*: proc (commandBuffer: CommandBuffer, pOverrideInfo: ptr PerformanceOverrideInfoINTEL): Result {.stdcall.}
  CmdSetPerformanceStreamMarkerINTEL*: proc (commandBuffer: CommandBuffer, pMarkerInfo: ptr PerformanceStreamMarkerInfoINTEL): Result {.stdcall.}
  CmdSetPrimitiveTopologyEXT*: proc (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology): void {.stdcall.}
  CmdSetSampleLocationsEXT*: proc (commandBuffer: CommandBuffer, pSampleLocationsInfo: ptr SampleLocationsInfoEXT): void {.stdcall.}
  CmdSetScissor*: proc (commandBuffer: CommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr Rect2D): void {.stdcall.}
  CmdSetScissorWithCountEXT*: proc (commandBuffer: CommandBuffer, scissorCount: uint32, pScissors: ptr Rect2D): void {.stdcall.}
  CmdSetStencilCompareMask*: proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: uint32): void {.stdcall.}
  CmdSetStencilOpEXT*: proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp): void {.stdcall.}
  CmdSetStencilReference*: proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: uint32): void {.stdcall.}
  CmdSetStencilTestEnableEXT*: proc (commandBuffer: CommandBuffer, stencilTestEnable: Bool32): void {.stdcall.}
  CmdSetStencilWriteMask*: proc (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: uint32): void {.stdcall.}
  CmdSetViewport*: proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr Viewport): void {.stdcall.}
  CmdSetViewportShadingRatePaletteNV*: proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr ShadingRatePaletteNV): void {.stdcall.}
  CmdSetViewportWScalingNV*: proc (commandBuffer: CommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr ViewportWScalingNV): void {.stdcall.}
  CmdSetViewportWithCountEXT*: proc (commandBuffer: CommandBuffer, viewportCount: uint32, pViewports: ptr Viewport): void {.stdcall.}
  CmdTraceRaysIndirectKHR*: proc (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ptr StridedBufferRegionKHR, pMissShaderBindingTable: ptr StridedBufferRegionKHR, pHitShaderBindingTable: ptr StridedBufferRegionKHR, pCallableShaderBindingTable: ptr StridedBufferRegionKHR, buffer: Buffer, offset: DeviceSize): void {.stdcall.}
  CmdTraceRaysKHR*: proc (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ptr StridedBufferRegionKHR, pMissShaderBindingTable: ptr StridedBufferRegionKHR, pHitShaderBindingTable: ptr StridedBufferRegionKHR, pCallableShaderBindingTable: ptr StridedBufferRegionKHR, width: uint32, height: uint32, depth: uint32): void {.stdcall.}
  CmdTraceRaysNV*: proc (commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: uint32, height: uint32, depth: uint32): void {.stdcall.}
  CmdUpdateBuffer*: proc (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: pointer): void {.stdcall.}
  CmdWaitEvents*: proc (commandBuffer: CommandBuffer, eventCount: uint32, pEvents: ptr Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr MemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr BufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr ImageMemoryBarrier): void {.stdcall.}
  CmdWriteAccelerationStructuresPropertiesKHR*: proc (commandBuffer: CommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: uint32): void {.stdcall.}
  CmdWriteAccelerationStructuresPropertiesNV*: proc (commandBuffer: CommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: uint32): void {.stdcall.}
  CmdWriteBufferMarkerAMD*: proc (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, dstBuffer: Buffer, dstOffset: DeviceSize, marker: uint32): void {.stdcall.}
  CmdWriteTimestamp*: proc (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, queryPool: QueryPool, query: uint32): void {.stdcall.}
  CompileDeferredNV*: proc (device: Device, pipeline: Pipeline, shader: uint32): Result {.stdcall.}
  CopyAccelerationStructureKHR*: proc (device: Device, pInfo: ptr CopyAccelerationStructureInfoKHR): Result {.stdcall.}
  CopyAccelerationStructureToMemoryKHR*: proc (device: Device, pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR): Result {.stdcall.}
  CopyMemoryToAccelerationStructureKHR*: proc (device: Device, pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR): Result {.stdcall.}
  CreateAccelerationStructureKHR*: proc (device: Device, pCreateInfo: ptr AccelerationStructureCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pAccelerationStructure: ptr AccelerationStructureKHR): Result {.stdcall.}
  CreateAccelerationStructureNV*: proc (device: Device, pCreateInfo: ptr AccelerationStructureCreateInfoNV, pAllocator: ptr AllocationCallbacks, pAccelerationStructure: ptr AccelerationStructureNV): Result {.stdcall.}
  CreateAndroidSurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr AndroidSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateBuffer*: proc (device: Device, pCreateInfo: ptr BufferCreateInfo, pAllocator: ptr AllocationCallbacks, pBuffer: ptr Buffer): Result {.stdcall.}
  CreateBufferView*: proc (device: Device, pCreateInfo: ptr BufferViewCreateInfo, pAllocator: ptr AllocationCallbacks, pView: ptr BufferView): Result {.stdcall.}
  CreateCommandPool*: proc (device: Device, pCreateInfo: ptr CommandPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pCommandPool: ptr CommandPool): Result {.stdcall.}
  CreateComputePipelines*: proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr ComputePipelineCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}
  CreateDebugReportCallbackEXT*: proc (instance: Instance, pCreateInfo: ptr DebugReportCallbackCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pCallback: ptr DebugReportCallbackEXT): Result {.stdcall.}
  CreateDebugUtilsMessengerEXT*: proc (instance: Instance, pCreateInfo: ptr DebugUtilsMessengerCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pMessenger: ptr DebugUtilsMessengerEXT): Result {.stdcall.}
  CreateDeferredOperationKHR*: proc (device: Device, pAllocator: ptr AllocationCallbacks, pDeferredOperation: ptr DeferredOperationKHR): Result {.stdcall.}
  CreateDescriptorPool*: proc (device: Device, pCreateInfo: ptr DescriptorPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pDescriptorPool: ptr DescriptorPool): Result {.stdcall.}
  CreateDescriptorSetLayout*: proc (device: Device, pCreateInfo: ptr DescriptorSetLayoutCreateInfo, pAllocator: ptr AllocationCallbacks, pSetLayout: ptr DescriptorSetLayout): Result {.stdcall.}
  CreateDescriptorUpdateTemplate*: proc (device: Device, pCreateInfo: ptr DescriptorUpdateTemplateCreateInfo, pAllocator: ptr AllocationCallbacks, pDescriptorUpdateTemplate: ptr DescriptorUpdateTemplate): Result {.stdcall.}
  CreateDescriptorUpdateTemplateKHR*: proc (device: Device, pCreateInfo: ptr DescriptorUpdateTemplateCreateInfo, pAllocator: ptr AllocationCallbacks, pDescriptorUpdateTemplate: ptr DescriptorUpdateTemplate): Result {.stdcall.}
  CreateDevice*: proc (physicalDevice: PhysicalDevice, pCreateInfo: ptr DeviceCreateInfo, pAllocator: ptr AllocationCallbacks, pDevice: ptr Device): Result {.stdcall.}
  CreateDirectFBSurfaceEXT*: proc (instance: Instance, pCreateInfo: ptr DirectFBSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateDisplayModeKHR*: proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: ptr DisplayModeCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pMode: ptr DisplayModeKHR): Result {.stdcall.}
  CreateDisplayPlaneSurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr DisplaySurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateEvent*: proc (device: Device, pCreateInfo: ptr EventCreateInfo, pAllocator: ptr AllocationCallbacks, pEvent: ptr Event): Result {.stdcall.}
  CreateFence*: proc (device: Device, pCreateInfo: ptr FenceCreateInfo, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}
  CreateFramebuffer*: proc (device: Device, pCreateInfo: ptr FramebufferCreateInfo, pAllocator: ptr AllocationCallbacks, pFramebuffer: ptr Framebuffer): Result {.stdcall.}
  CreateGraphicsPipelines*: proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr GraphicsPipelineCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}
  CreateHeadlessSurfaceEXT*: proc (instance: Instance, pCreateInfo: ptr HeadlessSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateIOSSurfaceMVK*: proc (instance: Instance, pCreateInfo: ptr IOSSurfaceCreateInfoMVK, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateImage*: proc (device: Device, pCreateInfo: ptr ImageCreateInfo, pAllocator: ptr AllocationCallbacks, pImage: ptr Image): Result {.stdcall.}
  CreateImagePipeSurfaceFUCHSIA*: proc (instance: Instance, pCreateInfo: ptr ImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateImageView*: proc (device: Device, pCreateInfo: ptr ImageViewCreateInfo, pAllocator: ptr AllocationCallbacks, pView: ptr ImageView): Result {.stdcall.}
  CreateIndirectCommandsLayoutNV*: proc (device: Device, pCreateInfo: ptr IndirectCommandsLayoutCreateInfoNV, pAllocator: ptr AllocationCallbacks, pIndirectCommandsLayout: ptr IndirectCommandsLayoutNV): Result {.stdcall.}
  CreateInstance*: proc (pCreateInfo: ptr InstanceCreateInfo, pAllocator: ptr AllocationCallbacks, pInstance: ptr Instance): Result {.stdcall.}
  CreateMacOSSurfaceMVK*: proc (instance: Instance, pCreateInfo: ptr MacOSSurfaceCreateInfoMVK, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateMetalSurfaceEXT*: proc (instance: Instance, pCreateInfo: ptr MetalSurfaceCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreatePipelineCache*: proc (device: Device, pCreateInfo: ptr PipelineCacheCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelineCache: ptr PipelineCache): Result {.stdcall.}
  CreatePipelineLayout*: proc (device: Device, pCreateInfo: ptr PipelineLayoutCreateInfo, pAllocator: ptr AllocationCallbacks, pPipelineLayout: ptr PipelineLayout): Result {.stdcall.}
  CreatePrivateDataSlotEXT*: proc (device: Device, pCreateInfo: ptr PrivateDataSlotCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pPrivateDataSlot: ptr PrivateDataSlotEXT): Result {.stdcall.}
  CreateQueryPool*: proc (device: Device, pCreateInfo: ptr QueryPoolCreateInfo, pAllocator: ptr AllocationCallbacks, pQueryPool: ptr QueryPool): Result {.stdcall.}
  CreateRayTracingPipelinesKHR*: proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr RayTracingPipelineCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}
  CreateRayTracingPipelinesNV*: proc (device: Device, pipelineCache: PipelineCache, createInfoCount: uint32, pCreateInfos: ptr RayTracingPipelineCreateInfoNV, pAllocator: ptr AllocationCallbacks, pPipelines: ptr Pipeline): Result {.stdcall.}
  CreateRenderPass*: proc (device: Device, pCreateInfo: ptr RenderPassCreateInfo, pAllocator: ptr AllocationCallbacks, pRenderPass: ptr RenderPass): Result {.stdcall.}
  CreateRenderPass2*: proc (device: Device, pCreateInfo: ptr RenderPassCreateInfo2, pAllocator: ptr AllocationCallbacks, pRenderPass: ptr RenderPass): Result {.stdcall.}
  CreateRenderPass2KHR*: proc (device: Device, pCreateInfo: ptr RenderPassCreateInfo2, pAllocator: ptr AllocationCallbacks, pRenderPass: ptr RenderPass): Result {.stdcall.}
  CreateSampler*: proc (device: Device, pCreateInfo: ptr SamplerCreateInfo, pAllocator: ptr AllocationCallbacks, pSampler: ptr Sampler): Result {.stdcall.}
  CreateSamplerYcbcrConversion*: proc (device: Device, pCreateInfo: ptr SamplerYcbcrConversionCreateInfo, pAllocator: ptr AllocationCallbacks, pYcbcrConversion: ptr SamplerYcbcrConversion): Result {.stdcall.}
  CreateSamplerYcbcrConversionKHR*: proc (device: Device, pCreateInfo: ptr SamplerYcbcrConversionCreateInfo, pAllocator: ptr AllocationCallbacks, pYcbcrConversion: ptr SamplerYcbcrConversion): Result {.stdcall.}
  CreateSemaphore*: proc (device: Device, pCreateInfo: ptr SemaphoreCreateInfo, pAllocator: ptr AllocationCallbacks, pSemaphore: ptr Semaphore): Result {.stdcall.}
  CreateShaderModule*: proc (device: Device, pCreateInfo: ptr ShaderModuleCreateInfo, pAllocator: ptr AllocationCallbacks, pShaderModule: ptr ShaderModule): Result {.stdcall.}
  CreateSharedSwapchainsKHR*: proc (device: Device, swapchainCount: uint32, pCreateInfos: ptr SwapchainCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSwapchains: ptr SwapchainKHR): Result {.stdcall.}
  CreateStreamDescriptorSurfaceGGP*: proc (instance: Instance, pCreateInfo: ptr StreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateSwapchainKHR*: proc (device: Device, pCreateInfo: ptr SwapchainCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSwapchain: ptr SwapchainKHR): Result {.stdcall.}
  CreateValidationCacheEXT*: proc (device: Device, pCreateInfo: ptr ValidationCacheCreateInfoEXT, pAllocator: ptr AllocationCallbacks, pValidationCache: ptr ValidationCacheEXT): Result {.stdcall.}
  CreateViSurfaceNN*: proc (instance: Instance, pCreateInfo: ptr ViSurfaceCreateInfoNN, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateWaylandSurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr WaylandSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateWin32SurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr Win32SurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateXcbSurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr XcbSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  CreateXlibSurfaceKHR*: proc (instance: Instance, pCreateInfo: ptr XlibSurfaceCreateInfoKHR, pAllocator: ptr AllocationCallbacks, pSurface: ptr SurfaceKHR): Result {.stdcall.}
  DebugMarkerSetObjectNameEXT*: proc (device: Device, pNameInfo: ptr DebugMarkerObjectNameInfoEXT): Result {.stdcall.}
  DebugMarkerSetObjectTagEXT*: proc (device: Device, pTagInfo: ptr DebugMarkerObjectTagInfoEXT): Result {.stdcall.}
  DebugReportMessageEXT*: proc (instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring): void {.stdcall.}
  DeferredOperationJoinKHR*: proc (device: Device, operation: DeferredOperationKHR): Result {.stdcall.}
  DestroyAccelerationStructureKHR*: proc (device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyAccelerationStructureNV*: proc (device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyBuffer*: proc (device: Device, buffer: Buffer, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyBufferView*: proc (device: Device, bufferView: BufferView, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyCommandPool*: proc (device: Device, commandPool: CommandPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDebugReportCallbackEXT*: proc (instance: Instance, callback: DebugReportCallbackEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDebugUtilsMessengerEXT*: proc (instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDeferredOperationKHR*: proc (device: Device, operation: DeferredOperationKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDescriptorPool*: proc (device: Device, descriptorPool: DescriptorPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDescriptorSetLayout*: proc (device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDescriptorUpdateTemplate*: proc (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDescriptorUpdateTemplateKHR*: proc (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyDevice*: proc (device: Device, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyEvent*: proc (device: Device, event: Event, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyFence*: proc (device: Device, fence: Fence, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyFramebuffer*: proc (device: Device, framebuffer: Framebuffer, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyImage*: proc (device: Device, image: Image, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyImageView*: proc (device: Device, imageView: ImageView, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyIndirectCommandsLayoutNV*: proc (device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyInstance*: proc (instance: Instance, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyPipeline*: proc (device: Device, pipeline: Pipeline, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyPipelineCache*: proc (device: Device, pipelineCache: PipelineCache, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyPipelineLayout*: proc (device: Device, pipelineLayout: PipelineLayout, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyPrivateDataSlotEXT*: proc (device: Device, privateDataSlot: PrivateDataSlotEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyQueryPool*: proc (device: Device, queryPool: QueryPool, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyRenderPass*: proc (device: Device, renderPass: RenderPass, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySampler*: proc (device: Device, sampler: Sampler, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySamplerYcbcrConversion*: proc (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySamplerYcbcrConversionKHR*: proc (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySemaphore*: proc (device: Device, semaphore: Semaphore, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyShaderModule*: proc (device: Device, shaderModule: ShaderModule, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySurfaceKHR*: proc (instance: Instance, surface: SurfaceKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroySwapchainKHR*: proc (device: Device, swapchain: SwapchainKHR, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DestroyValidationCacheEXT*: proc (device: Device, validationCache: ValidationCacheEXT, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  DeviceWaitIdle*: proc (device: Device): Result {.stdcall.}
  DisplayPowerControlEXT*: proc (device: Device, display: DisplayKHR, pDisplayPowerInfo: ptr DisplayPowerInfoEXT): Result {.stdcall.}
  EndCommandBuffer*: proc (commandBuffer: CommandBuffer): Result {.stdcall.}
  EnumerateDeviceExtensionProperties*: proc (physicalDevice: PhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr ExtensionProperties): Result {.stdcall.}
  EnumerateDeviceLayerProperties*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr LayerProperties): Result {.stdcall.}
  EnumerateInstanceExtensionProperties*: proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr ExtensionProperties): Result {.stdcall.}
  EnumerateInstanceLayerProperties*: proc (pPropertyCount: ptr uint32, pProperties: ptr LayerProperties): Result {.stdcall.}
  EnumerateInstanceVersion*: proc (pApiVersion: ptr uint32): Result {.stdcall.}
  EnumeratePhysicalDeviceGroups*: proc (instance: Instance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr PhysicalDeviceGroupProperties): Result {.stdcall.}
  EnumeratePhysicalDeviceGroupsKHR*: proc (instance: Instance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr PhysicalDeviceGroupProperties): Result {.stdcall.}
  EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr PerformanceCounterKHR, pCounterDescriptions: ptr PerformanceCounterDescriptionKHR): Result {.stdcall.}
  EnumeratePhysicalDevices*: proc (instance: Instance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr PhysicalDevice): Result {.stdcall.}
  FlushMappedMemoryRanges*: proc (device: Device, memoryRangeCount: uint32, pMemoryRanges: ptr MappedMemoryRange): Result {.stdcall.}
  FreeCommandBuffers*: proc (device: Device, commandPool: CommandPool, commandBufferCount: uint32, pCommandBuffers: ptr CommandBuffer): void {.stdcall.}
  FreeDescriptorSets*: proc (device: Device, descriptorPool: DescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr DescriptorSet): Result {.stdcall.}
  FreeMemory*: proc (device: Device, memory: DeviceMemory, pAllocator: ptr AllocationCallbacks): void {.stdcall.}
  GetAccelerationStructureDeviceAddressKHR*: proc (device: Device, pInfo: ptr AccelerationStructureDeviceAddressInfoKHR): DeviceAddress {.stdcall.}
  GetAccelerationStructureHandleNV*: proc (device: Device, accelerationStructure: AccelerationStructureKHR, dataSize: uint, pData: pointer): Result {.stdcall.}
  GetAccelerationStructureMemoryRequirementsKHR*: proc (device: Device, pInfo: ptr AccelerationStructureMemoryRequirementsInfoKHR, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetAccelerationStructureMemoryRequirementsNV*: proc (device: Device, pInfo: ptr AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr MemoryRequirements2KHR): void {.stdcall.}
  GetAndroidHardwareBufferPropertiesANDROID*: proc (device: Device, buffer: ptr AHardwareBuffer, pProperties: ptr AndroidHardwareBufferPropertiesANDROID): Result {.stdcall.}
  GetBufferDeviceAddress*: proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): DeviceAddress {.stdcall.}
  GetBufferDeviceAddressEXT*: proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): DeviceAddress {.stdcall.}
  GetBufferDeviceAddressKHR*: proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): DeviceAddress {.stdcall.}
  GetBufferMemoryRequirements*: proc (device: Device, buffer: Buffer, pMemoryRequirements: ptr MemoryRequirements): void {.stdcall.}
  GetBufferMemoryRequirements2*: proc (device: Device, pInfo: ptr BufferMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetBufferMemoryRequirements2KHR*: proc (device: Device, pInfo: ptr BufferMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetBufferOpaqueCaptureAddress*: proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): uint64 {.stdcall.}
  GetBufferOpaqueCaptureAddressKHR*: proc (device: Device, pInfo: ptr BufferDeviceAddressInfo): uint64 {.stdcall.}
  GetCalibratedTimestampsEXT*: proc (device: Device, timestampCount: uint32, pTimestampInfos: ptr CalibratedTimestampInfoEXT, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): Result {.stdcall.}
  GetDeferredOperationMaxConcurrencyKHR*: proc (device: Device, operation: DeferredOperationKHR): uint32 {.stdcall.}
  GetDeferredOperationResultKHR*: proc (device: Device, operation: DeferredOperationKHR): Result {.stdcall.}
  GetDescriptorSetLayoutSupport*: proc (device: Device, pCreateInfo: ptr DescriptorSetLayoutCreateInfo, pSupport: ptr DescriptorSetLayoutSupport): void {.stdcall.}
  GetDescriptorSetLayoutSupportKHR*: proc (device: Device, pCreateInfo: ptr DescriptorSetLayoutCreateInfo, pSupport: ptr DescriptorSetLayoutSupport): void {.stdcall.}
  GetDeviceAccelerationStructureCompatibilityKHR*: proc (device: Device, version: ptr AccelerationStructureVersionKHR): Result {.stdcall.}
  GetDeviceGroupPeerMemoryFeatures*: proc (device: Device, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr PeerMemoryFeatureFlags): void {.stdcall.}
  GetDeviceGroupPeerMemoryFeaturesKHR*: proc (device: Device, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr PeerMemoryFeatureFlags): void {.stdcall.}
  GetDeviceGroupPresentCapabilitiesKHR*: proc (device: Device, pDeviceGroupPresentCapabilities: ptr DeviceGroupPresentCapabilitiesKHR): Result {.stdcall.}
  GetDeviceGroupSurfacePresentModes2EXT*: proc (device: Device, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pModes: ptr DeviceGroupPresentModeFlagsKHR): Result {.stdcall.}
  GetDeviceGroupSurfacePresentModesKHR*: proc (device: Device, surface: SurfaceKHR, pModes: ptr DeviceGroupPresentModeFlagsKHR): Result {.stdcall.}
  GetDeviceMemoryCommitment*: proc (device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: ptr DeviceSize): void {.stdcall.}
  GetDeviceMemoryOpaqueCaptureAddress*: proc (device: Device, pInfo: ptr DeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}
  GetDeviceMemoryOpaqueCaptureAddressKHR*: proc (device: Device, pInfo: ptr DeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}
  GetDeviceProcAddr*: proc (device: Device, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  GetDeviceQueue*: proc (device: Device, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr Queue): void {.stdcall.}
  GetDeviceQueue2*: proc (device: Device, pQueueInfo: ptr DeviceQueueInfo2, pQueue: ptr Queue): void {.stdcall.}
  GetDisplayModeProperties2KHR*: proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr DisplayModeProperties2KHR): Result {.stdcall.}
  GetDisplayModePropertiesKHR*: proc (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr DisplayModePropertiesKHR): Result {.stdcall.}
  GetDisplayPlaneCapabilities2KHR*: proc (physicalDevice: PhysicalDevice, pDisplayPlaneInfo: ptr DisplayPlaneInfo2KHR, pCapabilities: ptr DisplayPlaneCapabilities2KHR): Result {.stdcall.}
  GetDisplayPlaneCapabilitiesKHR*: proc (physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: uint32, pCapabilities: ptr DisplayPlaneCapabilitiesKHR): Result {.stdcall.}
  GetDisplayPlaneSupportedDisplaysKHR*: proc (physicalDevice: PhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr DisplayKHR): Result {.stdcall.}
  GetEventStatus*: proc (device: Device, event: Event): Result {.stdcall.}
  GetFenceFdKHR*: proc (device: Device, pGetFdInfo: ptr FenceGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}
  GetFenceStatus*: proc (device: Device, fence: Fence): Result {.stdcall.}
  GetFenceWin32HandleKHR*: proc (device: Device, pGetWin32HandleInfo: ptr FenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}
  GetGeneratedCommandsMemoryRequirementsNV*: proc (device: Device, pInfo: ptr GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetImageDrmFormatModifierPropertiesEXT*: proc (device: Device, image: Image, pProperties: ptr ImageDrmFormatModifierPropertiesEXT): Result {.stdcall.}
  GetImageMemoryRequirements*: proc (device: Device, image: Image, pMemoryRequirements: ptr MemoryRequirements): void {.stdcall.}
  GetImageMemoryRequirements2*: proc (device: Device, pInfo: ptr ImageMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetImageMemoryRequirements2KHR*: proc (device: Device, pInfo: ptr ImageMemoryRequirementsInfo2, pMemoryRequirements: ptr MemoryRequirements2): void {.stdcall.}
  GetImageSparseMemoryRequirements*: proc (device: Device, image: Image, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr SparseImageMemoryRequirements): void {.stdcall.}
  GetImageSparseMemoryRequirements2*: proc (device: Device, pInfo: ptr ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr SparseImageMemoryRequirements2): void {.stdcall.}
  GetImageSparseMemoryRequirements2KHR*: proc (device: Device, pInfo: ptr ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr SparseImageMemoryRequirements2): void {.stdcall.}
  GetImageSubresourceLayout*: proc (device: Device, image: Image, pSubresource: ptr ImageSubresource, pLayout: ptr SubresourceLayout): void {.stdcall.}
  GetImageViewAddressNVX*: proc (device: Device, imageView: ImageView, pProperties: ptr ImageViewAddressPropertiesNVX): Result {.stdcall.}
  GetImageViewHandleNVX*: proc (device: Device, pInfo: ptr ImageViewHandleInfoNVX): uint32 {.stdcall.}
  GetInstanceProcAddr*: proc (instance: Instance, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  GetMemoryAndroidHardwareBufferANDROID*: proc (device: Device, pInfo: ptr MemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): Result {.stdcall.}
  GetMemoryFdKHR*: proc (device: Device, pGetFdInfo: ptr MemoryGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}
  GetMemoryFdPropertiesKHR*: proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, fd: cint, pMemoryFdProperties: ptr MemoryFdPropertiesKHR): Result {.stdcall.}
  GetMemoryHostPointerPropertiesEXT*: proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr MemoryHostPointerPropertiesEXT): Result {.stdcall.}
  GetMemoryWin32HandleKHR*: proc (device: Device, pGetWin32HandleInfo: ptr MemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}
  GetMemoryWin32HandleNV*: proc (device: Device, memory: DeviceMemory, handleType: ExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): Result {.stdcall.}
  GetMemoryWin32HandlePropertiesKHR*: proc (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr MemoryWin32HandlePropertiesKHR): Result {.stdcall.}
  GetPastPresentationTimingGOOGLE*: proc (device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr PastPresentationTimingGOOGLE): Result {.stdcall.}
  GetPerformanceParameterINTEL*: proc (device: Device, parameter: PerformanceParameterTypeINTEL, pValue: ptr PerformanceValueINTEL): Result {.stdcall.}
  GetPhysicalDeviceCalibrateableTimeDomainsEXT*: proc (physicalDevice: PhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr TimeDomainEXT): Result {.stdcall.}
  GetPhysicalDeviceCooperativeMatrixPropertiesNV*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr CooperativeMatrixPropertiesNV): Result {.stdcall.}
  GetPhysicalDeviceDirectFBPresentationSupportEXT*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): Bool32 {.stdcall.}
  GetPhysicalDeviceDisplayPlaneProperties2KHR*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPlaneProperties2KHR): Result {.stdcall.}
  GetPhysicalDeviceDisplayPlanePropertiesKHR*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPlanePropertiesKHR): Result {.stdcall.}
  GetPhysicalDeviceDisplayProperties2KHR*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayProperties2KHR): Result {.stdcall.}
  GetPhysicalDeviceDisplayPropertiesKHR*: proc (physicalDevice: PhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr DisplayPropertiesKHR): Result {.stdcall.}
  GetPhysicalDeviceExternalBufferProperties*: proc (physicalDevice: PhysicalDevice, pExternalBufferInfo: ptr PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr ExternalBufferProperties): void {.stdcall.}
  GetPhysicalDeviceExternalBufferPropertiesKHR*: proc (physicalDevice: PhysicalDevice, pExternalBufferInfo: ptr PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr ExternalBufferProperties): void {.stdcall.}
  GetPhysicalDeviceExternalFenceProperties*: proc (physicalDevice: PhysicalDevice, pExternalFenceInfo: ptr PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr ExternalFenceProperties): void {.stdcall.}
  GetPhysicalDeviceExternalFencePropertiesKHR*: proc (physicalDevice: PhysicalDevice, pExternalFenceInfo: ptr PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr ExternalFenceProperties): void {.stdcall.}
  GetPhysicalDeviceExternalImageFormatPropertiesNV*: proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr ExternalImageFormatPropertiesNV): Result {.stdcall.}
  GetPhysicalDeviceExternalSemaphoreProperties*: proc (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ptr PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr ExternalSemaphoreProperties): void {.stdcall.}
  GetPhysicalDeviceExternalSemaphorePropertiesKHR*: proc (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ptr PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr ExternalSemaphoreProperties): void {.stdcall.}
  GetPhysicalDeviceFeatures*: proc (physicalDevice: PhysicalDevice, pFeatures: ptr PhysicalDeviceFeatures): void {.stdcall.}
  GetPhysicalDeviceFeatures2*: proc (physicalDevice: PhysicalDevice, pFeatures: ptr PhysicalDeviceFeatures2): void {.stdcall.}
  GetPhysicalDeviceFeatures2KHR*: proc (physicalDevice: PhysicalDevice, pFeatures: ptr PhysicalDeviceFeatures2): void {.stdcall.}
  GetPhysicalDeviceFormatProperties*: proc (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ptr FormatProperties): void {.stdcall.}
  GetPhysicalDeviceFormatProperties2*: proc (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ptr FormatProperties2): void {.stdcall.}
  GetPhysicalDeviceFormatProperties2KHR*: proc (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ptr FormatProperties2): void {.stdcall.}
  GetPhysicalDeviceImageFormatProperties*: proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: ptr ImageFormatProperties): Result {.stdcall.}
  GetPhysicalDeviceImageFormatProperties2*: proc (physicalDevice: PhysicalDevice, pImageFormatInfo: ptr PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr ImageFormatProperties2): Result {.stdcall.}
  GetPhysicalDeviceImageFormatProperties2KHR*: proc (physicalDevice: PhysicalDevice, pImageFormatInfo: ptr PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr ImageFormatProperties2): Result {.stdcall.}
  GetPhysicalDeviceMemoryProperties*: proc (physicalDevice: PhysicalDevice, pMemoryProperties: ptr PhysicalDeviceMemoryProperties): void {.stdcall.}
  GetPhysicalDeviceMemoryProperties2*: proc (physicalDevice: PhysicalDevice, pMemoryProperties: ptr PhysicalDeviceMemoryProperties2): void {.stdcall.}
  GetPhysicalDeviceMemoryProperties2KHR*: proc (physicalDevice: PhysicalDevice, pMemoryProperties: ptr PhysicalDeviceMemoryProperties2): void {.stdcall.}
  GetPhysicalDeviceMultisamplePropertiesEXT*: proc (physicalDevice: PhysicalDevice, samples: SampleCountFlagBits, pMultisampleProperties: ptr MultisamplePropertiesEXT): void {.stdcall.}
  GetPhysicalDevicePresentRectanglesKHR*: proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: ptr uint32, pRects: ptr Rect2D): Result {.stdcall.}
  GetPhysicalDeviceProperties*: proc (physicalDevice: PhysicalDevice, pProperties: ptr PhysicalDeviceProperties): void {.stdcall.}
  GetPhysicalDeviceProperties2*: proc (physicalDevice: PhysicalDevice, pProperties: ptr PhysicalDeviceProperties2): void {.stdcall.}
  GetPhysicalDeviceProperties2KHR*: proc (physicalDevice: PhysicalDevice, pProperties: ptr PhysicalDeviceProperties2): void {.stdcall.}
  GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR*: proc (physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: ptr QueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32): void {.stdcall.}
  GetPhysicalDeviceQueueFamilyProperties*: proc (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr QueueFamilyProperties): void {.stdcall.}
  GetPhysicalDeviceQueueFamilyProperties2*: proc (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr QueueFamilyProperties2): void {.stdcall.}
  GetPhysicalDeviceQueueFamilyProperties2KHR*: proc (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr QueueFamilyProperties2): void {.stdcall.}
  GetPhysicalDeviceSparseImageFormatProperties*: proc (physicalDevice: PhysicalDevice, format: Format, `type`: ImageType, samples: SampleCountFlagBits, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: ptr uint32, pProperties: ptr SparseImageFormatProperties): void {.stdcall.}
  GetPhysicalDeviceSparseImageFormatProperties2*: proc (physicalDevice: PhysicalDevice, pFormatInfo: ptr PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr SparseImageFormatProperties2): void {.stdcall.}
  GetPhysicalDeviceSparseImageFormatProperties2KHR*: proc (physicalDevice: PhysicalDevice, pFormatInfo: ptr PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr SparseImageFormatProperties2): void {.stdcall.}
  GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV*: proc (physicalDevice: PhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr FramebufferMixedSamplesCombinationNV): Result {.stdcall.}
  GetPhysicalDeviceSurfaceCapabilities2EXT*: proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ptr SurfaceCapabilities2EXT): Result {.stdcall.}
  GetPhysicalDeviceSurfaceCapabilities2KHR*: proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr SurfaceCapabilities2KHR): Result {.stdcall.}
  GetPhysicalDeviceSurfaceCapabilitiesKHR*: proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ptr SurfaceCapabilitiesKHR): Result {.stdcall.}
  GetPhysicalDeviceSurfaceFormats2KHR*: proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr SurfaceFormat2KHR): Result {.stdcall.}
  GetPhysicalDeviceSurfaceFormatsKHR*: proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr SurfaceFormatKHR): Result {.stdcall.}
  GetPhysicalDeviceSurfacePresentModes2EXT*: proc (physicalDevice: PhysicalDevice, pSurfaceInfo: ptr PhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr PresentModeKHR): Result {.stdcall.}
  GetPhysicalDeviceSurfacePresentModesKHR*: proc (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr PresentModeKHR): Result {.stdcall.}
  GetPhysicalDeviceSurfaceSupportKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, surface: SurfaceKHR, pSupported: ptr Bool32): Result {.stdcall.}
  GetPhysicalDeviceToolPropertiesEXT*: proc (physicalDevice: PhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr PhysicalDeviceToolPropertiesEXT): Result {.stdcall.}
  GetPhysicalDeviceWaylandPresentationSupportKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): Bool32 {.stdcall.}
  GetPhysicalDeviceWin32PresentationSupportKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32): Bool32 {.stdcall.}
  GetPhysicalDeviceXcbPresentationSupportKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): Bool32 {.stdcall.}
  GetPhysicalDeviceXlibPresentationSupportKHR*: proc (physicalDevice: PhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): Bool32 {.stdcall.}
  GetPipelineCacheData*: proc (device: Device, pipelineCache: PipelineCache, pDataSize: ptr uint, pData: pointer): Result {.stdcall.}
  GetPipelineExecutableInternalRepresentationsKHR*: proc (device: Device, pExecutableInfo: ptr PipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr PipelineExecutableInternalRepresentationKHR): Result {.stdcall.}
  GetPipelineExecutablePropertiesKHR*: proc (device: Device, pPipelineInfo: ptr PipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr PipelineExecutablePropertiesKHR): Result {.stdcall.}
  GetPipelineExecutableStatisticsKHR*: proc (device: Device, pExecutableInfo: ptr PipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr PipelineExecutableStatisticKHR): Result {.stdcall.}
  GetPrivateDataEXT*: proc (device: Device, objectType: ObjectType, objectHandle: uint64, privateDataSlot: PrivateDataSlotEXT, pData: ptr uint64): void {.stdcall.}
  GetQueryPoolResults*: proc (device: Device, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: DeviceSize, flags: QueryResultFlags): Result {.stdcall.}
  GetQueueCheckpointDataNV*: proc (queue: Queue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr CheckpointDataNV): void {.stdcall.}
  GetRandROutputDisplayEXT*: proc (physicalDevice: PhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr DisplayKHR): Result {.stdcall.}
  GetRayTracingCaptureReplayShaderGroupHandlesKHR*: proc (device: Device, pipeline: Pipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): Result {.stdcall.}
  GetRayTracingShaderGroupHandlesKHR*: proc (device: Device, pipeline: Pipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): Result {.stdcall.}
  GetRayTracingShaderGroupHandlesNV*: proc (device: Device, pipeline: Pipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): Result {.stdcall.}
  GetRefreshCycleDurationGOOGLE*: proc (device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: ptr RefreshCycleDurationGOOGLE): Result {.stdcall.}
  GetRenderAreaGranularity*: proc (device: Device, renderPass: RenderPass, pGranularity: ptr Extent2D): void {.stdcall.}
  GetSemaphoreCounterValue*: proc (device: Device, semaphore: Semaphore, pValue: ptr uint64): Result {.stdcall.}
  GetSemaphoreCounterValueKHR*: proc (device: Device, semaphore: Semaphore, pValue: ptr uint64): Result {.stdcall.}
  GetSemaphoreFdKHR*: proc (device: Device, pGetFdInfo: ptr SemaphoreGetFdInfoKHR, pFd: ptr cint): Result {.stdcall.}
  GetSemaphoreWin32HandleKHR*: proc (device: Device, pGetWin32HandleInfo: ptr SemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): Result {.stdcall.}
  GetShaderInfoAMD*: proc (device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlagBits, infoType: ShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): Result {.stdcall.}
  GetSwapchainCounterEXT*: proc (device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): Result {.stdcall.}
  GetSwapchainImagesKHR*: proc (device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr Image): Result {.stdcall.}
  GetSwapchainStatusKHR*: proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}
  GetValidationCacheDataEXT*: proc (device: Device, validationCache: ValidationCacheEXT, pDataSize: ptr uint, pData: pointer): Result {.stdcall.}
  ImportFenceFdKHR*: proc (device: Device, pImportFenceFdInfo: ptr ImportFenceFdInfoKHR): Result {.stdcall.}
  ImportFenceWin32HandleKHR*: proc (device: Device, pImportFenceWin32HandleInfo: ptr ImportFenceWin32HandleInfoKHR): Result {.stdcall.}
  ImportSemaphoreFdKHR*: proc (device: Device, pImportSemaphoreFdInfo: ptr ImportSemaphoreFdInfoKHR): Result {.stdcall.}
  ImportSemaphoreWin32HandleKHR*: proc (device: Device, pImportSemaphoreWin32HandleInfo: ptr ImportSemaphoreWin32HandleInfoKHR): Result {.stdcall.}
  InitializePerformanceApiINTEL*: proc (device: Device, pInitializeInfo: ptr InitializePerformanceApiInfoINTEL): Result {.stdcall.}
  InvalidateMappedMemoryRanges*: proc (device: Device, memoryRangeCount: uint32, pMemoryRanges: ptr MappedMemoryRange): Result {.stdcall.}
  MapMemory*: proc (device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: pointer): Result {.stdcall.}
  MergePipelineCaches*: proc (device: Device, dstCache: PipelineCache, srcCacheCount: uint32, pSrcCaches: ptr PipelineCache): Result {.stdcall.}
  MergeValidationCachesEXT*: proc (device: Device, dstCache: ValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr ValidationCacheEXT): Result {.stdcall.}
  QueueBeginDebugUtilsLabelEXT*: proc (queue: Queue, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}
  QueueBindSparse*: proc (queue: Queue, bindInfoCount: uint32, pBindInfo: ptr BindSparseInfo, fence: Fence): Result {.stdcall.}
  QueueEndDebugUtilsLabelEXT*: proc (queue: Queue): void {.stdcall.}
  QueueInsertDebugUtilsLabelEXT*: proc (queue: Queue, pLabelInfo: ptr DebugUtilsLabelEXT): void {.stdcall.}
  QueuePresentKHR*: proc (queue: Queue, pPresentInfo: ptr PresentInfoKHR): Result {.stdcall.}
  QueueSetPerformanceConfigurationINTEL*: proc (queue: Queue, configuration: PerformanceConfigurationINTEL): Result {.stdcall.}
  QueueSubmit*: proc (queue: Queue, submitCount: uint32, pSubmits: ptr SubmitInfo, fence: Fence): Result {.stdcall.}
  QueueWaitIdle*: proc (queue: Queue): Result {.stdcall.}
  RegisterDeviceEventEXT*: proc (device: Device, pDeviceEventInfo: ptr DeviceEventInfoEXT, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}
  RegisterDisplayEventEXT*: proc (device: Device, display: DisplayKHR, pDisplayEventInfo: ptr DisplayEventInfoEXT, pAllocator: ptr AllocationCallbacks, pFence: ptr Fence): Result {.stdcall.}
  ReleaseDisplayEXT*: proc (physicalDevice: PhysicalDevice, display: DisplayKHR): Result {.stdcall.}
  ReleaseFullScreenExclusiveModeEXT*: proc (device: Device, swapchain: SwapchainKHR): Result {.stdcall.}
  ReleasePerformanceConfigurationINTEL*: proc (device: Device, configuration: PerformanceConfigurationINTEL): Result {.stdcall.}
  ReleaseProfilingLockKHR*: proc (device: Device): void {.stdcall.}
  ResetCommandBuffer*: proc (commandBuffer: CommandBuffer, flags: CommandBufferResetFlags): Result {.stdcall.}
  ResetCommandPool*: proc (device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags): Result {.stdcall.}
  ResetDescriptorPool*: proc (device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags): Result {.stdcall.}
  ResetEvent*: proc (device: Device, event: Event): Result {.stdcall.}
  ResetFences*: proc (device: Device, fenceCount: uint32, pFences: ptr Fence): Result {.stdcall.}
  ResetQueryPool*: proc (device: Device, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  ResetQueryPoolEXT*: proc (device: Device, queryPool: QueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  SetDebugUtilsObjectNameEXT*: proc (device: Device, pNameInfo: ptr DebugUtilsObjectNameInfoEXT): Result {.stdcall.}
  SetDebugUtilsObjectTagEXT*: proc (device: Device, pTagInfo: ptr DebugUtilsObjectTagInfoEXT): Result {.stdcall.}
  SetEvent*: proc (device: Device, event: Event): Result {.stdcall.}
  SetHdrMetadataEXT*: proc (device: Device, swapchainCount: uint32, pSwapchains: ptr SwapchainKHR, pMetadata: ptr HdrMetadataEXT): void {.stdcall.}
  SetLocalDimmingAMD*: proc (device: Device, swapChain: SwapchainKHR, localDimmingEnable: Bool32): void {.stdcall.}
  SetPrivateDataEXT*: proc (device: Device, objectType: ObjectType, objectHandle: uint64, privateDataSlot: PrivateDataSlotEXT, data: uint64): Result {.stdcall.}
  SignalSemaphore*: proc (device: Device, pSignalInfo: ptr SemaphoreSignalInfo): Result {.stdcall.}
  SignalSemaphoreKHR*: proc (device: Device, pSignalInfo: ptr SemaphoreSignalInfo): Result {.stdcall.}
  SubmitDebugUtilsMessageEXT*: proc (instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr DebugUtilsMessengerCallbackDataEXT): void {.stdcall.}
  TrimCommandPool*: proc (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags): void {.stdcall.}
  TrimCommandPoolKHR*: proc (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags): void {.stdcall.}
  UninitializePerformanceApiINTEL*: proc (device: Device): void {.stdcall.}
  UnmapMemory*: proc (device: Device, memory: DeviceMemory): void {.stdcall.}
  UpdateDescriptorSetWithTemplate*: proc (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: pointer): void {.stdcall.}
  UpdateDescriptorSetWithTemplateKHR*: proc (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: pointer): void {.stdcall.}
  UpdateDescriptorSets*: proc (device: Device, descriptorWriteCount: uint32, pDescriptorWrites: ptr WriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr CopyDescriptorSet): void {.stdcall.}
  WaitForFences*: proc (device: Device, fenceCount: uint32, pFences: ptr Fence, waitAll: Bool32, timeout: uint64): Result {.stdcall.}
  WaitSemaphores*: proc (device: Device, pWaitInfo: ptr SemaphoreWaitInfo, timeout: uint64): Result {.stdcall.}
  WaitSemaphoresKHR*: proc (device: Device, pWaitInfo: ptr SemaphoreWaitInfo, timeout: uint64): Result {.stdcall.}
  WriteAccelerationStructuresPropertiesKHR*: proc (device: Device, accelerationStructureCount: uint32, pAccelerationStructures: ptr AccelerationStructureKHR, queryType: QueryType, dataSize: uint, pData: pointer, stride: uint): Result {.stdcall.}
